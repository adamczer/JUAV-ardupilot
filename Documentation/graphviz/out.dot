digraph {
	graph [fontname=Arial, nodesep=0.125, ranksep=0.25];
	node [fontcolor=white, fontname=Arial, height=0, shape=box, style=filled, width=0];
	edge [fontname=Arial];
	"(below main)" [color="#ff0000", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n(below main)\n99.98%\n(0.00%)\n0×"];
	"(below main)" -> "__cxa_atexit" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"(below main)" -> "__libc_csu_init" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"(below main)" -> "_setjmp" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"(below main)" -> main [arrowsize="1.00", color="#ff0000", fontcolor="#ff0000", fontsize="10.00", label="99.98%\n1×", labeldistance="4.00", penwidth="4.00"];
	"0x00000000000006b0" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="vgpreload_core-amd64-linux.so\n0x00000000000006b0\n0.00%\n(0.00%)\n1×"];
	"0x0000000000000c30" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n0x0000000000000c30\n0.02%\n(0.00%)\n0×"];
	"0x0000000000000c30" -> "_dl_init" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"0x0000000000000c30" -> "_dl_start" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n1×", labeldistance="0.50", penwidth="0.50"];
	"0x0000000000000c30" -> "_start" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"0x0000000000002a70" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libgcc_s.so.1\n0x0000000000002a70\n0.00%\n(0.00%)\n1×"];
	"0x0000000000002c60" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libgcc_s.so.1\n0x0000000000002c60\n0.00%\n(0.00%)\n2×"];
	"0x0000000000003140" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libgcc_s.so.1\n0x0000000000003140\n0.00%\n(0.00%)\n1×"];
	"0x00000000000056d0" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\n0x00000000000056d0\n0.00%\n(0.00%)\n1×"];
	"0x0000000000005b00" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\n0x0000000000005b00\n0.00%\n(0.00%)\n1×"];
	"0x0000000000089e10" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\n0x0000000000089e10\n0.00%\n(0.00%)\n1×"];
	"0x0000000000089e10" -> "__cxa_atexit" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"0x0000000000089e10" -> "_dl_runtime_resolve_xsave" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"0x0000000000089e10" -> "std::error_category::error_category()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"0x0000000000089e90" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\n0x0000000000089e90\n0.00%\n(0.00%)\n1×"];
	"0x0000000000089e90" -> "_dl_runtime_resolve_xsave" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"0x0000000000089eb0" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\n0x0000000000089eb0\n0.00%\n(0.00%)\n1×"];
	"0x0000000000089eb0" -> "_dl_runtime_resolve_xsave" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"0x0000000000089f40" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\n0x0000000000089f40\n0.00%\n(0.00%)\n1×"];
	"0x000000000008a050" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\n0x000000000008a050\n0.00%\n(0.00%)\n1×"];
	"0x000000000008a280" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\n0x000000000008a280\n0.00%\n(0.00%)\n1×"];
	"0x000000000008a280" -> "__cxa_atexit" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"0x000000000008a2c0" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\n0x000000000008a2c0\n0.00%\n(0.00%)\n1×"];
	"0x000000000008a340" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\n0x000000000008a340\n0.00%\n(0.00%)\n1×"];
	"0x000000000008a3c0" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\n0x000000000008a3c0\n0.00%\n(0.00%)\n1×"];
	"0x000000000008a480" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\n0x000000000008a480\n0.00%\n(0.00%)\n1×"];
	"0x000000000008a610" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\n0x000000000008a610\n0.00%\n(0.00%)\n1×"];
	"0x000000000009e900" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\n0x000000000009e900\n0.00%\n(0.00%)\n1×"];
	"0x000000000009e900" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"0x00000000000a0d40" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\n0x00000000000a0d40\n0.00%\n(0.00%)\n1×"];
	"0x00000000000a0d40" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"0x00000000000a0d80" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\n0x00000000000a0d80\n0.00%\n(0.00%)\n22×"];
	"0x00000000000a0d80" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"0x00000000000a0d80" -> "pthread_once" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n21×", labeldistance="0.50", penwidth="0.50"];
	"0x00000000000b8fb0" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\n0x00000000000b8fb0\n0.00%\n(0.00%)\n1×"];
	"0x00000000000b8fb0" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"0x00000000000b8fb0" -> "std::locale::facet::_S_get_c_locale()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"0x00000000000b8fb0" -> "std::locale::id::_M_id() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n22×", labeldistance="0.50", penwidth="0.50"];
	"0x0000000000403338" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="???\n0x0000000000403338\n0.00%\n(0.00%)\n1×"];
	"0x0000000000406af0" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n0x0000000000406af0\n0.00%\n(0.00%)\n1×"];
	"0x0000000004000ab0" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="???\n0x0000000004000ab0\n0.00%\n(0.00%)\n2×"];
	"0x0000000004000ab0" -> free [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"0x0000000004a28578" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="???\n0x0000000004a28578\n0.00%\n(0.00%)\n1×"];
	"0x0000000004cb0a00" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="???\n0x0000000004cb0a00\n0.00%\n(0.00%)\n1×"];
	"0x0000000004fb1428" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="???\n0x0000000004fb1428\n0.00%\n(0.00%)\n1×"];
	"0x00000000052b7790" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="???\n0x00000000052b7790\n0.00%\n(0.00%)\n1×"];
	"0x00000000054d0580" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="???\n0x00000000054d0580\n0.00%\n(0.00%)\n1×"];
	"0x00000000054d0580" -> "__pthread_initialize_minimal" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"0x00000000054d0a10" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="???\n0x00000000054d0a10\n0.00%\n(0.00%)\n1×"];
	"0x00000000054d0a10" -> "__libc_dl_error_tsd" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"0x00000000057078a0" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="???\n0x00000000057078a0\n0.00%\n(0.00%)\n40×"];
	"0x00000000057078a0" -> malloc [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n40×", labeldistance="0.50", penwidth="0.50"];
	"0x00000000057078a8" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="???\n0x00000000057078a8\n0.00%\n(0.00%)\n16×"];
	"0x00000000057078a8" -> free [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n16×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::ang_vel_limit(Vector3<float>&, float, float, float) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl::ang_vel_limit(Vector3<float>&, float, float, float) const\n0.04%\n(0.04%)\n144140×"];
	"AC_AttitudeControl::attitude_controller_run_quat()" [color="#0d1375", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl::attitude_controller_run_quat()\n1.51%\n(0.10%)\n72070×"];
	"AC_AttitudeControl::attitude_controller_run_quat()" -> "AC_AttitudeControl::ang_vel_limit(Vector3<float>&, float, float, float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::attitude_controller_run_quat()" -> "AC_AttitudeControl::thrust_heading_rotation_angles(Quaternion&, Quaternion const&, Vector3<float>&, float&)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.84%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::attitude_controller_run_quat()" -> "AC_AttitudeControl::update_ang_vel_target_from_att_error(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.16%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::attitude_controller_run_quat()" -> "Quaternion::from_axis_angle(Vector3<float>)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::attitude_controller_run_quat()" -> "Quaternion::from_rotation_matrix(Matrix3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::attitude_controller_run_quat()" -> "Quaternion::inverse() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n216210×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::attitude_controller_run_quat()" -> "Quaternion::normalize()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n144140×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::attitude_controller_run_quat()" -> "Quaternion::operator*(Quaternion const&) const" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.21%\n360350×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::attitude_controller_run_quat()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n144140×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::control_monitor_log()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl::control_monitor_log()\n0.03%\n(0.00%)\n1740×"];
	"AC_AttitudeControl::control_monitor_log()" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::control_monitor_log()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::control_monitor_log()" -> "AP_Logger::Write(char const*, char const*, char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::control_monitor_log()" -> "float safe_sqrt<float>(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8700×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::control_monitor_update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl::control_monitor_update()\n0.04%\n(0.04%)\n72070×"];
	"AC_AttitudeControl::control_monitor_update()" -> "AC_AttitudeControl_Multi::get_rate_pitch_pid()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::control_monitor_update()" -> "AC_AttitudeControl_Multi::get_rate_roll_pid()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::control_monitor_update()" -> "AC_AttitudeControl_Multi::get_rate_yaw_pid()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::euler_accel_limit(Vector3<float> const&, Vector3<float> const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl::euler_accel_limit(Vector3<float> const&, Vector3<float> const&)\n0.12%\n(0.05%)\n72070×"];
	"AC_AttitudeControl::euler_accel_limit(Vector3<float> const&, Vector3<float> const&)" -> cosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::euler_accel_limit(Vector3<float> const&, Vector3<float> const&)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n216210×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::euler_accel_limit(Vector3<float> const&, Vector3<float> const&)" -> sinf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n144140×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::get_althold_lean_angle_max() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl::get_althold_lean_angle_max() const\n0.00%\n(0.00%)\n52607×"];
	"AC_AttitudeControl::inertial_frame_reset()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl::inertial_frame_reset()\n0.00%\n(0.00%)\n4×"];
	"AC_AttitudeControl::inertial_frame_reset()" -> "Quaternion::from_rotation_matrix(Matrix3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::inertial_frame_reset()" -> "Quaternion::operator*(Quaternion const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::inertial_frame_reset()" -> "Quaternion::to_euler(float&, float&, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::input_euler_angle_roll_pitch_euler_rate_yaw(float, float, float)" [color="#0d1676", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl::input_euler_angle_roll_pitch_euler_rate_yaw(float, float, float)\n2.27%\n(0.16%)\n72070×"];
	"AC_AttitudeControl::input_euler_angle_roll_pitch_euler_rate_yaw(float, float, float)" -> "AC_AttitudeControl::ang_vel_limit(Vector3<float>&, float, float, float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::input_euler_angle_roll_pitch_euler_rate_yaw(float, float, float)" -> "AC_AttitudeControl::attitude_controller_run_quat()" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.51%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::input_euler_angle_roll_pitch_euler_rate_yaw(float, float, float)" -> "AC_AttitudeControl::euler_accel_limit(Vector3<float> const&, Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::input_euler_angle_roll_pitch_euler_rate_yaw(float, float, float)" -> "AC_AttitudeControl::sqrt_controller(float, float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n144140×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::input_euler_angle_roll_pitch_euler_rate_yaw(float, float, float)" -> "Quaternion::to_euler(float&, float&, float&) const" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.23%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::input_euler_angle_roll_pitch_euler_rate_yaw(float, float, float)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n216210×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::input_euler_angle_roll_pitch_euler_rate_yaw(float, float, float)" -> "float wrap_PI<float>(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n144140×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::input_euler_angle_roll_pitch_euler_rate_yaw(float, float, float)" -> sincosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.09%\n288280×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::input_shaping_rate_predictor(Vector2<float> const&, Vector2<float>&, float) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl::input_shaping_rate_predictor(Vector2<float> const&, Vector2<float>&, float) const\n0.01%\n(0.00%)\n3236×"];
	"AC_AttitudeControl::input_shaping_rate_predictor(Vector2<float> const&, Vector2<float>&, float) const" -> "AC_AttitudeControl::sqrt_controller(float, float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6472×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::input_shaping_rate_predictor(Vector2<float> const&, Vector2<float>&, float) const" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6472×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::input_shaping_rate_predictor(Vector2<float> const&, Vector2<float>&, float) const" -> "float wrap_PI<float>(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6472×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::pre_arm_checks(char const*, char*, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl::pre_arm_checks(char const*, char*, unsigned char)\n0.00%\n(0.00%)\n7×"];
	"AC_AttitudeControl::pre_arm_checks(char const*, char*, unsigned char)" -> "AC_AttitudeControl_Multi::get_rate_pitch_pid()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::pre_arm_checks(char const*, char*, unsigned char)" -> "AC_AttitudeControl_Multi::get_rate_roll_pid()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::pre_arm_checks(char const*, char*, unsigned char)" -> "AC_AttitudeControl_Multi::get_rate_yaw_pid()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::reset_rate_controller_I_terms()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl::reset_rate_controller_I_terms()\n0.00%\n(0.00%)\n4299×"];
	"AC_AttitudeControl::reset_rate_controller_I_terms()" -> "AC_AttitudeControl_Multi::get_rate_pitch_pid()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4299×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::reset_rate_controller_I_terms()" -> "AC_AttitudeControl_Multi::get_rate_roll_pid()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4299×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::reset_rate_controller_I_terms()" -> "AC_AttitudeControl_Multi::get_rate_yaw_pid()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4299×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::reset_rate_controller_I_terms()" -> "AC_PID::reset_I()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n12897×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::shift_ef_yaw_target(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl::shift_ef_yaw_target(float)\n0.01%\n(0.00%)\n4299×"];
	"AC_AttitudeControl::shift_ef_yaw_target(float)" -> "Quaternion::from_axis_angle(Vector3<float>)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4299×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::shift_ef_yaw_target(float)" -> "Quaternion::operator*(Quaternion const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4299×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::sqrt_controller(float, float, float, float)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl::sqrt_controller(float, float, float, float)\n0.19%\n(0.16%)\n419429×"];
	"AC_AttitudeControl::sqrt_controller(float, float, float, float)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n419429×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::sqrt_controller(float, float, float, float)" -> "float safe_sqrt<float>(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3313×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::thrust_heading_rotation_angles(Quaternion&, Quaternion const&, Vector3<float>&, float&)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl::thrust_heading_rotation_angles(Quaternion&, Quaternion const&, Vector3<float>&, float&)\n0.84%\n(0.11%)\n72070×"];
	"AC_AttitudeControl::thrust_heading_rotation_angles(Quaternion&, Quaternion const&, Vector3<float>&, float&)" -> "Matrix3<float>::operator*(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n144140×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::thrust_heading_rotation_angles(Quaternion&, Quaternion const&, Vector3<float>&, float&)" -> "Quaternion::from_axis_angle(Vector3<float> const&, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::thrust_heading_rotation_angles(Quaternion&, Quaternion const&, Vector3<float>&, float&)" -> "Quaternion::inverse() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n216210×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::thrust_heading_rotation_angles(Quaternion&, Quaternion const&, Vector3<float>&, float&)" -> "Quaternion::operator*(Quaternion const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.17%\n288280×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::thrust_heading_rotation_angles(Quaternion&, Quaternion const&, Vector3<float>&, float&)" -> "Quaternion::rotation_matrix(Matrix3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n144140×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::thrust_heading_rotation_angles(Quaternion&, Quaternion const&, Vector3<float>&, float&)" -> "Quaternion::to_axis_angle(Vector3<float>&)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.25%\n144140×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::thrust_heading_rotation_angles(Quaternion&, Quaternion const&, Vector3<float>&, float&)" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::thrust_heading_rotation_angles(Quaternion&, Quaternion const&, Vector3<float>&, float&)" -> "Vector3<float>::operator%(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::thrust_heading_rotation_angles(Quaternion&, Quaternion const&, Vector3<float>&, float&)" -> "Vector3<float>::operator*(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n144140×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::thrust_heading_rotation_angles(Quaternion&, Quaternion const&, Vector3<float>&, float&)" -> "Vector3<float>::operator/=(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n49634×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::thrust_heading_rotation_angles(Quaternion&, Quaternion const&, Vector3<float>&, float&)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::thrust_heading_rotation_angles(Quaternion&, Quaternion const&, Vector3<float>&, float&)" -> acosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n144139×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::thrust_heading_rotation_angles(Quaternion&, Quaternion const&, Vector3<float>&, float&)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n144140×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::update_ang_vel_target_from_att_error(Vector3<float> const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl::update_ang_vel_target_from_att_error(Vector3<float> const&)\n0.16%\n(0.05%)\n72070×"];
	"AC_AttitudeControl::update_ang_vel_target_from_att_error(Vector3<float> const&)" -> "AC_AttitudeControl::sqrt_controller(float, float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.10%\n216210×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl::update_ang_vel_target_from_att_error(Vector3<float> const&)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n216210×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl_Multi::AC_AttitudeControl_Multi(AP_AHRS_View&, AP_Vehicle::MultiCopter const&, AP_MotorsMulticopter&, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl_Multi::AC_AttitudeControl_Multi(AP_AHRS_View&, AP_Vehicle::MultiCopter const&, AP_MotorsMulticopter&, float)\n0.00%\n(0.00%)\n1×"];
	"AC_AttitudeControl_Multi::AC_AttitudeControl_Multi(AP_AHRS_View&, AP_Vehicle::MultiCopter const&, AP_MotorsMulticopter&, float)" -> "AC_PID::AC_PID(float, float, float, float, float, float, float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl_Multi::AC_AttitudeControl_Multi(AP_AHRS_View&, AP_Vehicle::MultiCopter const&, AP_MotorsMulticopter&, float)" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl_Multi::get_rate_pitch_pid()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl_Multi::get_rate_pitch_pid()\n0.00%\n(0.00%)\n76376×"];
	"AC_AttitudeControl_Multi::get_rate_roll_pid()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl_Multi::get_rate_roll_pid()\n0.00%\n(0.00%)\n76376×"];
	"AC_AttitudeControl_Multi::get_rate_yaw_pid()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl_Multi::get_rate_yaw_pid()\n0.00%\n(0.00%)\n76376×"];
	"AC_AttitudeControl_Multi::parameter_sanity_check()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl_Multi::parameter_sanity_check()\n0.00%\n(0.00%)\n1×"];
	"AC_AttitudeControl_Multi::rate_controller_run()" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl_Multi::rate_controller_run()\n0.53%\n(0.07%)\n72070×"];
	"AC_AttitudeControl_Multi::rate_controller_run()" -> "AC_AttitudeControl::control_monitor_update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl_Multi::rate_controller_run()" -> "AC_PID::get_ff()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n216210×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl_Multi::rate_controller_run()" -> "AC_PID::update_all(float, float, bool)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.25%\n216210×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl_Multi::rate_controller_run()" -> "AP_AHRS_View::get_gyro_latest() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.15%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl_Multi::rate_controller_run()" -> "Vector3<float>::operator+=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl_Multi::rate_controller_run()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl_Multi::set_throttle_mix_max(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl_Multi::set_throttle_mix_max(float)\n0.00%\n(0.00%)\n6171×"];
	"AC_AttitudeControl_Multi::set_throttle_mix_max(float)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6171×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl_Multi::set_throttle_out(float, bool, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AttitudeControl_Multi::set_throttle_out(float, bool, float)\n0.15%\n(0.08%)\n72070×"];
	"AC_AttitudeControl_Multi::set_throttle_out(float, bool, float)" -> "AP_MotorsMulticopter::get_throttle_hover() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl_Multi::set_throttle_out(float, bool, float)" -> "LowPassFilter<float>::set_cutoff_frequency(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl_Multi::set_throttle_out(float, bool, float)" -> acosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n67770×", labeldistance="0.50", penwidth="0.50"];
	"AC_AttitudeControl_Multi::set_throttle_out(float, bool, float)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n428120×", labeldistance="0.50", penwidth="0.50"];
	"AC_AutoTune::AC_AutoTune()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_AutoTune::AC_AutoTune()\n0.00%\n(0.00%)\n1×"];
	"AC_AutoTune::AC_AutoTune()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_AutoTune::AC_AutoTune()" -> "LowPassFilter<float>::LowPassFilter()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_Avoid::AC_Avoid()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Avoid::AC_Avoid()\n0.00%\n(0.00%)\n1×"];
	"AC_Avoid::AC_Avoid()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_Avoid::adjust_velocity(float, float, Vector2<float>&, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Avoid::adjust_velocity(float, float, Vector2<float>&, float)\n0.01%\n(0.00%)\n3236×"];
	"AC_Avoid::adjust_velocity(float, float, Vector2<float>&, float)" -> "AC_Avoid::adjust_velocity_circle_fence(float, float, Vector2<float>&, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Avoid::adjust_velocity(float, float, Vector2<float>&, float)" -> "AC_Avoid::adjust_velocity_exclusion_circles(float, float, Vector2<float>&, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Avoid::adjust_velocity(float, float, Vector2<float>&, float)" -> "AC_Avoid::adjust_velocity_inclusion_and_exclusion_polygons(float, float, Vector2<float>&, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Avoid::adjust_velocity(float, float, Vector2<float>&, float)" -> "AC_Avoid::adjust_velocity_inclusion_circles(float, float, Vector2<float>&, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Avoid::adjust_velocity(float, float, Vector2<float>&, float)" -> "AP::proximity()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Avoid::adjust_velocity(float, float, Vector2<float>&, float)" -> "AP_Proximity::get_status() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Avoid::adjust_velocity_circle_fence(float, float, Vector2<float>&, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Avoid::adjust_velocity_circle_fence(float, float, Vector2<float>&, float)\n0.00%\n(0.00%)\n3236×"];
	"AC_Avoid::adjust_velocity_circle_fence(float, float, Vector2<float>&, float)" -> "AC_Fence::get_enabled_fences() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Avoid::adjust_velocity_circle_fence(float, float, Vector2<float>&, float)" -> "AP::fence()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Avoid::adjust_velocity_exclusion_circles(float, float, Vector2<float>&, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Avoid::adjust_velocity_exclusion_circles(float, float, Vector2<float>&, float)\n0.00%\n(0.00%)\n3236×"];
	"AC_Avoid::adjust_velocity_exclusion_circles(float, float, Vector2<float>&, float)" -> "AC_Fence::polyfence() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Avoid::adjust_velocity_exclusion_circles(float, float, Vector2<float>&, float)" -> "AP::fence()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Avoid::adjust_velocity_inclusion_and_exclusion_polygons(float, float, Vector2<float>&, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Avoid::adjust_velocity_inclusion_and_exclusion_polygons(float, float, Vector2<float>&, float)\n0.00%\n(0.00%)\n3236×"];
	"AC_Avoid::adjust_velocity_inclusion_and_exclusion_polygons(float, float, Vector2<float>&, float)" -> "AC_Fence::get_enabled_fences() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Avoid::adjust_velocity_inclusion_and_exclusion_polygons(float, float, Vector2<float>&, float)" -> "AP::fence()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Avoid::adjust_velocity_inclusion_circles(float, float, Vector2<float>&, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Avoid::adjust_velocity_inclusion_circles(float, float, Vector2<float>&, float)\n0.00%\n(0.00%)\n3236×"];
	"AC_Avoid::adjust_velocity_inclusion_circles(float, float, Vector2<float>&, float)" -> "AC_Fence::polyfence() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Avoid::adjust_velocity_inclusion_circles(float, float, Vector2<float>&, float)" -> "AP::fence()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Circle::AC_Circle(AP_InertialNav const&, AP_AHRS_View const&, AC_PosControl&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Circle::AC_Circle(AP_InertialNav const&, AP_AHRS_View const&, AC_PosControl&)\n0.00%\n(0.00%)\n1×"];
	"AC_Circle::AC_Circle(AP_InertialNav const&, AP_AHRS_View const&, AC_PosControl&)" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_Fence::AC_Fence()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Fence::AC_Fence()\n0.00%\n(0.00%)\n1×"];
	"AC_Fence::AC_Fence()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_Fence::AC_Fence()" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_Fence::check()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Fence::check()\n0.00%\n(0.00%)\n542×"];
	"AC_Fence::get_enabled_fences() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Fence::get_enabled_fences() const\n0.00%\n(0.00%)\n6483×"];
	"AC_Fence::manual_recovery_start()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Fence::manual_recovery_start()\n0.00%\n(0.00%)\n1×"];
	"AC_Fence::polyfence() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Fence::polyfence() const\n0.00%\n(0.00%)\n6472×"];
	"AC_Fence::pre_arm_check(char const*&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Fence::pre_arm_check(char const*&) const\n0.00%\n(0.00%)\n7×"];
	"AC_Fence::sys_status_enabled() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Fence::sys_status_enabled() const\n0.00%\n(0.00%)\n721×"];
	"AC_Fence::sys_status_failed() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Fence::sys_status_failed() const\n0.00%\n(0.00%)\n721×"];
	"AC_Fence::sys_status_present() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Fence::sys_status_present() const\n0.00%\n(0.00%)\n721×"];
	"AC_Loiter::AC_Loiter(AP_InertialNav const&, AP_AHRS_View const&, AC_PosControl&, AC_AttitudeControl const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Loiter::AC_Loiter(AP_InertialNav const&, AP_AHRS_View const&, AC_PosControl&, AC_AttitudeControl const&)\n0.00%\n(0.00%)\n1×"];
	"AC_Loiter::AC_Loiter(AP_InertialNav const&, AP_AHRS_View const&, AC_PosControl&, AC_AttitudeControl const&)" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::calc_desired_velocity(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Loiter::calc_desired_velocity(float)\n0.02%\n(0.00%)\n3236×"];
	"AC_Loiter::calc_desired_velocity(float)" -> "AC_Avoid::adjust_velocity(float, float, Vector2<float>&, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::calc_desired_velocity(float)" -> "AC_PosControl::get_lean_angle_max_cd() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::calc_desired_velocity(float)" -> "AC_PosControl::set_max_accel_xy(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::calc_desired_velocity(float)" -> "AC_PosControl::set_max_speed_xy(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::calc_desired_velocity(float)" -> "AP::ac_avoid()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::calc_desired_velocity(float)" -> "AP::ahrs_navekf()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::calc_desired_velocity(float)" -> "AP_AHRS_NavEKF::getEkfControlLimits(float&, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::calc_desired_velocity(float)" -> "Vector2<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6472×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::calc_desired_velocity(float)" -> "Vector2<float>::operator-=(Vector2<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::calc_desired_velocity(float)" -> tanf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::get_angle_max_cd() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Loiter::get_angle_max_cd() const\n0.00%\n(0.00%)\n3236×"];
	"AC_Loiter::get_angle_max_cd() const" -> "AC_PosControl::get_lean_angle_max_cd() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::init_target(Vector3<float> const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Loiter::init_target(Vector3<float> const&)\n0.00%\n(0.00%)\n1×"];
	"AC_Loiter::init_target(Vector3<float> const&)" -> "AC_PosControl::is_active_xy() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::init_target(Vector3<float> const&)" -> "AC_PosControl::set_max_accel_xy(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::init_target(Vector3<float> const&)" -> "AC_PosControl::set_max_speed_xy(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::init_target(Vector3<float> const&)" -> "AC_PosControl::set_xy_target(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::init_target(Vector3<float> const&)" -> tanf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::set_pilot_desired_acceleration(float, float, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Loiter::set_pilot_desired_acceleration(float, float, float)\n0.02%\n(0.00%)\n3236×"];
	"AC_Loiter::set_pilot_desired_acceleration(float, float, float)" -> "AC_AttitudeControl::input_shaping_rate_predictor(Vector2<float> const&, Vector2<float>&, float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::set_pilot_desired_acceleration(float, float, float)" -> "Vector2<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::set_pilot_desired_acceleration(float, float, float)" -> "Vector2<float>::operator+=(Vector2<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::set_pilot_desired_acceleration(float, float, float)" -> cosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6472×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::set_pilot_desired_acceleration(float, float, float)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::set_pilot_desired_acceleration(float, float, float)" -> "float wrap_PI<float>(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6472×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::set_pilot_desired_acceleration(float, float, float)" -> tanf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n12944×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Loiter::update()\n0.05%\n(0.00%)\n3236×"];
	"AC_Loiter::update()" -> "AC_Loiter::calc_desired_velocity(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::update()" -> "AC_PosControl::set_max_accel_xy(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::update()" -> "AC_PosControl::set_max_speed_xy(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::update()" -> "AC_PosControl::time_since_last_xy_update() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_Loiter::update()" -> "AC_PosControl::update_xy_controller()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_P::get_p(float) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_P::get_p(float) const\n0.00%\n(0.00%)\n49371×"];
	"AC_PID::AC_PID(float, float, float, float, float, float, float, float, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PID::AC_PID(float, float, float, float, float, float, float, float, float)\n0.00%\n(0.00%)\n4×"];
	"AC_PID::AC_PID(float, float, float, float, float, float, float, float, float)" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AC_PID::get_ff()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PID::get_ff()\n0.01%\n(0.01%)\n216210×"];
	"AC_PID::reset_I()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PID::reset_I()\n0.00%\n(0.00%)\n12897×"];
	"AC_PID::set_dt(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PID::set_dt(float)\n0.00%\n(0.00%)\n1×"];
	"AC_PID::set_integrator(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PID::set_integrator(float)\n0.00%\n(0.00%)\n2×"];
	"AC_PID::set_integrator(float)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_PID::update_all(float, float, bool)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PID::update_all(float, float, bool)\n0.31%\n(0.29%)\n265581×"];
	"AC_PID::update_all(float, float, bool)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n252678×", labeldistance="0.50", penwidth="0.50"];
	"AC_PID_2D::AC_PID_2D(float, float, float, float, float, float, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PID_2D::AC_PID_2D(float, float, float, float, float, float, float)\n0.00%\n(0.00%)\n1×"];
	"AC_PID_2D::AC_PID_2D(float, float, float, float, float, float, float)" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PID_2D::get_d()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PID_2D::get_d()\n0.01%\n(0.01%)\n49371×"];
	"AC_PID_2D::get_i()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PID_2D::get_i()\n0.01%\n(0.01%)\n18394×"];
	"AC_PID_2D::get_i()" -> "Vector2<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18394×", labeldistance="0.50", penwidth="0.50"];
	"AC_PID_2D::get_i()" -> "Vector2<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n36788×", labeldistance="0.50", penwidth="0.50"];
	"AC_PID_2D::get_i()" -> "Vector2<float>::operator+=(Vector2<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18394×", labeldistance="0.50", penwidth="0.50"];
	"AC_PID_2D::get_i_shrink()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PID_2D::get_i_shrink()\n0.03%\n(0.02%)\n30977×"];
	"AC_PID_2D::get_i_shrink()" -> "Vector2<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n61954×", labeldistance="0.50", penwidth="0.50"];
	"AC_PID_2D::get_i_shrink()" -> "Vector2<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n61954×", labeldistance="0.50", penwidth="0.50"];
	"AC_PID_2D::get_i_shrink()" -> "Vector2<float>::operator*=(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n30977×", labeldistance="0.50", penwidth="0.50"];
	"AC_PID_2D::get_i_shrink()" -> "Vector2<float>::operator+=(Vector2<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n30977×", labeldistance="0.50", penwidth="0.50"];
	"AC_PID_2D::get_p() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PID_2D::get_p() const\n0.01%\n(0.00%)\n49371×"];
	"AC_PID_2D::get_p() const" -> "Vector2<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PID_2D::reset_filter()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PID_2D::reset_filter()\n0.00%\n(0.00%)\n1×"];
	"AC_PID_2D::set_dt(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PID_2D::set_dt(float)\n0.00%\n(0.00%)\n1×"];
	"AC_PID_2D::set_input(Vector2<float> const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PID_2D::set_input(Vector2<float> const&)\n0.07%\n(0.03%)\n49371×"];
	"AC_PID_2D::set_input(Vector2<float> const&)" -> "Vector2<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n98742×", labeldistance="0.50", penwidth="0.50"];
	"AC_PID_2D::set_input(Vector2<float> const&)" -> "Vector2<float>::operator+=(Vector2<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n98742×", labeldistance="0.50", penwidth="0.50"];
	"AC_PID_2D::set_input(Vector2<float> const&)" -> "Vector2<float>::operator-(Vector2<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n98742×", labeldistance="0.50", penwidth="0.50"];
	"AC_PID_2D::set_input(Vector2<float> const&)" -> "Vector2<float>::operator/(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PI_2D::AC_PI_2D(float, float, float, float, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PI_2D::AC_PI_2D(float, float, float, float, float)\n0.00%\n(0.00%)\n1×"];
	"AC_PI_2D::AC_PI_2D(float, float, float, float, float)" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PolyFence_loader::index_eeprom()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PolyFence_loader::index_eeprom()\n0.00%\n(0.00%)\n1×"];
	"AC_PolyFence_loader::index_eeprom()" -> "AC_PolyFence_loader::scan_eeprom(Functor<void, AC_PolyFenceType const, unsigned short>) [clone .constprop.21]" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PolyFence_loader::index_eeprom()" -> "StorageAccess::read_byte(unsigned short) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AC_PolyFence_loader::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PolyFence_loader::init()\n0.00%\n(0.00%)\n1×"];
	"AC_PolyFence_loader::init()" -> "AC_PolyFence_loader::index_eeprom()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PolyFence_loader::scan_eeprom(Functor<void, AC_PolyFenceType const, unsigned short>) [clone .constprop.21]" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PolyFence_loader::scan_eeprom(Functor<void, AC_PolyFenceType const, unsigned short>) [clone .constprop.21]\n0.00%\n(0.00%)\n1×"];
	"AC_PolyFence_loader::scan_eeprom(Functor<void, AC_PolyFenceType const, unsigned short>) [clone .constprop.21]" -> "StorageAccess::read_byte(unsigned short) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"AC_PolyFence_loader::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PolyFence_loader::update()\n0.00%\n(0.00%)\n1802×"];
	"AC_PolyFence_loader::update()" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n112×", labeldistance="0.50", penwidth="0.50"];
	"AC_PolyFence_loader::update()" -> "AP_AHRS_NavEKF::get_origin(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n112×", labeldistance="0.50", penwidth="0.50"];
	"AC_PolyFence_loader::update()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PolyFence_loader::update()" -> "HALSITL::Semaphore::give()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PolyFence_loader::update()" -> "HALSITL::Semaphore::take(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PolyFence_loader::update()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n112×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::AC_PosControl(AP_AHRS_View&, AP_InertialNav const&, AP_Motors const&, AC_AttitudeControl&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::AC_PosControl(AP_AHRS_View&, AP_InertialNav const&, AP_Motors const&, AC_AttitudeControl&)\n0.00%\n(0.00%)\n1×"];
	"AC_PosControl::AC_PosControl(AP_AHRS_View&, AP_InertialNav const&, AP_Motors const&, AC_AttitudeControl&)" -> "AC_PID::AC_PID(float, float, float, float, float, float, float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::AC_PosControl(AP_AHRS_View&, AP_InertialNav const&, AP_Motors const&, AC_AttitudeControl&)" -> "AC_PID_2D::AC_PID_2D(float, float, float, float, float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::AC_PosControl(AP_AHRS_View&, AP_InertialNav const&, AP_Motors const&, AC_AttitudeControl&)" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::AC_PosControl(AP_AHRS_View&, AP_InertialNav const&, AP_Motors const&, AC_AttitudeControl&)" -> "LowPassFilter<Vector2<float> >::LowPassFilter(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::AC_PosControl(AP_AHRS_View&, AP_InertialNav const&, AP_Motors const&, AC_AttitudeControl&)" -> "LowPassFilter<float>::LowPassFilter()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::calc_leash_length_xy()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::calc_leash_length_xy()\n0.00%\n(0.00%)\n1×"];
	"AC_PosControl::calc_leash_length_z()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::calc_leash_length_z()\n0.00%\n(0.00%)\n1×"];
	"AC_PosControl::get_alt_error() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::get_alt_error() const\n0.00%\n(0.00%)\n721×"];
	"AC_PosControl::get_alt_error() const" -> "AP_InertialNav_NavEKF::get_altitude() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::get_lean_angle_max_cd() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::get_lean_angle_max_cd() const\n0.00%\n(0.00%)\n6472×"];
	"AC_PosControl::get_stopping_point_xy(Vector3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::get_stopping_point_xy(Vector3<float>&) const\n0.00%\n(0.00%)\n2×"];
	"AC_PosControl::get_stopping_point_xy(Vector3<float>&) const" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::get_stopping_point_xy(Vector3<float>&) const" -> "AP_InertialNav_NavEKF::get_position() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::get_stopping_point_xy(Vector3<float>&) const" -> "AP_InertialNav_NavEKF::get_velocity() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::get_stopping_point_xy(Vector3<float>&) const" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::get_stopping_point_z(Vector3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::get_stopping_point_z(Vector3<float>&) const\n0.00%\n(0.00%)\n2×"];
	"AC_PosControl::get_stopping_point_z(Vector3<float>&) const" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::get_stopping_point_z(Vector3<float>&) const" -> "AP_InertialNav_NavEKF::get_altitude() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::get_stopping_point_z(Vector3<float>&) const" -> "AP_InertialNav_NavEKF::get_velocity_z() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::get_stopping_point_z(Vector3<float>&) const" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::init_xy_controller()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::init_xy_controller()\n0.00%\n(0.00%)\n1×"];
	"AC_PosControl::init_xy_controller()" -> "AC_PID_2D::reset_filter()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::init_xy_controller()" -> "AP_AHRS_NavEKF::getLastPosNorthEastReset(Vector2<float>&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::init_xy_controller()" -> "Vector3<float>::operator-(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::is_active_xy() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::is_active_xy() const\n0.00%\n(0.00%)\n23917×"];
	"AC_PosControl::is_active_xy() const" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n23917×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::is_active_z() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::is_active_z() const\n0.00%\n(0.00%)\n8699×"];
	"AC_PosControl::is_active_z() const" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8699×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::pre_arm_checks(char const*, char*, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::pre_arm_checks(char const*, char*, unsigned char)\n0.00%\n(0.00%)\n7×"];
	"AC_PosControl::run_xy_controller(float)" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::run_xy_controller(float)\n0.43%\n(0.11%)\n49371×"];
	"AC_PosControl::run_xy_controller(float)" -> "AC_AttitudeControl::get_althold_lean_angle_max() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_xy_controller(float)" -> "AC_PID_2D::get_d()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_xy_controller(float)" -> "AC_PID_2D::get_i()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n18394×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_xy_controller(float)" -> "AC_PID_2D::get_i_shrink()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n30977×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_xy_controller(float)" -> "AC_PID_2D::get_p() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_xy_controller(float)" -> "AC_PID_2D::set_input(Vector2<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_xy_controller(float)" -> "AC_PosControl::sqrt_controller(Vector3<float> const&, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_xy_controller(float)" -> "AP::ahrs_navekf()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_xy_controller(float)" -> "AP_AHRS_NavEKF::getEkfControlLimits(float&, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_xy_controller(float)" -> "AP_InertialNav_NavEKF::get_position() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_xy_controller(float)" -> "AP_InertialNav_NavEKF::get_velocity() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n98742×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_xy_controller(float)" -> "LowPassFilter<Vector2<float> >::apply(Vector2<float>, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_xy_controller(float)" -> "LowPassFilter<Vector2<float> >::get() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n98742×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_xy_controller(float)" -> "LowPassFilter<Vector2<float> >::reset(Vector2<float>)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_xy_controller(float)" -> "LowPassFilter<Vector2<float> >::set_cutoff_frequency(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_xy_controller(float)" -> atanf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n98742×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_xy_controller(float)" -> cosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_xy_controller(float)" -> tanf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_z_controller()" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::run_z_controller()\n0.33%\n(0.06%)\n49371×"];
	"AC_PosControl::run_z_controller()" -> "AC_AttitudeControl::sqrt_controller(float, float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_z_controller()" -> "AC_AttitudeControl_Multi::set_throttle_out(float, bool, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.11%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_z_controller()" -> "AC_P::get_p(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_z_controller()" -> "AC_PID::update_all(float, float, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_z_controller()" -> "AP_AHRS_NavEKF::get_accel_ef_blended() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_z_controller()" -> "AP_InertialNav_NavEKF::get_altitude() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_z_controller()" -> "AP_InertialNav_NavEKF::get_velocity() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_z_controller()" -> "AP_MotorsMulticopter::get_throttle_hover() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n98742×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_z_controller()" -> "LowPassFilter<float>::apply(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n49370×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_z_controller()" -> "LowPassFilter<float>::reset(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::run_z_controller()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::set_alt_target_from_climb_rate_ff(float, float, bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::set_alt_target_from_climb_rate_ff(float, float, bool)\n0.00%\n(0.00%)\n3236×"];
	"AC_PosControl::set_alt_target_from_climb_rate_ff(float, float, bool)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6472×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::set_alt_target_from_climb_rate_ff(float, float, bool)" -> "float safe_sqrt<float>(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::set_dt(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::set_dt(float)\n0.00%\n(0.00%)\n1×"];
	"AC_PosControl::set_dt(float)" -> "AC_PID::set_dt(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::set_dt(float)" -> "AC_PID_2D::set_dt(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::set_dt(float)" -> "LowPassFilter<float>::set_cutoff_frequency(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::set_max_accel_xy(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::set_max_accel_xy(float)\n0.01%\n(0.01%)\n52609×"];
	"AC_PosControl::set_max_accel_xy(float)" -> "std::enable_if<std::is_floating_point<std::common_type<float, float>::type>::value, bool>::type is_equal<float, float>(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n52609×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::set_max_accel_z(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::set_max_accel_z(float)\n0.01%\n(0.01%)\n46136×"];
	"AC_PosControl::set_max_accel_z(float)" -> "std::enable_if<std::is_floating_point<std::common_type<float, float>::type>::value, bool>::type is_equal<float, float>(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n46136×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::set_max_speed_xy(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::set_max_speed_xy(float)\n0.00%\n(0.00%)\n6474×"];
	"AC_PosControl::set_max_speed_xy(float)" -> "std::enable_if<std::is_floating_point<std::common_type<float, float>::type>::value, bool>::type is_equal<float, float>(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6474×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::set_max_speed_z(float, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::set_max_speed_z(float, float)\n0.00%\n(0.00%)\n1×"];
	"AC_PosControl::set_max_speed_z(float, float)" -> "std::enable_if<std::is_floating_point<std::common_type<float, float>::type>::value, bool>::type is_equal<float, float>(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::set_pos_target(Vector3<float> const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::set_pos_target(Vector3<float> const&)\n0.00%\n(0.00%)\n46137×"];
	"AC_PosControl::set_xy_target(float, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::set_xy_target(float, float)\n0.00%\n(0.00%)\n1×"];
	"AC_PosControl::sqrt_controller(Vector3<float> const&, float, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::sqrt_controller(Vector3<float> const&, float, float)\n0.03%\n(0.02%)\n49371×"];
	"AC_PosControl::sqrt_controller(Vector3<float> const&, float, float)" -> "float safe_sqrt<float>(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n43782×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::time_since_last_xy_update() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::time_since_last_xy_update() const\n0.00%\n(0.00%)\n3236×"];
	"AC_PosControl::time_since_last_xy_update() const" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::update_xy_controller()" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::update_xy_controller()\n0.50%\n(0.03%)\n49371×"];
	"AC_PosControl::update_xy_controller()" -> "AC_PosControl::run_xy_controller(float)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.43%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::update_xy_controller()" -> "AP_AHRS_NavEKF::getLastPosNorthEastReset(Vector2<float>&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::update_xy_controller()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::update_z_controller()" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::update_z_controller()\n0.37%\n(0.02%)\n49371×"];
	"AC_PosControl::update_z_controller()" -> "AC_PID::set_integrator(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::update_z_controller()" -> "AC_PosControl::run_z_controller()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.33%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::update_z_controller()" -> "AP_AHRS_NavEKF::getLastPosDownReset(float&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::update_z_controller()" -> "AP_AHRS_NavEKF::get_accel_ef_blended() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::update_z_controller()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::update_z_controller()" -> "AP_MotorsMulticopter::get_throttle_hover() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::write_log()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PosControl::write_log()\n0.03%\n(0.00%)\n1235×"];
	"AC_PosControl::write_log()" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1235×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::write_log()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1235×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::write_log()" -> "AP_InertialNav_NavEKF::get_position() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1235×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::write_log()" -> "AP_InertialNav_NavEKF::get_velocity() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1235×", labeldistance="0.50", penwidth="0.50"];
	"AC_PosControl::write_log()" -> "AP_Logger::Write(char const*, char const*, char const*, char const*, char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n1235×", labeldistance="0.50", penwidth="0.50"];
	"AC_PrecLand::AC_PrecLand()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PrecLand::AC_PrecLand()\n0.00%\n(0.00%)\n1×"];
	"AC_PrecLand::AC_PrecLand()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PrecLand::construct_pos_meas_using_rangefinder(float, bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PrecLand::construct_pos_meas_using_rangefinder(float, bool)\n0.04%\n(0.02%)\n72070×"];
	"AC_PrecLand::construct_pos_meas_using_rangefinder(float, bool)" -> "AC_PrecLand_SITL::have_los_meas()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_PrecLand::get_target_position_measurement_cm(Vector3<float>&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PrecLand::get_target_position_measurement_cm(Vector3<float>&)\n0.00%\n(0.00%)\n4504×"];
	"AC_PrecLand::get_target_position_measurement_cm(Vector3<float>&)" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4504×", labeldistance="0.50", penwidth="0.50"];
	"AC_PrecLand::get_target_position_relative_cm(Vector2<float>&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PrecLand::get_target_position_relative_cm(Vector2<float>&)\n0.00%\n(0.00%)\n4504×"];
	"AC_PrecLand::get_target_velocity_relative_cms(Vector2<float>&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PrecLand::get_target_velocity_relative_cms(Vector2<float>&)\n0.00%\n(0.00%)\n4504×"];
	"AC_PrecLand::init(unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PrecLand::init(unsigned short)\n0.00%\n(0.00%)\n1×"];
	"AC_PrecLand::init(unsigned short)" -> "AC_PrecLand_SITL::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PrecLand::init(unsigned short)" -> "AP::scheduler()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PrecLand::init(unsigned short)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PrecLand::init(unsigned short)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PrecLand::init(unsigned short)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_PrecLand::init(unsigned short)" -> "operator new[](unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PrecLand::run_estimator(float, bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PrecLand::run_estimator(float, bool)\n0.07%\n(0.03%)\n72070×"];
	"AC_PrecLand::run_estimator(float, bool)" -> "AC_PrecLand::construct_pos_meas_using_rangefinder(float, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_PrecLand::target_acquired()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PrecLand::target_acquired()\n0.00%\n(0.00%)\n10976×"];
	"AC_PrecLand::update(float, bool)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PrecLand::update(float, bool)\n0.67%\n(0.10%)\n72070×"];
	"AC_PrecLand::update(float, bool)" -> "AC_PrecLand::run_estimator(float, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_PrecLand::update(float, bool)" -> "AC_PrecLand_SITL::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_PrecLand::update(float, bool)" -> "AP::ahrs_navekf()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_PrecLand::update(float, bool)" -> "AP_AHRS_NavEKF::getCorrectedDeltaVelocityNED(Vector3<float>&, float&) const" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.26%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_PrecLand::update(float, bool)" -> "AP_AHRS_NavEKF::get_filter_status(nav_filter_status&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n72023×", labeldistance="0.50", penwidth="0.50"];
	"AC_PrecLand::update(float, bool)" -> "AP_AHRS_NavEKF::get_rotation_body_to_ned() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_PrecLand::update(float, bool)" -> "AP_AHRS_NavEKF::get_velocity_NED(Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.11%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_PrecLand::update(float, bool)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_PrecLand_SITL::have_los_meas()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PrecLand_SITL::have_los_meas()\n0.02%\n(0.01%)\n72070×"];
	"AC_PrecLand_SITL::have_los_meas()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AC_PrecLand_SITL::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PrecLand_SITL::init()\n0.00%\n(0.00%)\n1×"];
	"AC_PrecLand_SITL::init()" -> "AP::sitl()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_PrecLand_SITL::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_PrecLand_SITL::update()\n0.01%\n(0.01%)\n72070×"];
	"AC_Sprayer::AC_Sprayer()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Sprayer::AC_Sprayer()\n0.00%\n(0.00%)\n1×"];
	"AC_Sprayer::AC_Sprayer()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_Sprayer::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_Sprayer::update()\n0.00%\n(0.00%)\n542×"];
	"AC_WPNav::AC_WPNav(AP_InertialNav const&, AP_AHRS_View const&, AC_PosControl&, AC_AttitudeControl const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_WPNav::AC_WPNav(AP_InertialNav const&, AP_AHRS_View const&, AC_PosControl&, AC_AttitudeControl const&)\n0.00%\n(0.00%)\n1×"];
	"AC_WPNav::AC_WPNav(AP_InertialNav const&, AP_AHRS_View const&, AC_PosControl&, AC_AttitudeControl const&)" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::AC_WPNav(AP_InertialNav const&, AP_AHRS_View const&, AC_PosControl&, AC_AttitudeControl const&)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::advance_wp_target_along_track(float)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_WPNav::advance_wp_target_along_track(float)\n0.20%\n(0.10%)\n46135×"];
	"AC_WPNav::advance_wp_target_along_track(float)" -> "AC_PosControl::set_pos_target(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n46135×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::advance_wp_target_along_track(float)" -> "AP_InertialNav_NavEKF::get_position() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n46135×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::advance_wp_target_along_track(float)" -> "AP_InertialNav_NavEKF::get_velocity() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n46135×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::advance_wp_target_along_track(float)" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n46583×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::advance_wp_target_along_track(float)" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n92270×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::advance_wp_target_along_track(float)" -> "Vector3<float>::operator+(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n46135×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::advance_wp_target_along_track(float)" -> "Vector3<float>::operator-(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n185684×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::advance_wp_target_along_track(float)" -> atan2f [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n42888×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::advance_wp_target_along_track(float)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n93972×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::advance_wp_target_along_track(float)" -> "float safe_sqrt<float>(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n47084×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::calculate_wp_leash_length()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_WPNav::calculate_wp_leash_length()\n0.00%\n(0.00%)\n2×"];
	"AC_WPNav::get_wp_bearing_to_destination() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_WPNav::get_wp_bearing_to_destination() const\n0.00%\n(0.00%)\n494×"];
	"AC_WPNav::get_wp_bearing_to_destination() const" -> "AP_InertialNav_NavEKF::get_position() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n494×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::get_wp_bearing_to_destination() const" -> "get_bearing_cd(Vector3<float> const&, Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n494×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::get_wp_destination(Location&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_WPNav::get_wp_destination(Location&) const\n0.00%\n(0.00%)\n462×"];
	"AC_WPNav::get_wp_destination(Location&) const" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n462×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::get_wp_destination(Location&) const" -> "AP_AHRS_NavEKF::get_origin(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n462×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::get_wp_destination(Location&) const" -> "Location::offset(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n462×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::get_wp_distance_to_destination() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_WPNav::get_wp_distance_to_destination() const\n0.00%\n(0.00%)\n494×"];
	"AC_WPNav::get_wp_distance_to_destination() const" -> "AP_InertialNav_NavEKF::get_position() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n494×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::set_wp_destination(Location const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_WPNav::set_wp_destination(Location const&)\n0.00%\n(0.00%)\n2×"];
	"AC_WPNav::set_wp_destination(Location const&)" -> "AC_PosControl::get_stopping_point_xy(Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::set_wp_destination(Location const&)" -> "AC_PosControl::get_stopping_point_z(Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::set_wp_destination(Location const&)" -> "AC_WPNav_OA::set_wp_origin_and_destination(Vector3<float> const&, Vector3<float> const&, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::set_wp_destination(Location const&)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::set_wp_destination(Location const&)" -> "Location::get_alt_cm(Location::AltFrame, int&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::set_wp_destination(Location const&)" -> "Location::get_alt_frame() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::set_wp_destination(Location const&)" -> "Location::get_vector_xy_from_origin_NE(Vector2<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::set_wp_origin_and_destination(Vector3<float> const&, Vector3<float> const&, bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_WPNav::set_wp_origin_and_destination(Vector3<float> const&, Vector3<float> const&, bool)\n0.00%\n(0.00%)\n2×"];
	"AC_WPNav::set_wp_origin_and_destination(Vector3<float> const&, Vector3<float> const&, bool)" -> "AC_PosControl::set_pos_target(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::set_wp_origin_and_destination(Vector3<float> const&, Vector3<float> const&, bool)" -> "AC_WPNav::calculate_wp_leash_length()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::set_wp_origin_and_destination(Vector3<float> const&, Vector3<float> const&, bool)" -> "AP_InertialNav_NavEKF::get_velocity() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::set_wp_origin_and_destination(Vector3<float> const&, Vector3<float> const&, bool)" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::set_wp_origin_and_destination(Vector3<float> const&, Vector3<float> const&, bool)" -> "Vector3<float>::operator+(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::set_wp_origin_and_destination(Vector3<float> const&, Vector3<float> const&, bool)" -> "Vector3<float>::operator-(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::set_wp_origin_and_destination(Vector3<float> const&, Vector3<float> const&, bool)" -> "Vector3<float>::operator/(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::set_wp_origin_and_destination(Vector3<float> const&, Vector3<float> const&, bool)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::set_wp_origin_and_destination(Vector3<float> const&, Vector3<float> const&, bool)" -> "float safe_sqrt<float>(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::update_wpnav()" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_WPNav::update_wpnav()\n0.71%\n(0.02%)\n46135×"];
	"AC_WPNav::update_wpnav()" -> "AC_PosControl::set_max_accel_xy(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n46135×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::update_wpnav()" -> "AC_PosControl::set_max_accel_z(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n46135×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::update_wpnav()" -> "AC_PosControl::update_xy_controller()" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.47%\n46135×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::update_wpnav()" -> "AC_WPNav::advance_wp_target_along_track(float)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.20%\n46135×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::update_wpnav()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n46135×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::update_wpnav()" -> "std::enable_if<std::is_floating_point<std::common_type<float, float>::type>::value, bool>::type is_equal<float, float>(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n46135×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::wp_and_spline_init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_WPNav::wp_and_spline_init()\n0.00%\n(0.00%)\n1×"];
	"AC_WPNav::wp_and_spline_init()" -> "AC_PosControl::calc_leash_length_xy()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::wp_and_spline_init()" -> "AC_PosControl::calc_leash_length_z()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::wp_and_spline_init()" -> "AC_PosControl::init_xy_controller()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::wp_and_spline_init()" -> "AC_PosControl::set_max_accel_xy(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::wp_and_spline_init()" -> "AC_PosControl::set_max_accel_z(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::wp_and_spline_init()" -> "AC_PosControl::set_max_speed_xy(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav::wp_and_spline_init()" -> "AC_PosControl::set_max_speed_z(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav_OA::AC_WPNav_OA(AP_InertialNav const&, AP_AHRS_View const&, AC_PosControl&, AC_AttitudeControl const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_WPNav_OA::AC_WPNav_OA(AP_InertialNav const&, AP_AHRS_View const&, AC_PosControl&, AC_AttitudeControl const&)\n0.00%\n(0.00%)\n1×"];
	"AC_WPNav_OA::AC_WPNav_OA(AP_InertialNav const&, AP_AHRS_View const&, AC_PosControl&, AC_AttitudeControl const&)" -> "AC_WPNav::AC_WPNav(AP_InertialNav const&, AP_AHRS_View const&, AC_PosControl&, AC_AttitudeControl const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav_OA::AC_WPNav_OA(AP_InertialNav const&, AP_AHRS_View const&, AC_PosControl&, AC_AttitudeControl const&)" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav_OA::get_oa_wp_destination(Location&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_WPNav_OA::get_oa_wp_destination(Location&) const\n0.00%\n(0.00%)\n462×"];
	"AC_WPNav_OA::get_oa_wp_destination(Location&) const" -> "AC_WPNav::get_wp_destination(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n462×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav_OA::get_wp_bearing_to_destination() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_WPNav_OA::get_wp_bearing_to_destination() const\n0.00%\n(0.00%)\n494×"];
	"AC_WPNav_OA::get_wp_bearing_to_destination() const" -> "AC_WPNav::get_wp_bearing_to_destination() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n494×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav_OA::get_wp_distance_to_destination() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_WPNav_OA::get_wp_distance_to_destination() const\n0.00%\n(0.00%)\n494×"];
	"AC_WPNav_OA::get_wp_distance_to_destination() const" -> "AC_WPNav::get_wp_distance_to_destination() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n494×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav_OA::reached_wp_destination() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_WPNav_OA::reached_wp_destination() const\n0.00%\n(0.00%)\n44133×"];
	"AC_WPNav_OA::set_wp_origin_and_destination(Vector3<float> const&, Vector3<float> const&, bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_WPNav_OA::set_wp_origin_and_destination(Vector3<float> const&, Vector3<float> const&, bool)\n0.00%\n(0.00%)\n2×"];
	"AC_WPNav_OA::set_wp_origin_and_destination(Vector3<float> const&, Vector3<float> const&, bool)" -> "AC_WPNav::set_wp_origin_and_destination(Vector3<float> const&, Vector3<float> const&, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav_OA::update_wpnav()" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAC_WPNav_OA::update_wpnav()\n0.99%\n(0.03%)\n46135×"];
	"AC_WPNav_OA::update_wpnav()" -> "AC_WPNav::update_wpnav()" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.71%\n46135×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav_OA::update_wpnav()" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n46135×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav_OA::update_wpnav()" -> "AP_AHRS_NavEKF::get_position(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n46135×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav_OA::update_wpnav()" -> "AP_OAPathPlanner::mission_avoidance(Location const&, Location const&, Location const&, Location&, Location&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n46135×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav_OA::update_wpnav()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n138405×", labeldistance="0.50", penwidth="0.50"];
	"AC_WPNav_OA::update_wpnav()" -> "Location::Location(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n92270×", labeldistance="0.50", penwidth="0.50"];
	"AP::FS()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::FS()\n0.00%\n(0.00%)\n899×"];
	"AP::PerfInfo::check_loop_time(unsigned int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::PerfInfo::check_loop_time(unsigned int)\n0.04%\n(0.03%)\n72069×"];
	"AP::PerfInfo::check_loop_time(unsigned int)" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72068×", labeldistance="0.50", penwidth="0.50"];
	"AP::PerfInfo::get_max_time() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::PerfInfo::get_max_time() const\n0.00%\n(0.00%)\n18×"];
	"AP::PerfInfo::get_num_long_running() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::PerfInfo::get_num_long_running() const\n0.00%\n(0.00%)\n18×"];
	"AP::PerfInfo::get_num_loops() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::PerfInfo::get_num_loops() const\n0.00%\n(0.00%)\n18×"];
	"AP::PerfInfo::ignore_this_loop()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::PerfInfo::ignore_this_loop()\n0.00%\n(0.00%)\n1×"];
	"AP::PerfInfo::reset()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::PerfInfo::reset()\n0.00%\n(0.00%)\n19×"];
	"AP::PerfInfo::set_loop_rate(unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::PerfInfo::set_loop_rate(unsigned short)\n0.00%\n(0.00%)\n19×"];
	"AP::RC()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::RC()\n0.01%\n(0.01%)\n326291×"];
	"AP::RC()" -> "__cxa_atexit" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP::RC()" -> "__cxa_guard_acquire" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP::RC()" -> "__cxa_guard_release" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP::ac_avoid()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::ac_avoid()\n0.00%\n(0.00%)\n3236×"];
	"AP::ahrs()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::ahrs()\n0.04%\n(0.04%)\n1949019×"];
	"AP::ahrs_navekf()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::ahrs_navekf()\n0.00%\n(0.00%)\n127868×"];
	"AP::arming()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::arming()\n0.00%\n(0.00%)\n723×"];
	"AP::baro()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::baro()\n0.00%\n(0.00%)\n46280×"];
	"AP::battery()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::battery()\n0.00%\n(0.00%)\n146942×"];
	"AP::beacon()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::beacon()\n0.00%\n(0.00%)\n37474×"];
	"AP::compass()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::compass()\n0.00%\n(0.00%)\n50686×"];
	"AP::fence()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::fence()\n0.00%\n(0.00%)\n14394×"];
	"AP::fft()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::fft()\n0.00%\n(0.00%)\n7×"];
	"AP::frsky_telem()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::frsky_telem()\n0.00%\n(0.00%)\n21×"];
	"AP::fwversion()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::fwversion()\n0.00%\n(0.00%)\n3×"];
	"AP::gps()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::gps()\n0.01%\n(0.01%)\n430850×"];
	"AP::ins()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::ins()\n0.05%\n(0.05%)\n1240537×"];
	"AP::internalerror()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::internalerror()\n0.00%\n(0.00%)\n1639×"];
	"AP::logger()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::logger()\n0.00%\n(0.00%)\n254325×"];
	"AP::mission()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::mission()\n0.00%\n(0.00%)\n723×"];
	"AP::mount()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::mount()\n0.00%\n(0.00%)\n1442×"];
	"AP::notify()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::notify()\n0.00%\n(0.00%)\n11×"];
	"AP::opticalflow()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::opticalflow()\n0.00%\n(0.00%)\n1442×"];
	"AP::proximity()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::proximity()\n0.00%\n(0.00%)\n3243×"];
	"AP::rally()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::rally()\n0.00%\n(0.00%)\n1804×"];
	"AP::rangefinder()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::rangefinder()\n0.00%\n(0.00%)\n64756×"];
	"AP::rcmap()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::rcmap()\n0.00%\n(0.00%)\n1×"];
	"AP::rpm()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::rpm()\n0.00%\n(0.00%)\n721×"];
	"AP::rssi()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::rssi()\n0.00%\n(0.00%)\n721×"];
	"AP::rtc()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::rtc()\n0.00%\n(0.00%)\n9725×"];
	"AP::runcam()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::runcam()\n0.00%\n(0.00%)\n7×"];
	"AP::scheduler()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::scheduler()\n0.00%\n(0.00%)\n257487×"];
	"AP::serialmanager()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::serialmanager()\n0.00%\n(0.00%)\n72195×"];
	"AP::sitl()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::sitl()\n0.07%\n(0.07%)\n3994523×"];
	"AP::vehicle()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::vehicle()\n0.00%\n(0.00%)\n139181×"];
	"AP::visualodom()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP::visualodom()\n0.00%\n(0.00%)\n728×"];
	"AP_ADSB::AP_ADSB()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_ADSB::AP_ADSB()\n0.00%\n(0.00%)\n1×"];
	"AP_ADSB::AP_ADSB()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_ADSB::AP_ADSB()" -> "ByteBuffer::ByteBuffer(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_ADSB::AP_ADSB()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_ADSB::AP_ADSB()" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_ADSB::send_adsb_vehicle(mavlink_channel_t)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_ADSB::send_adsb_vehicle(mavlink_channel_t)\n0.00%\n(0.00%)\n721×"];
	"AP_ADSB::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_ADSB::update()\n0.00%\n(0.00%)\n1802×"];
	"AP_ADSB::update()" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_ADSB::update()" -> "AP_AHRS_NavEKF::get_position(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_ADSB::update()" -> "Location::zero()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::Log_Write_Home_And_Origin()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS::Log_Write_Home_And_Origin()\n0.00%\n(0.00%)\n2×"];
	"AP_AHRS::Log_Write_Home_And_Origin()" -> "AP_AHRS_NavEKF::get_origin(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::Log_Write_Home_And_Origin()" -> "AP_Logger::Write_Origin(unsigned char, Location const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::Log_Write_Home_And_Origin()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::calc_trig(Matrix3<float> const&, float&, float&, float&, float&, float&, float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS::calc_trig(Matrix3<float> const&, float&, float&, float&, float&, float&, float&) const\n0.13%\n(0.08%)\n72071×"];
	"AP_AHRS::calc_trig(Matrix3<float> const&, float&, float&, float&, float&, float&, float&) const" -> "Vector2<float>::is_inf() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72071×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::calc_trig(Matrix3<float> const&, float&, float&, float&, float&, float&, float&) const" -> "Vector2<float>::is_nan() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72071×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::calc_trig(Matrix3<float> const&, float&, float&, float&, float&, float&, float&) const" -> "Vector2<float>::normalize()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::calc_trig(Matrix3<float> const&, float&, float&, float&, float&, float&, float&) const" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n288284×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::calc_trig(Matrix3<float> const&, float&, float&, float&, float&, float&, float&) const" -> "float safe_sqrt<float>(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72071×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::create_view(Rotation, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS::create_view(Rotation, float)\n0.00%\n(0.00%)\n1×"];
	"AP_AHRS::create_view(Rotation, float)" -> "AP_AHRS_View::AP_AHRS_View(AP_AHRS&, Rotation, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::create_view(Rotation, float)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::get_gyro_latest() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS::get_gyro_latest() const\n0.12%\n(0.02%)\n72070×"];
	"AP_AHRS::get_gyro_latest() const" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::get_gyro_latest() const" -> "AP_AHRS_NavEKF::get_gyro_drift() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::get_gyro_latest() const" -> "AP_AHRS_NavEKF::get_primary_gyro_index() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::get_gyro_latest() const" -> "Vector3<float>::operator+(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::groundspeed_vector()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS::groundspeed_vector()\n0.00%\n(0.00%)\n6×"];
	"AP_AHRS::groundspeed_vector()" -> "AP::gps()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n16×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::groundspeed_vector()" -> "AP_AHRS_NavEKF::airspeed_estimate(float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::groundspeed_vector()" -> "Vector2<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::groundspeed_vector()" -> sincosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS::init()\n0.00%\n(0.00%)\n1×"];
	"AP_AHRS::init()" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::init()" -> "AP_NMEA_Output::probe()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::update_AOA_SSA()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS::update_AOA_SSA()\n0.00%\n(0.00%)\n72070×"];
	"AP_AHRS::update_cd_values()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS::update_cd_values()\n0.04%\n(0.04%)\n215611×"];
	"AP_AHRS::update_nmea_out()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS::update_nmea_out()\n0.00%\n(0.00%)\n72070×"];
	"AP_AHRS::update_orientation()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS::update_orientation()\n0.00%\n(0.00%)\n7×"];
	"AP_AHRS::update_orientation()" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::update_trig()" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS::update_trig()\n0.48%\n(0.15%)\n143541×"];
	"AP_AHRS::update_trig()" -> "AP_AHRS_NavEKF::get_rotation_body_to_ned() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.16%\n143541×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::update_trig()" -> "Vector2<float>::is_inf() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n143541×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::update_trig()" -> "Vector2<float>::is_nan() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n143541×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::update_trig()" -> "Vector2<float>::normalize()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n143541×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::update_trig()" -> "Vector3<float>::operator!=(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n143541×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::update_trig()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n574164×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS::update_trig()" -> "float safe_sqrt<float>(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n143541×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::airspeed_estimate(float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_DCM::airspeed_estimate(float&) const\n0.00%\n(0.00%)\n6×"];
	"AP_AHRS_DCM::check_matrix()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_DCM::check_matrix()\n0.04%\n(0.02%)\n72070×"];
	"AP_AHRS_DCM::check_matrix()" -> "Vector3<float>::is_nan() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n216210×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_DCM::drift_correction(float)\n0.40%\n(0.15%)\n72070×"];
	"AP_AHRS_DCM::drift_correction(float)" -> "AP::gps()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n145941×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "AP_AHRS_DCM::drift_correction_yaw()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "AP_AHRS_DCM::use_compass()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n900×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "AP_AHRS_NavEKF::get_rotation_body_to_ned() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n901×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n30×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "AP_InertialSensor::get_delta_velocity(unsigned char, Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n144140×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "AP_InertialSensor::get_delta_velocity_dt(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n144140×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "AP_InertialSensor::use_accel(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n288280×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "Matrix3<float>::mul_transpose(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1801×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "Matrix3<float>::operator*(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n144140×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "Vector3<float>::is_inf() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3570×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "Vector3<float>::is_nan() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n900×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5370×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "Vector3<float>::operator%(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1800×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "Vector3<float>::operator*(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1800×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n292736×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "Vector3<float>::operator*=(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1830×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "Vector3<float>::operator+(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "Vector3<float>::operator+=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n145937×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "Vector3<float>::operator-(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1771×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "Vector3<float>::operator/(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n144140×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "Vector3<float>::operator/=(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2670×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72172×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> sinf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n900×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction(float)" -> "std::enable_if<std::is_floating_point<std::common_type<float, float>::type>::value, bool>::type is_equal<float, float>(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n900×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction_yaw()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_DCM::drift_correction_yaw()\n0.08%\n(0.03%)\n72070×"];
	"AP_AHRS_DCM::drift_correction_yaw()" -> "AP::gps()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction_yaw()" -> "AP_AHRS_DCM::use_compass()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction_yaw()" -> "AP_AHRS_DCM::yaw_error_compass()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1804×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction_yaw()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n64×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction_yaw()" -> "Compass::_get_state_id(typesafe_index<unsigned char, TAG_Priority>) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n75678×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction_yaw()" -> "Compass::calculate_heading(Matrix3<float> const&, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction_yaw()" -> "Compass::is_calibrating() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction_yaw()" -> "Compass::read()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction_yaw()" -> "Matrix3<float>::from_euler(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction_yaw()" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1804×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::drift_correction_yaw()" -> "Vector3<float>::operator*=(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n70266×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::get_position(Location&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_DCM::get_position(Location&) const\n0.01%\n(0.00%)\n6806×"];
	"AP_AHRS_DCM::get_position(Location&) const" -> "AP::baro()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6806×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::get_position(Location&) const" -> "AP::gps()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6806×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::get_position(Location&) const" -> "Location::offset(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6806×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::get_velocity_NED(Vector3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_DCM::get_velocity_NED(Vector3<float>&) const\n0.00%\n(0.00%)\n1210×"];
	"AP_AHRS_DCM::get_velocity_NED(Vector3<float>&) const" -> "AP::gps()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1210×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::matrix_update(float)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_DCM::matrix_update(float)\n0.26%\n(0.08%)\n72070×"];
	"AP_AHRS_DCM::matrix_update(float)" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::matrix_update(float)" -> "AP_InertialSensor::get_delta_angle(unsigned char, Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n144140×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::matrix_update(float)" -> "AP_InertialSensor::use_gyro(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n144140×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::matrix_update(float)" -> "Matrix3<float>::rotate(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.09%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::matrix_update(float)" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::matrix_update(float)" -> "Vector3<float>::operator+(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n144140×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::matrix_update(float)" -> "Vector3<float>::operator+=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n216210×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::matrix_update(float)" -> "Vector3<float>::operator/(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::matrix_update(float)" -> "Vector3<float>::operator/=(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::normalize()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_DCM::normalize()\n0.16%\n(0.07%)\n72070×"];
	"AP_AHRS_DCM::normalize()" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n216210×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::normalize()" -> "Vector3<float>::operator%(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::normalize()" -> "Vector3<float>::operator*(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::normalize()" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n360350×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::normalize()" -> "Vector3<float>::operator-(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n144140×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::reset(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_DCM::reset(bool)\n0.00%\n(0.00%)\n1×"];
	"AP_AHRS_DCM::reset(bool)" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::reset(bool)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::reset(bool)" -> "HALSITL::Util::was_watchdog_reset() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::reset(bool)" -> "Matrix3<float>::from_euler(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::reset(bool)" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::reset(bool)" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::reset(bool)" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::reset(bool)" -> atan2f [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::set_home(Location const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_DCM::set_home(Location const&)\n0.00%\n(0.00%)\n1×"];
	"AP_AHRS_DCM::set_home(Location const&)" -> "AP_AHRS::Log_Write_Home_And_Origin()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::set_home(Location const&)" -> "GCS::send_message(ap_message)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::set_home(Location const&)" -> "Location::change_alt_frame(Location::AltFrame)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::set_home(Location const&)" -> "Location::check_latlng() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::set_home(Location const&)" -> "gcs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::update(bool)" [color="#0d1375", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_DCM::update(bool)\n1.55%\n(0.05%)\n72070×"];
	"AP_AHRS_DCM::update(bool)" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::update(bool)" -> "AP_AHRS::update_AOA_SSA()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::update(bool)" -> "AP_AHRS::update_cd_values()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::update(bool)" -> "AP_AHRS::update_trig()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.24%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::update(bool)" -> "AP_AHRS_DCM::check_matrix()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::update(bool)" -> "AP_AHRS_DCM::drift_correction(float)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.40%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::update(bool)" -> "AP_AHRS_DCM::matrix_update(float)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.26%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::update(bool)" -> "AP_AHRS_DCM::normalize()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.16%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::update(bool)" -> "Matrix3<float>::operator*(Matrix3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::update(bool)" -> "Matrix3<float>::to_euler(float*, float*, float*) const" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.22%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::update(bool)" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::update(bool)" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::use_compass()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_DCM::use_compass()\n0.03%\n(0.01%)\n72976×"];
	"AP_AHRS_DCM::use_compass()" -> "Compass::use_for_yaw() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72976×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::yaw_error_compass()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_DCM::yaw_error_compass()\n0.00%\n(0.00%)\n1804×"];
	"AP_AHRS_DCM::yaw_error_compass()" -> "Compass::_get_state_id(typesafe_index<unsigned char, TAG_Priority>) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1804×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::yaw_error_compass()" -> "Compass::get_declination() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1805×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::yaw_error_compass()" -> "Matrix3<float>::mulXY(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1804×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::yaw_error_compass()" -> "Vector2<float>::is_inf() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1804×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::yaw_error_compass()" -> "Vector2<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1804×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::yaw_error_compass()" -> "Vector2<float>::normalize()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1804×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::yaw_error_compass()" -> "Vector2<float>::operator%(Vector2<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1804×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::yaw_error_compass()" -> sincosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_DCM::yaw_error_compass()" -> "std::enable_if<std::is_floating_point<std::common_type<float, float>::type>::value, bool>::type is_equal<float, float>(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1804×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::AP_AHRS_NavEKF(unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::AP_AHRS_NavEKF(unsigned char)\n0.00%\n(0.00%)\n1×"];
	"AP_AHRS_NavEKF::AP_AHRS_NavEKF(unsigned char)" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::AP_AHRS_NavEKF(unsigned char)" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::AP_AHRS_NavEKF(unsigned char)" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::AP_AHRS_NavEKF(unsigned char)" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::AP_AHRS_NavEKF(unsigned char)" -> "Matrix3<float>::from_euler(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::AP_AHRS_NavEKF(unsigned char)" -> "Matrix3<float>::transposed() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::AP_AHRS_NavEKF(unsigned char)" -> "NavEKF2::NavEKF2()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::AP_AHRS_NavEKF(unsigned char)" -> "NavEKF3::NavEKF3()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::Log_Write()" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::Log_Write()\n0.19%\n(0.00%)\n1740×"];
	"AP_AHRS_NavEKF::Log_Write()" -> "NavEKF2::Log_Write()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.19%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::Log_Write()" -> "NavEKF3::Log_Write()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::active_EKF_type() const" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::active_EKF_type() const\n0.24%\n(0.09%)\n215618×"];
	"AP_AHRS_NavEKF::active_EKF_type() const" -> "NavEKF2::getFilterFaults(signed char, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.16%\n214419×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::airspeed_estimate(float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::airspeed_estimate(float&) const\n0.00%\n(0.00%)\n6×"];
	"AP_AHRS_NavEKF::airspeed_estimate(float&) const" -> "AP_AHRS_DCM::airspeed_estimate(float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::attitudes_consistent(char*, unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::attitudes_consistent(char*, unsigned char) const\n0.00%\n(0.00%)\n7×"];
	"AP_AHRS_NavEKF::attitudes_consistent(char*, unsigned char) const" -> "AP_AHRS_NavEKF::active_EKF_type() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::attitudes_consistent(char*, unsigned char) const" -> "Compass::use_for_yaw() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::attitudes_consistent(char*, unsigned char) const" -> "NavEKF2::getQuaternionBodyToNED(signed char, Quaternion&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n12×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::attitudes_consistent(char*, unsigned char) const" -> "Quaternion::angular_difference(Quaternion const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n19×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::attitudes_consistent(char*, unsigned char) const" -> "Quaternion::from_rotation_matrix(Matrix3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::attitudes_consistent(char*, unsigned char) const" -> "Quaternion::to_axis_angle(Vector3<float>&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n19×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::attitudes_consistent(char*, unsigned char) const" -> "float safe_sqrt<float>(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n19×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::check_lane_switch()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::check_lane_switch()\n0.00%\n(0.00%)\n1×"];
	"AP_AHRS_NavEKF::check_lane_switch()" -> "NavEKF2::checkLaneSwitch()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::check_lane_switch()" -> "NavEKF2::getFilterFaults(signed char, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::getCorrectedDeltaVelocityNED(Vector3<float>&, float&) const" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::getCorrectedDeltaVelocityNED(Vector3<float>&, float&) const\n0.26%\n(0.05%)\n72070×"];
	"AP_AHRS_NavEKF::getCorrectedDeltaVelocityNED(Vector3<float>&, float&) const" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::getCorrectedDeltaVelocityNED(Vector3<float>&, float&) const" -> "AP_AHRS_NavEKF::active_EKF_type() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::getCorrectedDeltaVelocityNED(Vector3<float>&, float&) const" -> "AP_InertialSensor::get_delta_velocity(unsigned char, Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::getCorrectedDeltaVelocityNED(Vector3<float>&, float&) const" -> "AP_InertialSensor::get_delta_velocity_dt(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::getCorrectedDeltaVelocityNED(Vector3<float>&, float&) const" -> "Matrix3<float>::operator*(Matrix3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::getCorrectedDeltaVelocityNED(Vector3<float>&, float&) const" -> "Matrix3<float>::operator*(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::getCorrectedDeltaVelocityNED(Vector3<float>&, float&) const" -> "NavEKF2::getAccelZBias(signed char, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::getCorrectedDeltaVelocityNED(Vector3<float>&, float&) const" -> "NavEKF2::getPrimaryCoreIMUIndex() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::getCorrectedDeltaVelocityNED(Vector3<float>&, float&) const" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::getCorrectedDeltaVelocityNED(Vector3<float>&, float&) const" -> "Vector3<float>::operator-=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::getEkfControlLimits(float&, float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::getEkfControlLimits(float&, float&) const\n0.01%\n(0.01%)\n52607×"];
	"AP_AHRS_NavEKF::getEkfControlLimits(float&, float&) const" -> "NavEKF2::getEkfControlLimits(float&, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n52607×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::getLastPosDownReset(float&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::getLastPosDownReset(float&)\n0.02%\n(0.00%)\n49371×"];
	"AP_AHRS_NavEKF::getLastPosDownReset(float&)" -> "NavEKF2::getLastPosDownReset(float&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::getLastPosNorthEastReset(Vector2<float>&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::getLastPosNorthEastReset(Vector2<float>&)\n0.03%\n(0.00%)\n49372×"];
	"AP_AHRS_NavEKF::getLastPosNorthEastReset(Vector2<float>&)" -> "NavEKF2::getLastPosNorthEastReset(Vector2<float>&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n49372×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::getLastYawResetAngle(float&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::getLastYawResetAngle(float&)\n0.07%\n(0.01%)\n72070×"];
	"AP_AHRS_NavEKF::getLastYawResetAngle(float&)" -> "NavEKF2::getLastYawResetAngle(float&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_accel_ef_blended() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::get_accel_ef_blended() const\n0.14%\n(0.05%)\n123182×"];
	"AP_AHRS_NavEKF::get_accel_ef_blended() const" -> "NavEKF2::getFilterFaults(signed char, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.09%\n122583×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_error_rp() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::get_error_rp() const\n0.00%\n(0.00%)\n2461×"];
	"AP_AHRS_NavEKF::get_error_yaw() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::get_error_yaw() const\n0.00%\n(0.00%)\n2461×"];
	"AP_AHRS_NavEKF::get_filter_status(nav_filter_status&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::get_filter_status(nav_filter_status&) const\n0.05%\n(0.03%)\n162323×"];
	"AP_AHRS_NavEKF::get_filter_status(nav_filter_status&) const" -> "NavEKF2::getFilterStatus(signed char, nav_filter_status&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n162323×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_gyro() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::get_gyro() const\n0.08%\n(0.03%)\n73513×"];
	"AP_AHRS_NavEKF::get_gyro() const" -> "NavEKF2::getFilterFaults(signed char, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n72901×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_gyro_drift() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::get_gyro_drift() const\n0.08%\n(0.03%)\n72791×"];
	"AP_AHRS_NavEKF::get_gyro_drift() const" -> "NavEKF2::getFilterFaults(signed char, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n72185×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_innovations(Vector3<float>&, Vector3<float>&, Vector3<float>&, float&, float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::get_innovations(Vector3<float>&, Vector3<float>&, Vector3<float>&, float&, float&) const\n0.00%\n(0.00%)\n1802×"];
	"AP_AHRS_NavEKF::get_innovations(Vector3<float>&, Vector3<float>&, Vector3<float>&, float&, float&) const" -> "NavEKF2::getInnovations(signed char, Vector3<float>&, Vector3<float>&, Vector3<float>&, float&, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_location(Location&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::get_location(Location&) const\n0.00%\n(0.00%)\n4443×"];
	"AP_AHRS_NavEKF::get_location(Location&) const" -> "NavEKF2::getLLH(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4443×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_origin(Location&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::get_origin(Location&) const\n0.06%\n(0.02%)\n162285×"];
	"AP_AHRS_NavEKF::get_origin(Location&) const" -> "NavEKF2::getOriginLLH(signed char, Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n162285×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_position(Location&) const" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::get_position(Location&) const\n0.33%\n(0.07%)\n130326×"];
	"AP_AHRS_NavEKF::get_position(Location&) const" -> "AP_AHRS_DCM::get_position(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5066×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_position(Location&) const" -> "NavEKF2::getFilterFaults(signed char, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.09%\n129658×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_position(Location&) const" -> "NavEKF2::getLLH(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.16%\n129658×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_primary_gyro_index() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::get_primary_gyro_index() const\n0.01%\n(0.01%)\n72070×"];
	"AP_AHRS_NavEKF::get_primary_gyro_index() const" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n401×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_primary_gyro_index() const" -> "NavEKF2::getPrimaryCoreIMUIndex() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_relative_position_D_home(float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::get_relative_position_D_home(float&) const\n0.01%\n(0.01%)\n6176×"];
	"AP_AHRS_NavEKF::get_relative_position_D_home(float&) const" -> "AP::baro()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n258×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_relative_position_D_home(float&) const" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6176×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_relative_position_D_home(float&) const" -> "NavEKF2::getFilterFaults(signed char, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6157×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_relative_position_D_home(float&) const" -> "NavEKF2::getOriginLLH(signed char, Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6141×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_relative_position_D_home(float&) const" -> "NavEKF2::getPosD(signed char, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6157×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_relative_position_D_origin(float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::get_relative_position_D_origin(float&) const\n0.11%\n(0.04%)\n73810×"];
	"AP_AHRS_NavEKF::get_relative_position_D_origin(float&) const" -> "NavEKF2::getFilterFaults(signed char, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n73211×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_relative_position_D_origin(float&) const" -> "NavEKF2::getPosD(signed char, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n73211×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_relative_position_NED_home(Vector3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::get_relative_position_NED_home(Vector3<float>&) const\n0.00%\n(0.00%)\n721×"];
	"AP_AHRS_NavEKF::get_relative_position_NED_home(Vector3<float>&) const" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_relative_position_NED_home(Vector3<float>&) const" -> "Location::get_distance_NED(Location const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n551×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_relative_position_NED_home(Vector3<float>&) const" -> "NavEKF2::getFilterFaults(signed char, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n715×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_relative_position_NED_home(Vector3<float>&) const" -> "NavEKF2::getOriginLLH(signed char, Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n551×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_relative_position_NED_home(Vector3<float>&) const" -> "NavEKF2::getPosD(signed char, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n551×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_relative_position_NED_home(Vector3<float>&) const" -> "NavEKF2::getPosNE(signed char, Vector2<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n715×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_relative_position_NED_origin(Vector3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::get_relative_position_NED_origin(Vector3<float>&) const\n0.00%\n(0.00%)\n415×"];
	"AP_AHRS_NavEKF::get_relative_position_NED_origin(Vector3<float>&) const" -> "NavEKF2::getFilterFaults(signed char, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n415×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_relative_position_NED_origin(Vector3<float>&) const" -> "NavEKF2::getPosD(signed char, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n413×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_relative_position_NED_origin(Vector3<float>&) const" -> "NavEKF2::getPosNE(signed char, Vector2<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n415×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_relative_position_NE_origin(Vector2<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::get_relative_position_NE_origin(Vector2<float>&) const\n0.12%\n(0.04%)\n72070×"];
	"AP_AHRS_NavEKF::get_relative_position_NE_origin(Vector2<float>&) const" -> "NavEKF2::getFilterFaults(signed char, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_relative_position_NE_origin(Vector2<float>&) const" -> "NavEKF2::getPosNE(signed char, Vector2<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_rotation_body_to_ned() const" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::get_rotation_body_to_ned() const\n0.33%\n(0.12%)\n292186×"];
	"AP_AHRS_NavEKF::get_rotation_body_to_ned() const" -> "NavEKF2::getFilterFaults(signed char, unsigned short&) const" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.21%\n290351×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_secondary_attitude(Vector3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::get_secondary_attitude(Vector3<float>&) const\n0.00%\n(0.00%)\n2461×"];
	"AP_AHRS_NavEKF::get_secondary_attitude(Vector3<float>&) const" -> "NavEKF2::getEulerAngles(signed char, Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_secondary_attitude(Vector3<float>&) const" -> "NavEKF2::getFilterFaults(signed char, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2455×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_secondary_position(Location&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::get_secondary_position(Location&) const\n0.00%\n(0.00%)\n1746×"];
	"AP_AHRS_NavEKF::get_secondary_position(Location&) const" -> "AP_AHRS_DCM::get_position(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_secondary_position(Location&) const" -> "NavEKF2::getFilterFaults(signed char, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_secondary_position(Location&) const" -> "NavEKF2::getLLH(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_secondary_quaternion(Quaternion&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::get_secondary_quaternion(Quaternion&) const\n0.00%\n(0.00%)\n1740×"];
	"AP_AHRS_NavEKF::get_secondary_quaternion(Quaternion&) const" -> "NavEKF2::getFilterFaults(signed char, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_secondary_quaternion(Quaternion&) const" -> "Quaternion::from_rotation_matrix(Matrix3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_variances(float&, float&, float&, Vector3<float>&, float&, Vector2<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::get_variances(float&, float&, float&, Vector3<float>&, float&, Vector2<float>&) const\n0.00%\n(0.00%)\n3493×"];
	"AP_AHRS_NavEKF::get_variances(float&, float&, float&, Vector3<float>&, float&, Vector2<float>&) const" -> "NavEKF2::getVariances(signed char, float&, float&, float&, Vector3<float>&, float&, Vector2<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3493×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_velocity_NED(Vector3<float>&) const" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::get_velocity_NED(Vector3<float>&) const\n0.23%\n(0.08%)\n146133×"];
	"AP_AHRS_NavEKF::get_velocity_NED(Vector3<float>&) const" -> "AP_AHRS_DCM::get_velocity_NED(Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1210×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_velocity_NED(Vector3<float>&) const" -> "NavEKF2::getFilterFaults(signed char, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.11%\n144923×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::get_velocity_NED(Vector3<float>&) const" -> "NavEKF2::getVelNED(signed char, Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n144923×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::groundspeed_vector()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::groundspeed_vector()\n0.00%\n(0.00%)\n721×"];
	"AP_AHRS_NavEKF::groundspeed_vector()" -> "AP_AHRS::groundspeed_vector()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::groundspeed_vector()" -> "NavEKF2::getFilterFaults(signed char, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n715×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::groundspeed_vector()" -> "NavEKF2::getVelNED(signed char, Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n715×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::have_ekf_logging() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::have_ekf_logging() const\n0.00%\n(0.00%)\n3511×"];
	"AP_AHRS_NavEKF::have_inertial_nav() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::have_inertial_nav() const\n0.03%\n(0.01%)\n23168×"];
	"AP_AHRS_NavEKF::have_inertial_nav() const" -> "NavEKF2::getFilterFaults(signed char, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n23154×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::healthy() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::healthy() const\n0.00%\n(0.00%)\n642×"];
	"AP_AHRS_NavEKF::healthy() const" -> "NavEKF2::healthy() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n642×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::init()\n0.00%\n(0.00%)\n1×"];
	"AP_AHRS_NavEKF::init()" -> "AP_AHRS::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::initialised() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::initialised() const\n0.00%\n(0.00%)\n721×"];
	"AP_AHRS_NavEKF::initialised() const" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n715×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::is_ext_nav_used_for_yaw() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::is_ext_nav_used_for_yaw() const\n0.00%\n(0.00%)\n1×"];
	"AP_AHRS_NavEKF::is_ext_nav_used_for_yaw() const" -> "NavEKF2::getFilterFaults(signed char, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::is_ext_nav_used_for_yaw() const" -> "NavEKF2::isExtNavUsedForYaw() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::prearm_failure_reason() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::prearm_failure_reason() const\n0.00%\n(0.00%)\n2×"];
	"AP_AHRS_NavEKF::prearm_failure_reason() const" -> "NavEKF2::prearm_failure_reason() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::prearm_healthy() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::prearm_healthy() const\n0.00%\n(0.00%)\n7×"];
	"AP_AHRS_NavEKF::prearm_healthy() const" -> "NavEKF2::all_cores_healthy() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::prearm_healthy() const" -> "NavEKF2::healthy() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::reset(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::reset(bool)\n0.00%\n(0.00%)\n1×"];
	"AP_AHRS_NavEKF::reset(bool)" -> "AP_AHRS_DCM::reset(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::reset(bool)" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::reset(bool)" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::resetHeightDatum()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::resetHeightDatum()\n0.00%\n(0.00%)\n1×"];
	"AP_AHRS_NavEKF::resetHeightDatum()" -> "NavEKF2::resetHeightDatum()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::resetHeightDatum()" -> "NavEKF3::resetHeightDatum()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::resetHeightDatum()" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::resetHeightDatum()" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::send_ekf_status_report(mavlink_channel_t) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::send_ekf_status_report(mavlink_channel_t) const\n0.01%\n(0.00%)\n721×"];
	"AP_AHRS_NavEKF::send_ekf_status_report(mavlink_channel_t) const" -> "NavEKF2::send_status_report(mavlink_channel_t) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::setTakeoffExpected(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::setTakeoffExpected(bool)\n0.00%\n(0.00%)\n9008×"];
	"AP_AHRS_NavEKF::setTakeoffExpected(bool)" -> "NavEKF2::setTakeoffExpected(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::setTakeoffExpected(bool)" -> "NavEKF3::setTakeoffExpected(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::setTouchdownExpected(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::setTouchdownExpected(bool)\n0.00%\n(0.00%)\n9008×"];
	"AP_AHRS_NavEKF::setTouchdownExpected(bool)" -> "NavEKF2::setTouchdownExpected(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::setTouchdownExpected(bool)" -> "NavEKF3::setTouchdownExpected(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update(bool)" [color="#0c678a", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::update(bool)\n18.00%\n(0.06%)\n72070×"];
	"AP_AHRS_NavEKF::update(bool)" -> "AP_AHRS::update_cd_values()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update(bool)" -> "AP_AHRS::update_nmea_out()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update(bool)" -> "AP_AHRS_DCM::update(bool)" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.55%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update(bool)" -> "AP_AHRS_NavEKF::active_EKF_type() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update(bool)" -> "AP_AHRS_NavEKF::update_EKF2() [clone .part.26] [clone .constprop.39]" [arrowsize="0.39", color="#0c5887", fontcolor="#0c5887", fontsize="10.00", label="15.50%\n71471×", labeldistance="0.62", penwidth="0.62"];
	"AP_AHRS_NavEKF::update(bool)" -> "AP_AHRS_NavEKF::update_SITL()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.09%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update(bool)" -> "AP_AHRS_View::update(bool)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.57%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update(bool)" -> "AP_HAL::Scheduler::boost_end()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update(bool)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72671×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update(bool)" -> "Empty::OpticalFlow::push_gyro_bias(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update(bool)" -> "NavEKF2::InitialiseFilter()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n200×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update(bool)" -> "NavEKF3::InitialiseFilter()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n71670×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update(bool)" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update(bool)" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update_EKF2() [clone .part.26] [clone .constprop.39]" [color="#0c5887", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::update_EKF2() [clone .part.26] [clone .constprop.39]\n15.50%\n(0.13%)\n71471×"];
	"AP_AHRS_NavEKF::update_EKF2() [clone .part.26] [clone .constprop.39]" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update_EKF2() [clone .part.26] [clone .constprop.39]" -> "AP_AHRS::update_cd_values()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update_EKF2() [clone .part.26] [clone .constprop.39]" -> "AP_AHRS::update_trig()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.24%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update_EKF2() [clone .part.26] [clone .constprop.39]" -> "AP_AHRS_NavEKF::active_EKF_type() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update_EKF2() [clone .part.26] [clone .constprop.39]" -> "Matrix3<float>::operator*(Matrix3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.13%\n142942×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update_EKF2() [clone .part.26] [clone .constprop.39]" -> "Matrix3<float>::operator*(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n142942×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update_EKF2() [clone .part.26] [clone .constprop.39]" -> "NavEKF2::UpdateFilter()" [arrowsize="0.38", color="#0c5285", fontcolor="#0c5285", fontsize="10.00", label="14.41%\n71471×", labeldistance="0.58", penwidth="0.58"];
	"AP_AHRS_NavEKF::update_EKF2() [clone .part.26] [clone .constprop.39]" -> "NavEKF2::getAccelZBias(signed char, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update_EKF2() [clone .part.26] [clone .constprop.39]" -> "NavEKF2::getEulerAngles(signed char, Vector3<float>&) const" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.26%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update_EKF2() [clone .part.26] [clone .constprop.39]" -> "NavEKF2::getFilterStatus(signed char, nav_filter_status&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update_EKF2() [clone .part.26] [clone .constprop.39]" -> "NavEKF2::getGyroBias(signed char, Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update_EKF2() [clone .part.26] [clone .constprop.39]" -> "NavEKF2::getPrimaryCoreIMUIndex() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update_EKF2() [clone .part.26] [clone .constprop.39]" -> "NavEKF2::getRotationBodyToNED(Matrix3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.13%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update_EKF2() [clone .part.26] [clone .constprop.39]" -> "Vector3<float>::operator+(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update_EKF2() [clone .part.26] [clone .constprop.39]" -> "Vector3<float>::operator-() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update_SITL()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::update_SITL()\n0.09%\n(0.04%)\n72070×"];
	"AP_AHRS_NavEKF::update_SITL()" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update_SITL()" -> "AP::sitl()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::update_SITL()" -> "NavEKF2::getFilterFaults(signed char, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n71470×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::use_compass()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_NavEKF::use_compass()\n0.00%\n(0.00%)\n721×"];
	"AP_AHRS_NavEKF::use_compass()" -> "AP_AHRS_DCM::use_compass()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::use_compass()" -> "NavEKF2::getFilterFaults(signed char, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n715×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_NavEKF::use_compass()" -> "NavEKF2::use_compass() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n715×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_View::AP_AHRS_View(AP_AHRS&, Rotation, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_View::AP_AHRS_View(AP_AHRS&, Rotation, float)\n0.00%\n(0.00%)\n1×"];
	"AP_AHRS_View::AP_AHRS_View(AP_AHRS&, Rotation, float)" -> "AP_AHRS_View::update(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_View::AP_AHRS_View(AP_AHRS&, Rotation, float)" -> "Matrix3<float>::from_euler(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_View::AP_AHRS_View(AP_AHRS&, Rotation, float)" -> "Matrix3<float>::transposed() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_View::AP_AHRS_View(AP_AHRS&, Rotation, float)" -> "wrap_360(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_View::get_gyro_latest() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_View::get_gyro_latest() const\n0.15%\n(0.02%)\n72070×"];
	"AP_AHRS_View::get_gyro_latest() const" -> "AP_AHRS::get_gyro_latest() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_View::get_gyro_latest() const" -> "Vector3<float>::rotate(Rotation)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_View::update(bool)" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AHRS_View::update(bool)\n0.57%\n(0.06%)\n72071×"];
	"AP_AHRS_View::update(bool)" -> "AP_AHRS::calc_trig(Matrix3<float> const&, float&, float&, float&, float&, float&, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.13%\n72071×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_View::update(bool)" -> "AP_AHRS_NavEKF::get_gyro() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n72071×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_View::update(bool)" -> "AP_AHRS_NavEKF::get_rotation_body_to_ned() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n72071×", labeldistance="0.50", penwidth="0.50"];
	"AP_AHRS_View::update(bool)" -> "Matrix3<float>::to_euler(float*, float*, float*) const" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.22%\n72071×", labeldistance="0.50", penwidth="0.50"];
	"AP_AccelCal::register_client(AP_AccelCal_Client*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_AccelCal::register_client(AP_AccelCal_Client*)\n0.00%\n(0.00%)\n1×"];
	"AP_Arming::AP_Arming()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming::AP_Arming()\n0.00%\n(0.00%)\n1×"];
	"AP_Arming::AP_Arming()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::AP_Arming()" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::arm(AP_Arming::Method, bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming::arm(AP_Arming::Method, bool)\n0.00%\n(0.00%)\n1×"];
	"AP_Arming::arm(AP_Arming::Method, bool)" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::arm(AP_Arming::Method, bool)" -> "AP_Arming_Copter::arm_checks(AP_Arming::Method)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::arm(AP_Arming::Method, bool)" -> "AP_Arming_Copter::pre_arm_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::arm(AP_Arming::Method, bool)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::arm(AP_Arming::Method, bool)" -> "AP_Logger::WriteCriticalBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::arm(AP_Arming::Method, bool)" -> "AP_Logger::Write_Event(LogEvent)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::arm_checks(AP_Arming::Method)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming::arm_checks(AP_Arming::Method)\n0.00%\n(0.00%)\n1×"];
	"AP_Arming::arm_checks(AP_Arming::Method)" -> "AP::gps()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::arm_checks(AP_Arming::Method)" -> "AP_Arming::rc_arm_checks(AP_Arming::Method)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::arm_checks(AP_Arming::Method)" -> "AP_GPS::prepare_for_arming()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::arm_checks(AP_Arming::Method)" -> "AP_Logger::PrepForArming()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::arm_checks(AP_Arming::Method)" -> "AP_Logger::logging_present() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::arm_checks(AP_Arming::Method)" -> "AP_Logger::logging_started()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::aux_auth_checks(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming::aux_auth_checks(bool)\n0.00%\n(0.00%)\n7×"];
	"AP_Arming::aux_auth_checks(bool)" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::aux_auth_checks(bool)" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::barometer_checks(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming::barometer_checks(bool)\n0.00%\n(0.00%)\n7×"];
	"AP_Arming::barometer_checks(bool)" -> "AP::baro()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::barometer_checks(bool)" -> "AP_Baro::all_healthy() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::battery_checks(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming::battery_checks(bool)\n0.00%\n(0.00%)\n7×"];
	"AP_Arming::battery_checks(bool)" -> "AP::battery()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::battery_checks(bool)" -> "AP_BattMonitor::arming_checks(unsigned long, char*) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::board_voltage_checks(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming::board_voltage_checks(bool)\n0.00%\n(0.00%)\n7×"];
	"AP_Arming::board_voltage_checks(bool)" -> "HALSITL::AnalogIn::board_voltage()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::check_enabled(AP_Arming::ArmingChecks) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming::check_enabled(AP_Arming::ArmingChecks) const\n0.00%\n(0.00%)\n8×"];
	"AP_Arming::check_failed(AP_Arming::ArmingChecks, bool, char const*, ...) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming::check_failed(AP_Arming::ArmingChecks, bool, char const*, ...) const\n0.00%\n(0.00%)\n2×"];
	"AP_Arming::check_failed(bool, char const*, ...) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming::check_failed(bool, char const*, ...) const\n0.00%\n(0.00%)\n2×"];
	"AP_Arming::compass_checks(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming::compass_checks(bool)\n0.00%\n(0.00%)\n7×"];
	"AP_Arming::compass_checks(bool)" -> "AP::compass()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::compass_checks(bool)" -> "Compass::_get_state_id(typesafe_index<unsigned char, TAG_Priority>) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n21×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::compass_checks(bool)" -> "Compass::configured(char*, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::compass_checks(bool)" -> "Compass::consistent() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::compass_checks(bool)" -> "Compass::is_calibrating() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::compass_checks(bool)" -> "Compass::use_for_yaw(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::compass_checks(bool)" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::fence_checks(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming::fence_checks(bool)\n0.00%\n(0.00%)\n7×"];
	"AP_Arming::fence_checks(bool)" -> "AC_Fence::pre_arm_check(char const*&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::fence_checks(bool)" -> "AP::fence()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::get_enabled_checks() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming::get_enabled_checks() const\n0.00%\n(0.00%)\n721×"];
	"AP_Arming::ins_checks(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming::ins_checks(bool)\n0.00%\n(0.00%)\n7×"];
	"AP_Arming::ins_checks(bool)" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::ins_checks(bool)" -> "AP::fft()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::ins_checks(bool)" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::ins_checks(bool)" -> "AP_AHRS_NavEKF::attitudes_consistent(char*, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::ins_checks(bool)" -> "AP_GyroFFT::calibration_check()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::ins_checks(bool)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::ins_checks(bool)" -> "AP_InertialSensor::accel_calibrated_ok_all() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::ins_checks(bool)" -> "AP_InertialSensor::get_accel_health_all() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::ins_checks(bool)" -> "AP_InertialSensor::get_gyro_health_all() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::ins_checks(bool)" -> "AP_InertialSensor::gyro_calibrated_ok_all() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::ins_checks(bool)" -> "AP_InertialSensor::use_accel(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::ins_checks(bool)" -> "AP_InertialSensor::use_gyro(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::ins_checks(bool)" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n28×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::ins_checks(bool)" -> "Vector3<float>::operator-(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n28×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::is_armed()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming::is_armed()\n0.00%\n(0.00%)\n1×"];
	"AP_Arming::mission_checks(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming::mission_checks(bool)\n0.00%\n(0.00%)\n7×"];
	"AP_Arming::pre_arm_checks(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming::pre_arm_checks(bool)\n0.00%\n(0.00%)\n7×"];
	"AP_Arming::pre_arm_checks(bool)" -> "AP::battery()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::pre_arm_checks(bool)" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n21×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::pre_arm_checks(bool)" -> "AP::runcam()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::pre_arm_checks(bool)" -> "AP::visualodom()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::pre_arm_checks(bool)" -> "AP_Arming::aux_auth_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::pre_arm_checks(bool)" -> "AP_Arming::mission_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::pre_arm_checks(bool)" -> "AP_Arming::system_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::pre_arm_checks(bool)" -> "AP_Arming_Copter::barometer_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::pre_arm_checks(bool)" -> "AP_Arming_Copter::board_voltage_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::pre_arm_checks(bool)" -> "AP_Arming_Copter::compass_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::pre_arm_checks(bool)" -> "AP_Arming_Copter::gps_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::pre_arm_checks(bool)" -> "AP_Arming_Copter::ins_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::pre_arm_checks(bool)" -> "AP_Arming_Copter::proximity_checks(bool) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::pre_arm_checks(bool)" -> "AP_Arming_Copter::rc_calibration_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::pre_arm_checks(bool)" -> "AP_BattMonitor::arming_checks(unsigned long, char*) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::pre_arm_checks(bool)" -> "AP_Logger::CardInserted()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::pre_arm_checks(bool)" -> "AP_Logger::logging_failed() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::pre_arm_checks(bool)" -> "AP_Logger::logging_present() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::pre_arm_checks(bool)" -> "AP_RunCam::pre_arm_check(char*, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::pre_arm_checks(bool)" -> "AP_VisualOdom::pre_arm_check(char*, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::pre_arm_checks(bool)" -> "HALSITL::Util::safety_switch_state()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::pre_arm_checks(bool)" -> "RangeFinder::prearm_healthy(char*, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::proximity_checks(bool) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming::proximity_checks(bool) const\n0.00%\n(0.00%)\n7×"];
	"AP_Arming::proximity_checks(bool) const" -> "AP::proximity()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::proximity_checks(bool) const" -> "AP_Proximity::get_status() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::rc_arm_checks(AP_Arming::Method)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming::rc_arm_checks(AP_Arming::Method)\n0.00%\n(0.00%)\n1×"];
	"AP_Arming::rc_arm_checks(AP_Arming::Method)" -> "AP::rcmap()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::rc_arm_checks(AP_Arming::Method)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::rc_arm_checks(AP_Arming::Method)" -> "RC_Channel::in_trim_dz() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::rc_arm_checks(AP_Arming::Method)" -> "RC_Channels_Copter::channel(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::rc_arm_checks(AP_Arming::Method)" -> "RC_Channels_Copter::has_valid_input() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::rc_arm_checks(AP_Arming::Method)" -> "rc()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::rc_calibration_checks(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming::rc_calibration_checks(bool)\n0.00%\n(0.00%)\n9×"];
	"AP_Arming::rc_calibration_checks(bool)" -> "RC_Channels::get_valid_channel_count()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::rc_calibration_checks(bool)" -> "RC_Channels_Copter::channel(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n144×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::rc_calibration_checks(bool)" -> "rc()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n144×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::rc_checks_copter_sub(bool, RC_Channel const**) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming::rc_checks_copter_sub(bool, RC_Channel const**) const\n0.00%\n(0.00%)\n9×"];
	"AP_Arming::system_checks(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming::system_checks(bool)\n0.00%\n(0.00%)\n7×"];
	"AP_Arming::system_checks(bool)" -> "AP::internalerror()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming::system_checks(bool)" -> "HALSITL::Storage::healthy()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming_Copter::arm(AP_Arming::Method, bool)\n0.00%\n(0.00%)\n1×"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" -> "AP::PerfInfo::ignore_this_loop()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" -> "AP::ahrs_navekf()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" -> "AP::notify()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n11×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" -> "AP::scheduler()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" -> "AP_AHRS_NavEKF::resetHeightDatum()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" -> "AP_Arming::arm(AP_Arming::Method, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" -> "AP_HAL::Util::set_soft_armed(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" -> "AP_Logger::Write_Event(LogEvent)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" -> "AP_Logger::Write_Mode(unsigned char, ModeReason)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" -> "AP_Logger::set_vehicle_armed(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" -> "AP_Motors::armed(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" -> "AP_Notify::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n11×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" -> "AP_SmartRTL::set_home(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" -> "Copter::enable_motor_output()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" -> "Copter::failsafe_disable()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" -> "Copter::failsafe_enable()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" -> "Copter::init_simple_bearing()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" -> "Copter::position_ok() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" -> "Copter::update_super_simple_bearing(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" -> "GCS::send_text(MAV_SEVERITY, char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm(AP_Arming::Method, bool)" -> "gcs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm_checks(AP_Arming::Method)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming_Copter::arm_checks(AP_Arming::Method)\n0.00%\n(0.00%)\n1×"];
	"AP_Arming_Copter::arm_checks(AP_Arming::Method)" -> "AP::ahrs_navekf()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm_checks(AP_Arming::Method)" -> "AP::compass()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm_checks(AP_Arming::Method)" -> "AP_AHRS_NavEKF::healthy() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm_checks(AP_Arming::Method)" -> "AP_AHRS_NavEKF::is_ext_nav_used_for_yaw() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm_checks(AP_Arming::Method)" -> "AP_Arming::arm_checks(AP_Arming::Method)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm_checks(AP_Arming::Method)" -> "AP_Arming::check_enabled(AP_Arming::ArmingChecks) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm_checks(AP_Arming::Method)" -> "Compass::_get_state_id(typesafe_index<unsigned char, TAG_Priority>) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm_checks(AP_Arming::Method)" -> "Copter::get_pilot_desired_climb_rate(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm_checks(AP_Arming::Method)" -> "HALSITL::Util::safety_switch_state()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm_checks(AP_Arming::Method)" -> "ModeStabilize::allows_arming(bool) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm_checks(AP_Arming::Method)" -> "ModeStabilize::has_manual_throttle() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm_checks(AP_Arming::Method)" -> "RC_Channels::find_channel_for_option(RC_Channel::AUX_FUNC)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm_checks(AP_Arming::Method)" -> acosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::arm_checks(AP_Arming::Method)" -> "rc()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::barometer_checks(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming_Copter::barometer_checks(bool)\n0.00%\n(0.00%)\n7×"];
	"AP_Arming_Copter::barometer_checks(bool)" -> "AP_Arming::barometer_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::barometer_checks(bool)" -> "AP_InertialNav_NavEKF::get_filter_status() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::board_voltage_checks(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming_Copter::board_voltage_checks(bool)\n0.00%\n(0.00%)\n7×"];
	"AP_Arming_Copter::board_voltage_checks(bool)" -> "AP_Arming::battery_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::board_voltage_checks(bool)" -> "AP_Arming::board_voltage_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::compass_checks(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming_Copter::compass_checks(bool)\n0.00%\n(0.00%)\n7×"];
	"AP_Arming_Copter::compass_checks(bool)" -> "AP::compass()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::compass_checks(bool)" -> "AP_Arming::compass_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::compass_checks(bool)" -> "Compass::configured(char*, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::gps_checks(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming_Copter::gps_checks(bool)\n0.00%\n(0.00%)\n7×"];
	"AP_Arming_Copter::gps_checks(bool)" -> "AC_Fence::get_enabled_fences() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::gps_checks(bool)" -> "AP::ahrs_navekf()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::gps_checks(bool)" -> "AP_AHRS_NavEKF::prearm_failure_reason() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::gps_checks(bool)" -> "AP_AHRS_NavEKF::prearm_healthy() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::gps_checks(bool)" -> "AP_Arming::check_failed(bool, char const*, ...) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::gps_checks(bool)" -> "ModeStabilize::requires_GPS() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::ins_checks(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming_Copter::ins_checks(bool)\n0.00%\n(0.00%)\n7×"];
	"AP_Arming_Copter::ins_checks(bool)" -> "AP_Arming::check_failed(AP_Arming::ArmingChecks, bool, char const*, ...) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::ins_checks(bool)" -> "AP_Arming::ins_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::ins_checks(bool)" -> "AP_InertialNav_NavEKF::get_filter_status() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::parameter_checks(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming_Copter::parameter_checks(bool)\n0.00%\n(0.00%)\n7×"];
	"AP_Arming_Copter::parameter_checks(bool)" -> "AC_AttitudeControl::pre_arm_checks(char const*, char*, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::parameter_checks(bool)" -> "AC_PosControl::pre_arm_checks(char const*, char*, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::parameter_checks(bool)" -> "AP_MotorsMulticopter::check_mot_pwm_params() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::parameter_checks(bool)" -> "ModeRTL::get_alt_type() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::parameter_checks(bool)" -> "RC_Channels::duplicate_options_exist()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::parameter_checks(bool)" -> "rc()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::pre_arm_checks(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming_Copter::pre_arm_checks(bool)\n0.00%\n(0.00%)\n1×"];
	"AP_Arming_Copter::pre_arm_checks(bool)" -> "AP_Arming::check_enabled(AP_Arming::ArmingChecks) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::pre_arm_checks(bool)" -> "AP_Arming::fence_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::pre_arm_checks(bool)" -> "AP_Arming::pre_arm_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::pre_arm_checks(bool)" -> "AP_Arming_Copter::parameter_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::pre_arm_checks(bool)" -> "AP_OAPathPlanner::pre_arm_check(char*, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::pre_arm_checks(bool)" -> "RC_Channels::find_channel_for_option(RC_Channel::AUX_FUNC)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::pre_arm_checks(bool)" -> "rc()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::proximity_checks(bool) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming_Copter::proximity_checks(bool) const\n0.00%\n(0.00%)\n7×"];
	"AP_Arming_Copter::proximity_checks(bool) const" -> "AP_Arming::proximity_checks(bool) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::proximity_checks(bool) const" -> "AP_Proximity::get_closest_object(float&, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::rc_calibration_checks(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming_Copter::rc_calibration_checks(bool)\n0.00%\n(0.00%)\n9×"];
	"AP_Arming_Copter::rc_calibration_checks(bool)" -> "AP_Arming::rc_calibration_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::rc_calibration_checks(bool)" -> "AP_Arming::rc_checks_copter_sub(bool, RC_Channel const**) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Arming_Copter::update()\n0.00%\n(0.00%)\n180×"];
	"AP_Arming_Copter::update()" -> "AP_Arming::check_enabled(AP_Arming::ArmingChecks) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::update()" -> "AP_Arming::fence_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::update()" -> "AP_Arming::pre_arm_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::update()" -> "AP_Arming_Copter::parameter_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::update()" -> "AP_OAPathPlanner::pre_arm_check(char*, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::update()" -> "RC_Channels::find_channel_for_option(RC_Channel::AUX_FUNC)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_Arming_Copter::update()" -> "rc()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_Avoidance::AP_Avoidance(AP_ADSB&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Avoidance::AP_Avoidance(AP_ADSB&)\n0.00%\n(0.00%)\n1×"];
	"AP_Avoidance::AP_Avoidance(AP_ADSB&)" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Avoidance::AP_Avoidance(AP_ADSB&)" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Avoidance::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Avoidance::update()\n0.00%\n(0.00%)\n1802×"];
	"AP_Baro::AP_Baro()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Baro::AP_Baro()\n0.00%\n(0.00%)\n1×"];
	"AP_Baro::AP_Baro()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::AP_Baro()" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::SimpleAtmosphere(float, float&, float&, float&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Baro::SimpleAtmosphere(float, float&, float&, float&)\n0.05%\n(0.01%)\n18269×"];
	"AP_Baro::SimpleAtmosphere(float, float&, float&, float&)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::SimpleAtmosphere(float, float&, float&, float&)" -> powf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n18268×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::_probe_i2c_barometers()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Baro::_probe_i2c_barometers()\n0.00%\n(0.00%)\n1×"];
	"AP_Baro::accumulate()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Baro::accumulate()\n0.00%\n(0.00%)\n9008×"];
	"AP_Baro::all_healthy() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Baro::all_healthy() const\n0.00%\n(0.00%)\n728×"];
	"AP_Baro::calibrate(bool)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Baro::calibrate(bool)\n0.34%\n(0.00%)\n1×"];
	"AP_Baro::calibrate(bool)" -> "AP_Baro::get_external_temperature(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::calibrate(bool)" -> "AP_Baro::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::calibrate(bool)" -> "AP_Baro_Backend::backend_update(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::calibrate(bool)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n30×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::calibrate(bool)" -> "AP_Logger::should_log(unsigned int) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::calibrate(bool)" -> "AP_Param::save(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::calibrate(bool)" -> "DerivativeFilter<float, (unsigned char)7>::update(float, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::calibrate(bool)" -> "GCS::send_text(MAV_SEVERITY, char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::calibrate(bool)" -> "HALSITL::Scheduler::delay(unsigned short)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.34%\n25×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::calibrate(bool)" -> "HALSITL::Util::was_watchdog_reset() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::calibrate(bool)" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::calibrate(bool)" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::calibrate(bool)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::calibrate(bool)" -> expf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::calibrate(bool)" -> "gcs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::calibrate(bool)" -> logf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::get_air_density_ratio()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Baro::get_air_density_ratio()\n0.00%\n(0.00%)\n1802×"];
	"AP_Baro::get_climb_rate()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Baro::get_climb_rate()\n0.00%\n(0.00%)\n1740×"];
	"AP_Baro::get_climb_rate()" -> "DerivativeFilter<float, (unsigned char)7>::slope()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::get_external_temperature(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Baro::get_external_temperature(unsigned char) const\n0.00%\n(0.00%)\n1×"];
	"AP_Baro::get_ground_temperature() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Baro::get_ground_temperature() const\n0.00%\n(0.00%)\n1740×"];
	"AP_Baro::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Baro::init()\n0.00%\n(0.00%)\n1×"];
	"AP_Baro::init()" -> "AP::sitl()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::init()" -> "AP_Baro::_probe_i2c_barometers()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::init()" -> "AP_Baro_SITL::AP_Baro_SITL(AP_Baro&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::init()" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::register_sensor()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Baro::register_sensor()\n0.00%\n(0.00%)\n1×"];
	"AP_Baro::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Baro::update()\n0.03%\n(0.00%)\n1807×"];
	"AP_Baro::update()" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::update()" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::update()" -> "AP_AHRS_NavEKF::have_ekf_logging() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::update()" -> "AP_Baro_Backend::backend_update(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1807×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::update()" -> "AP_Logger::Write_Baro(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::update()" -> "AP_Logger::should_log(unsigned int) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1807×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::update()" -> "DerivativeFilter<float, (unsigned char)7>::update(float, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1807×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::update()" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1807×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::update()" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1807×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::update()" -> expf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1807×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::update()" -> logf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1807×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro::update_calibration()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Baro::update_calibration()\n0.00%\n(0.00%)\n2×"];
	"AP_Baro::update_calibration()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro_Backend::AP_Baro_Backend(AP_Baro&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Baro_Backend::AP_Baro_Backend(AP_Baro&)\n0.00%\n(0.00%)\n1×"];
	"AP_Baro_Backend::AP_Baro_Backend(AP_Baro&)" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro_Backend::_copy_to_frontend(unsigned char, float, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Baro_Backend::_copy_to_frontend(unsigned char, float, float)\n0.00%\n(0.00%)\n1817×"];
	"AP_Baro_Backend::_copy_to_frontend(unsigned char, float, float)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1817×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro_Backend::_copy_to_frontend(unsigned char, float, float)" -> "std::enable_if<std::is_floating_point<std::common_type<float, float>::type>::value, bool>::type is_equal<float, float>(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3032×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro_Backend::backend_update(unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Baro_Backend::backend_update(unsigned char)\n0.00%\n(0.00%)\n1817×"];
	"AP_Baro_Backend::backend_update(unsigned char)" -> "AP_Baro_SITL::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1817×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro_Backend::backend_update(unsigned char)" -> "AP_Baro_SITL::update_healthy_flag(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1817×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro_SITL::AP_Baro_SITL(AP_Baro&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Baro_SITL::AP_Baro_SITL(AP_Baro&)\n0.00%\n(0.00%)\n1×"];
	"AP_Baro_SITL::AP_Baro_SITL(AP_Baro&)" -> "AP::sitl()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro_SITL::AP_Baro_SITL(AP_Baro&)" -> "AP_Baro::register_sensor()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro_SITL::AP_Baro_SITL(AP_Baro&)" -> "AP_Baro_Backend::AP_Baro_Backend(AP_Baro&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro_SITL::AP_Baro_SITL(AP_Baro&)" -> "HALSITL::Scheduler::register_timer_process(Functor<void>)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro_SITL::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Baro_SITL::update()\n0.00%\n(0.00%)\n1817×"];
	"AP_Baro_SITL::update()" -> "AP_Baro_Backend::_copy_to_frontend(unsigned char, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1817×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro_SITL::update()" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1817×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro_SITL::update()" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1817×", labeldistance="0.50", penwidth="0.50"];
	"AP_Baro_SITL::update_healthy_flag(unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Baro_SITL::update_healthy_flag(unsigned char)\n0.00%\n(0.00%)\n1817×"];
	"AP_BattMonitor::AP_BattMonitor(unsigned int, Functor<void, char const*, signed char const>, signed char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor::AP_BattMonitor(unsigned int, Functor<void, char const*, signed char const>, signed char const*)\n0.00%\n(0.00%)\n1×"];
	"AP_BattMonitor::AP_BattMonitor(unsigned int, Functor<void, char const*, signed char const>, signed char const*)" -> "AP_BattMonitor_Params::AP_BattMonitor_Params()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor::AP_BattMonitor(unsigned int, Functor<void, char const*, signed char const>, signed char const*)" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor::arming_checks(unsigned long, char*) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor::arming_checks(unsigned long, char*) const\n0.00%\n(0.00%)\n14×"];
	"AP_BattMonitor::arming_checks(unsigned long, char*) const" -> "AP_BattMonitor_Backend::arming_checks(char*, unsigned long) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor::capacity_remaining_pct(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor::capacity_remaining_pct(unsigned char) const\n0.00%\n(0.00%)\n1442×"];
	"AP_BattMonitor::capacity_remaining_pct(unsigned char) const" -> "AP_BattMonitor_Backend::capacity_remaining_pct() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1442×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor::check_failsafes() [clone .part.3] [clone .constprop.4]" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor::check_failsafes() [clone .part.3] [clone .constprop.4]\n0.00%\n(0.00%)\n1740×"];
	"AP_BattMonitor::check_failsafes() [clone .part.3] [clone .constprop.4]" -> "AP_BattMonitor_Backend::update_failsafes()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor::consumed_mah(float&, unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor::consumed_mah(float&, unsigned char) const\n0.00%\n(0.00%)\n2461×"];
	"AP_BattMonitor::consumed_mah(float&, unsigned char) const" -> "AP_BattMonitor_Analog::has_current() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2461×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor::consumed_wh(float&, unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor::consumed_wh(float&, unsigned char) const\n0.00%\n(0.00%)\n2461×"];
	"AP_BattMonitor::consumed_wh(float&, unsigned char) const" -> "AP_BattMonitor_Analog::has_consumed_energy() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2461×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor::convert_params()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor::convert_params()\n0.00%\n(0.00%)\n1×"];
	"AP_BattMonitor::convert_params()" -> "AP_Param::configured_in_storage() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor::current_amps(float&, unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor::current_amps(float&, unsigned char) const\n0.00%\n(0.00%)\n3182×"];
	"AP_BattMonitor::current_amps(float&, unsigned char) const" -> "AP_BattMonitor_Analog::has_current() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3182×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor::get_temperature(float&, unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor::get_temperature(float&, unsigned char) const\n0.00%\n(0.00%)\n2461×"];
	"AP_BattMonitor::get_temperature(float&, unsigned char) const" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2461×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor::has_cell_voltages(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor::has_cell_voltages(unsigned char) const\n0.00%\n(0.00%)\n3182×"];
	"AP_BattMonitor::has_cell_voltages(unsigned char) const" -> "AP_BattMonitor_Backend::has_cell_voltages() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3182×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor::healthy(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor::healthy(unsigned char) const\n0.00%\n(0.00%)\n1442×"];
	"AP_BattMonitor::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor::init()\n0.00%\n(0.00%)\n1×"];
	"AP_BattMonitor::init()" -> "AP_BattMonitor::convert_params()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor::init()" -> "AP_BattMonitor_Analog::AP_BattMonitor_Analog(AP_BattMonitor&, AP_BattMonitor::BattMonitor_State&, AP_BattMonitor_Params&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor::init()" -> "AP_BattMonitor_Analog::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor::init()" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor::read()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor::read()\n0.02%\n(0.00%)\n1802×"];
	"AP_BattMonitor::read()" -> "AP_BattMonitor::check_failsafes() [clone .part.3] [clone .constprop.4]" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor::read()" -> "AP_BattMonitor_Analog::read()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor::read()" -> "AP_BattMonitor_Backend::update_resistance_estimate()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor::read()" -> "AP_Logger::Write_Current()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor::read()" -> "AP_Logger::Write_Power()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor::read()" -> "AP_Logger::should_log(unsigned int) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor::voltage(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor::voltage(unsigned char) const\n0.00%\n(0.00%)\n4984×"];
	"AP_BattMonitor::voltage_resting_estimate(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor::voltage_resting_estimate(unsigned char) const\n0.01%\n(0.00%)\n73812×"];
	"AP_BattMonitor::voltage_resting_estimate(unsigned char) const" -> "AP_BattMonitor_Backend::voltage_resting_estimate() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n73812×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor_Analog::AP_BattMonitor_Analog(AP_BattMonitor&, AP_BattMonitor::BattMonitor_State&, AP_BattMonitor_Params&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor_Analog::AP_BattMonitor_Analog(AP_BattMonitor&, AP_BattMonitor::BattMonitor_State&, AP_BattMonitor_Params&)\n0.00%\n(0.00%)\n1×"];
	"AP_BattMonitor_Analog::AP_BattMonitor_Analog(AP_BattMonitor&, AP_BattMonitor::BattMonitor_State&, AP_BattMonitor_Params&)" -> "AP_BattMonitor_Backend::AP_BattMonitor_Backend(AP_BattMonitor&, AP_BattMonitor::BattMonitor_State&, AP_BattMonitor_Params&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor_Analog::AP_BattMonitor_Analog(AP_BattMonitor&, AP_BattMonitor::BattMonitor_State&, AP_BattMonitor_Params&)" -> "HALSITL::AnalogIn::channel(short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor_Analog::has_consumed_energy() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor_Analog::has_consumed_energy() const\n0.00%\n(0.00%)\n2461×"];
	"AP_BattMonitor_Analog::has_current() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor_Analog::has_current() const\n0.00%\n(0.00%)\n10953×"];
	"AP_BattMonitor_Analog::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor_Analog::init()\n0.00%\n(0.00%)\n1×"];
	"AP_BattMonitor_Analog::read()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor_Analog::read()\n0.00%\n(0.00%)\n1802×"];
	"AP_BattMonitor_Analog::read()" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor_Analog::read()" -> "HALSITL::ADCSource::set_pin(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3604×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor_Analog::read()" -> "HALSITL::ADCSource::voltage_average()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3604×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor_Backend::AP_BattMonitor_Backend(AP_BattMonitor&, AP_BattMonitor::BattMonitor_State&, AP_BattMonitor_Params&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor_Backend::AP_BattMonitor_Backend(AP_BattMonitor&, AP_BattMonitor::BattMonitor_State&, AP_BattMonitor_Params&)\n0.00%\n(0.00%)\n1×"];
	"AP_BattMonitor_Backend::arming_checks(char*, unsigned long) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor_Backend::arming_checks(char*, unsigned long) const\n0.00%\n(0.00%)\n14×"];
	"AP_BattMonitor_Backend::arming_checks(char*, unsigned long) const" -> "AP_BattMonitor_Analog::has_current() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n28×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor_Backend::capacity_remaining_pct() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor_Backend::capacity_remaining_pct() const\n0.00%\n(0.00%)\n1442×"];
	"AP_BattMonitor_Backend::has_cell_voltages() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor_Backend::has_cell_voltages() const\n0.00%\n(0.00%)\n3182×"];
	"AP_BattMonitor_Backend::update_failsafes()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor_Backend::update_failsafes()\n0.00%\n(0.00%)\n1740×"];
	"AP_BattMonitor_Backend::update_failsafes()" -> "AP_BattMonitor_Analog::has_current() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor_Backend::update_failsafes()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor_Backend::update_resistance_estimate()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor_Backend::update_resistance_estimate()\n0.00%\n(0.00%)\n1802×"];
	"AP_BattMonitor_Backend::update_resistance_estimate()" -> "AP_BattMonitor_Analog::has_current() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor_Backend::update_resistance_estimate()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1697×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor_Backend::update_resistance_estimate()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1697×", labeldistance="0.50", penwidth="0.50"];
	"AP_BattMonitor_Backend::voltage_resting_estimate() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor_Backend::voltage_resting_estimate() const\n0.00%\n(0.00%)\n73812×"];
	"AP_BattMonitor_Params::AP_BattMonitor_Params()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BattMonitor_Params::AP_BattMonitor_Params()\n0.00%\n(0.00%)\n9×"];
	"AP_BattMonitor_Params::AP_BattMonitor_Params()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9×", labeldistance="0.50", penwidth="0.50"];
	"AP_Beacon::AP_Beacon(AP_SerialManager&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Beacon::AP_Beacon(AP_SerialManager&)\n0.00%\n(0.00%)\n1×"];
	"AP_Beacon::AP_Beacon(AP_SerialManager&)" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Beacon::count() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Beacon::count() const\n0.00%\n(0.00%)\n35734×"];
	"AP_Beacon::enabled()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Beacon::enabled()\n0.00%\n(0.00%)\n1740×"];
	"AP_Beacon::get_vehicle_position_ned(Vector3<float>&, float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Beacon::get_vehicle_position_ned(Vector3<float>&, float&) const\n0.00%\n(0.00%)\n35734×"];
	"AP_Beacon::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Beacon::init()\n0.00%\n(0.00%)\n1×"];
	"AP_Beacon::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Beacon::update()\n0.00%\n(0.00%)\n72070×"];
	"AP_BoardConfig::board_init_safety()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BoardConfig::board_init_safety()\n0.00%\n(0.00%)\n1×"];
	"AP_BoardConfig::board_setup()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BoardConfig::board_setup()\n0.00%\n(0.00%)\n1×"];
	"AP_BoardConfig::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BoardConfig::init()\n0.00%\n(0.00%)\n1×"];
	"AP_BoardConfig::init()" -> "AP::rtc()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_BoardConfig::init()" -> "AP_BoardConfig::board_setup()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_BoardConfig::init()" -> "AP_RTC::set_utc_usec(unsigned long, AP_RTC::source_type)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_BoardConfig::init()" -> "HALSITL::Util::get_hw_rtc() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_BoardConfig::init_safety()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BoardConfig::init_safety()\n0.00%\n(0.00%)\n1×"];
	"AP_BoardConfig::init_safety()" -> "AP_BoardConfig::board_init_safety()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_BoardConfig::set_default_safety_ignore_mask(unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BoardConfig::set_default_safety_ignore_mask(unsigned short)\n0.00%\n(0.00%)\n1×"];
	"AP_BoardLED::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BoardLED::init()\n0.00%\n(0.00%)\n1×"];
	"AP_BoardLED::init()" -> "HALSITL::GPIO::pinMode(unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_BoardLED::init()" -> "HALSITL::GPIO::write(unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_BoardLED::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_BoardLED::update()\n0.00%\n(0.00%)\n9129×"];
	"AP_BoardLED::update()" -> "HALSITL::GPIO::write(unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6118×", labeldistance="0.50", penwidth="0.50"];
	"AP_Button::AP_Button()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Button::AP_Button()\n0.00%\n(0.00%)\n1×"];
	"AP_Button::AP_Button()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Button::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Button::update()\n0.00%\n(0.00%)\n901×"];
	"AP_Camera::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Camera::update()\n0.00%\n(0.00%)\n902×"];
	"AP_Camera::update()" -> "AP::gps()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n902×", labeldistance="0.50", penwidth="0.50"];
	"AP_Camera::update_trigger()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Camera::update_trigger()\n0.00%\n(0.00%)\n9008×"];
	"AP_Camera::update_trigger()" -> "SRV_Channels::set_output_pwm(SRV_Channel::Aux_servo_function_t, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_Backend::AP_Compass_Backend()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Compass_Backend::AP_Compass_Backend()\n0.00%\n(0.00%)\n1×"];
	"AP_Compass_Backend::AP_Compass_Backend()" -> "AP::compass()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_Backend::AP_Compass_Backend()" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_Backend::accumulate_sample(Vector3<float>&, unsigned char, unsigned int)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Compass_Backend::accumulate_sample(Vector3<float>&, unsigned char, unsigned int)\n0.28%\n(0.06%)\n54798×"];
	"AP_Compass_Backend::accumulate_sample(Vector3<float>&, unsigned char, unsigned int)" -> "AP_Compass_Backend::correct_field(Vector3<float>&, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.09%\n54798×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_Backend::accumulate_sample(Vector3<float>&, unsigned char, unsigned int)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n54798×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_Backend::accumulate_sample(Vector3<float>&, unsigned char, unsigned int)" -> "CompassCalibrator::new_sample(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n54798×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_Backend::accumulate_sample(Vector3<float>&, unsigned char, unsigned int)" -> "Vector3<float>::is_inf() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n54798×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_Backend::accumulate_sample(Vector3<float>&, unsigned char, unsigned int)" -> "Vector3<float>::is_nan() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n54798×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_Backend::accumulate_sample(Vector3<float>&, unsigned char, unsigned int)" -> "Vector3<float>::operator+=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n54798×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_Backend::accumulate_sample(Vector3<float>&, unsigned char, unsigned int)" -> "Vector3<float>::operator/=(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5544×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_Backend::accumulate_sample(Vector3<float>&, unsigned char, unsigned int)" -> "Vector3<float>::rotate(Rotation)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n164394×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_Backend::accumulate_sample(Vector3<float>&, unsigned char, unsigned int)" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n54798×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_Backend::accumulate_sample(Vector3<float>&, unsigned char, unsigned int)" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n54798×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_Backend::correct_field(Vector3<float>&, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Compass_Backend::correct_field(Vector3<float>&, unsigned char)\n0.09%\n(0.05%)\n54798×"];
	"AP_Compass_Backend::correct_field(Vector3<float>&, unsigned char)" -> "Compass::have_scale_factor(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n54798×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_Backend::correct_field(Vector3<float>&, unsigned char)" -> "Matrix3<float>::operator*(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n54798×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_Backend::correct_field(Vector3<float>&, unsigned char)" -> "Vector3<float>::operator+=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n109596×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_Backend::drain_accumulated_samples(unsigned char, Vector3<float> const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Compass_Backend::drain_accumulated_samples(unsigned char, Vector3<float> const*)\n0.01%\n(0.00%)\n5412×"];
	"AP_Compass_Backend::drain_accumulated_samples(unsigned char, Vector3<float> const*)" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5412×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_Backend::drain_accumulated_samples(unsigned char, Vector3<float> const*)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5412×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_Backend::drain_accumulated_samples(unsigned char, Vector3<float> const*)" -> "Vector3<float>::operator/=(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5412×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_Backend::drain_accumulated_samples(unsigned char, Vector3<float> const*)" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n5412×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_Backend::drain_accumulated_samples(unsigned char, Vector3<float> const*)" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5412×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_Backend::get_board_orientation() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Compass_Backend::get_board_orientation() const\n0.00%\n(0.00%)\n18266×"];
	"AP_Compass_Backend::register_compass(int, unsigned char&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Compass_Backend::register_compass(int, unsigned char&) const\n0.00%\n(0.00%)\n6×"];
	"AP_Compass_Backend::register_compass(int, unsigned char&) const" -> "Compass::register_compass(int, unsigned char&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_Backend::save_dev_id(unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Compass_Backend::save_dev_id(unsigned char)\n0.00%\n(0.00%)\n3×"];
	"AP_Compass_Backend::save_dev_id(unsigned char)" -> "AP_Param::save(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_Backend::set_dev_id(unsigned char, unsigned int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Compass_Backend::set_dev_id(unsigned char, unsigned int)\n0.00%\n(0.00%)\n3×"];
	"AP_Compass_Backend::set_external(unsigned char, bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Compass_Backend::set_external(unsigned char, bool)\n0.00%\n(0.00%)\n1×"];
	"AP_Compass_SITL::AP_Compass_SITL()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Compass_SITL::AP_Compass_SITL()\n0.00%\n(0.00%)\n1×"];
	"AP_Compass_SITL::AP_Compass_SITL()" -> "AP::sitl()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::AP_Compass_SITL()" -> "AP_Compass_Backend::AP_Compass_Backend()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::AP_Compass_SITL()" -> "AP_Compass_Backend::register_compass(int, unsigned char&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::AP_Compass_SITL()" -> "AP_Compass_Backend::save_dev_id(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::AP_Compass_SITL()" -> "AP_Compass_Backend::set_dev_id(unsigned char, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::AP_Compass_SITL()" -> "AP_Compass_Backend::set_external(unsigned char, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::AP_Compass_SITL()" -> "Compass::_get_state_id(typesafe_index<unsigned char, TAG_Priority>) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::AP_Compass_SITL()" -> "Compass::_setup_earth_field()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::AP_Compass_SITL()" -> "HALSITL::Scheduler::register_timer_process(Functor<void>)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::_setup_eliptical_correcion()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Compass_SITL::_setup_eliptical_correcion()\n0.02%\n(0.01%)\n18266×"];
	"AP_Compass_SITL::_setup_eliptical_correcion()" -> "Matrix3<float>::invert()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::_setup_eliptical_correcion()" -> "Vector3<float>::operator==(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n36531×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::_timer()" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Compass_SITL::_timer()\n0.60%\n(0.19%)\n219270×"];
	"AP_Compass_SITL::_timer()" -> "AP_Compass_Backend::accumulate_sample(Vector3<float>&, unsigned char, unsigned int)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.28%\n54798×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::_timer()" -> "AP_Compass_Backend::get_board_orientation() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18266×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::_timer()" -> "AP_Compass_SITL::_setup_eliptical_correcion()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n18266×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::_timer()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n219270×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::_timer()" -> "Matrix3<float>::operator*(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18266×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::_timer()" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18266×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::_timer()" -> "Vector3<float>::operator*=(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18266×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::_timer()" -> "Vector3<float>::operator+(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18266×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::_timer()" -> "Vector3<float>::operator-=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18266×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::_timer()" -> "Vector3<float>::rotate(Rotation)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18266×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::_timer()" -> "Vector3<float>::rotate_inverse(Rotation)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n18266×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::_timer()" -> "rand_vec3f()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n18266×", labeldistance="0.50", penwidth="0.50"];
	"AP_Compass_SITL::read()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Compass_SITL::read()\n0.01%\n(0.00%)\n1804×"];
	"AP_Compass_SITL::read()" -> "AP_Compass_Backend::drain_accumulated_samples(unsigned char, Vector3<float> const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n5412×", labeldistance="0.50", penwidth="0.50"];
	"AP_DEVO_Telem::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_DEVO_Telem::init()\n0.00%\n(0.00%)\n1×"];
	"AP_DEVO_Telem::init()" -> "AP::serialmanager()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_DEVO_Telem::init()" -> "AP_SerialManager::find_serial(AP_SerialManager::SerialProtocol, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Declination::get_declination(float, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Declination::get_declination(float, float)\n0.00%\n(0.00%)\n1×"];
	"AP_Declination::get_mag_field_ef(float, float, float&, float&, float&)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Declination::get_mag_field_ef(float, float, float&, float&, float&)\n0.20%\n(0.20%)\n219332×"];
	"AP_ESC_Telem::AP_ESC_Telem()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_ESC_Telem::AP_ESC_Telem()\n0.00%\n(0.00%)\n1×"];
	"AP_Filesystem::close(int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Filesystem::close(int)\n0.00%\n(0.00%)\n8×"];
	"AP_Filesystem::close(int)" -> "AP_Filesystem_Posix::close(int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"AP_Filesystem::disk_free(char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Filesystem::disk_free(char const*)\n0.00%\n(0.00%)\n156×"];
	"AP_Filesystem::disk_free(char const*)" -> "AP_Filesystem_Posix::disk_free(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n156×", labeldistance="0.50", penwidth="0.50"];
	"AP_Filesystem::disk_space(char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Filesystem::disk_space(char const*)\n0.00%\n(0.00%)\n1×"];
	"AP_Filesystem::disk_space(char const*)" -> "AP_Filesystem_Posix::disk_space(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Filesystem::lseek(int, long, int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Filesystem::lseek(int, long, int)\n0.00%\n(0.00%)\n14×"];
	"AP_Filesystem::lseek(int, long, int)" -> "AP_Filesystem_Posix::lseek(int, long, int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"AP_Filesystem::mkdir(char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Filesystem::mkdir(char const*)\n0.00%\n(0.00%)\n1×"];
	"AP_Filesystem::mkdir(char const*)" -> "AP_Filesystem_Posix::mkdir(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Filesystem::open(char const*, int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Filesystem::open(char const*, int)\n0.00%\n(0.00%)\n10×"];
	"AP_Filesystem::open(char const*, int)" -> "AP_Filesystem_Posix::open(char const*, int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10×", labeldistance="0.50", penwidth="0.50"];
	"AP_Filesystem::read(int, void*, unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Filesystem::read(int, void*, unsigned long)\n0.00%\n(0.00%)\n15×"];
	"AP_Filesystem::read(int, void*, unsigned long)" -> "AP_Filesystem_Posix::read(int, void*, unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"AP_Filesystem::stat(char const*, stat*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Filesystem::stat(char const*, stat*)\n0.00%\n(0.00%)\n4×"];
	"AP_Filesystem::stat(char const*, stat*)" -> "AP_Filesystem_Posix::stat(char const*, stat*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_Filesystem::write(int, void const*, unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Filesystem::write(int, void const*, unsigned long)\n0.00%\n(0.00%)\n690×"];
	"AP_Filesystem::write(int, void const*, unsigned long)" -> "AP_Filesystem_Posix::write(int, void const*, unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n690×", labeldistance="0.50", penwidth="0.50"];
	"AP_Filesystem_Posix::close(int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Filesystem_Posix::close(int)\n0.00%\n(0.00%)\n8×"];
	"AP_Filesystem_Posix::close(int)" -> close [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"AP_Filesystem_Posix::disk_free(char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Filesystem_Posix::disk_free(char const*)\n0.00%\n(0.00%)\n156×"];
	"AP_Filesystem_Posix::disk_free(char const*)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Filesystem_Posix::disk_free(char const*)" -> statfs [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n155×", labeldistance="0.50", penwidth="0.50"];
	"AP_Filesystem_Posix::disk_space(char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Filesystem_Posix::disk_space(char const*)\n0.00%\n(0.00%)\n1×"];
	"AP_Filesystem_Posix::disk_space(char const*)" -> statfs [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Filesystem_Posix::lseek(int, long, int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Filesystem_Posix::lseek(int, long, int)\n0.00%\n(0.00%)\n14×"];
	"AP_Filesystem_Posix::lseek(int, long, int)" -> lseek [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"AP_Filesystem_Posix::mkdir(char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Filesystem_Posix::mkdir(char const*)\n0.00%\n(0.00%)\n1×"];
	"AP_Filesystem_Posix::mkdir(char const*)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Filesystem_Posix::open(char const*, int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Filesystem_Posix::open(char const*, int)\n0.00%\n(0.00%)\n10×"];
	"AP_Filesystem_Posix::open(char const*, int)" -> open [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10×", labeldistance="0.50", penwidth="0.50"];
	"AP_Filesystem_Posix::read(int, void*, unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Filesystem_Posix::read(int, void*, unsigned long)\n0.00%\n(0.00%)\n15×"];
	"AP_Filesystem_Posix::read(int, void*, unsigned long)" -> read [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"AP_Filesystem_Posix::stat(char const*, stat*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Filesystem_Posix::stat(char const*, stat*)\n0.00%\n(0.00%)\n4×"];
	"AP_Filesystem_Posix::stat(char const*, stat*)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Filesystem_Posix::stat(char const*, stat*)" -> "_xstat" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Filesystem_Posix::write(int, void const*, unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Filesystem_Posix::write(int, void const*, unsigned long)\n0.00%\n(0.00%)\n690×"];
	"AP_Filesystem_Posix::write(int, void const*, unsigned long)" -> write [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n690×", labeldistance="0.50", penwidth="0.50"];
	"AP_Follow::AP_Follow()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Follow::AP_Follow()\n0.00%\n(0.00%)\n1×"];
	"AP_Follow::AP_Follow()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Follow::AP_Follow()" -> "JitterCorrection::JitterCorrection(unsigned short, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Follow::AP_Follow()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Follow::handle_msg(__mavlink_message const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Follow::handle_msg(__mavlink_message const&)\n0.00%\n(0.00%)\n220×"];
	"AP_Frsky_Telem::AP_Frsky_Telem(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Frsky_Telem::AP_Frsky_Telem(bool)\n0.00%\n(0.00%)\n1×"];
	"AP_Frsky_Telem::AP_Frsky_Telem(bool)" -> "ByteBuffer::ByteBuffer(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Frsky_Telem::AP_Frsky_Telem(bool)" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Frsky_Telem::AP_Frsky_Telem(bool)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Frsky_Telem::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Frsky_Telem::init()\n0.00%\n(0.00%)\n1×"];
	"AP_Frsky_Telem::init()" -> "AP::serialmanager()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Frsky_Telem::init()" -> "AP_SerialManager::find_serial(AP_SerialManager::SerialProtocol, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Frsky_Telem::~AP_Frsky_Telem()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Frsky_Telem::~AP_Frsky_Telem()\n0.00%\n(0.00%)\n1×"];
	"AP_Frsky_Telem::~AP_Frsky_Telem()" -> "ByteBuffer::~ByteBuffer()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Frsky_Telem::~AP_Frsky_Telem()" -> "operator delete(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::AP_GPS()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS::AP_GPS()\n0.00%\n(0.00%)\n1×"];
	"AP_GPS::AP_GPS()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::AP_GPS()" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::AP_GPS()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::Write_AP_Logger_Log_Startup_messages()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS::Write_AP_Logger_Log_Startup_messages()\n0.00%\n(0.00%)\n1×"];
	"AP_GPS::Write_AP_Logger_Log_Startup_messages()" -> "AP_GPS_UBLOX::Write_AP_Logger_Log_Startup_messages() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::detect_instance(unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS::detect_instance(unsigned char)\n0.00%\n(0.00%)\n5×"];
	"AP_GPS::detect_instance(unsigned char)" -> "AP_GPS_Backend::broadcast_gps_type() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::detect_instance(unsigned char)" -> "AP_GPS_ERB::_detect(ERB_detect_state&, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n36×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::detect_instance(unsigned char)" -> "AP_GPS_MTK19::_detect(MTK19_detect_state&, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n36×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::detect_instance(unsigned char)" -> "AP_GPS_MTK::_detect(MTK_detect_state&, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n36×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::detect_instance(unsigned char)" -> "AP_GPS_SBP2::_detect(SBP2_detect_state&, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n36×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::detect_instance(unsigned char)" -> "AP_GPS_SBP::_detect(SBP_detect_state&, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n36×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::detect_instance(unsigned char)" -> "AP_GPS_SIRF::_detect(SIRF_detect_state&, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n36×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::detect_instance(unsigned char)" -> "AP_GPS_UBLOX::AP_GPS_UBLOX(AP_GPS&, AP_GPS::GPS_State&, AP_HAL::UARTDriver*, AP_GPS::GPS_Role)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::detect_instance(unsigned char)" -> "AP_GPS_UBLOX::_detect(UBLOX_detect_state&, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n36×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::detect_instance(unsigned char)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::detect_instance(unsigned char)" -> "HALSITL::UARTDriver::available()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n40×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::detect_instance(unsigned char)" -> "HALSITL::UARTDriver::begin(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::detect_instance(unsigned char)" -> "HALSITL::UARTDriver::read()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n36×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::detect_instance(unsigned char)" -> "HALSITL::UARTDriver::txspace()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::detect_instance(unsigned char)" -> "HALSITL::UARTDriver::write(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n97×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::detect_instance(unsigned char)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::get_antenna_offset(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS::get_antenna_offset(unsigned char) const\n0.00%\n(0.00%)\n1384×"];
	"AP_GPS::get_lag(unsigned char, float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS::get_lag(unsigned char, float&) const\n0.00%\n(0.00%)\n1794×"];
	"AP_GPS::get_lag(unsigned char, float&) const" -> "AP_GPS_UBLOX::get_lag(float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1794×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::get_rate_ms(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS::get_rate_ms(unsigned char) const\n0.00%\n(0.00%)\n1×"];
	"AP_GPS::horizontal_accuracy(unsigned char, float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS::horizontal_accuracy(unsigned char, float&) const\n0.00%\n(0.00%)\n4458×"];
	"AP_GPS::init(AP_SerialManager const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS::init(AP_SerialManager const&)\n0.00%\n(0.00%)\n1×"];
	"AP_GPS::init(AP_SerialManager const&)" -> "AP_SerialManager::find_serial(AP_SerialManager::SerialProtocol, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::init(AP_SerialManager const&)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::is_healthy(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS::is_healthy(unsigned char) const\n0.00%\n(0.00%)\n721×"];
	"AP_GPS::is_healthy(unsigned char) const" -> "AP_GPS_UBLOX::is_healthy() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n720×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::logging_failed() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS::logging_failed() const\n0.00%\n(0.00%)\n721×"];
	"AP_GPS::num_sensors() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS::num_sensors() const\n0.00%\n(0.00%)\n17110×"];
	"AP_GPS::prepare_for_arming()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS::prepare_for_arming()\n0.00%\n(0.00%)\n1×"];
	"AP_GPS::prepare_for_arming()" -> "AP_GPS_Backend::prepare_for_arming()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::send_blob_start(unsigned char, char const*, unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS::send_blob_start(unsigned char, char const*, unsigned short)\n0.00%\n(0.00%)\n1×"];
	"AP_GPS::send_mavlink_gps2_raw(mavlink_channel_t)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS::send_mavlink_gps2_raw(mavlink_channel_t)\n0.00%\n(0.00%)\n721×"];
	"AP_GPS::send_mavlink_gps_raw(mavlink_channel_t)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS::send_mavlink_gps_raw(mavlink_channel_t)\n0.01%\n(0.00%)\n721×"];
	"AP_GPS::send_mavlink_gps_raw(mavlink_channel_t)" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::send_mavlink_gps_rtk(mavlink_channel_t, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS::send_mavlink_gps_rtk(mavlink_channel_t, unsigned char)\n0.00%\n(0.00%)\n1442×"];
	"AP_GPS::send_mavlink_gps_rtk(mavlink_channel_t, unsigned char)" -> "AP_GPS_Backend::supports_mavlink_gps_rtk_message()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n720×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::speed_accuracy(unsigned char, float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS::speed_accuracy(unsigned char, float&) const\n0.00%\n(0.00%)\n4458×"];
	"AP_GPS::update()" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS::update()\n0.47%\n(0.01%)\n9008×"];
	"AP_GPS::update()" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n31×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::update()" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n870×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::update()" -> "AP::rtc()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9003×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::update()" -> "AP_AHRS_NavEKF::have_ekf_logging() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n31×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::update()" -> "AP_GPS::detect_instance(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::update()" -> "AP_GPS_UBLOX::read()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.42%\n9003×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::update()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n27014×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::update()" -> "AP_Logger::Write_GPS(unsigned char, unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n870×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::update()" -> "AP_Logger::should_log(unsigned int) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n901×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::update()" -> "AP_RTC::set_utc_usec(unsigned long, AP_RTC::source_type)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9003×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::update()" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::update()" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS::vertical_accuracy(unsigned char, float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS::vertical_accuracy(unsigned char, float&) const\n0.00%\n(0.00%)\n4458×"];
	"AP_GPS_Backend::AP_GPS_Backend(AP_GPS&, AP_GPS::GPS_State&, AP_HAL::UARTDriver*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS_Backend::AP_GPS_Backend(AP_GPS&, AP_GPS::GPS_State&, AP_HAL::UARTDriver*)\n0.00%\n(0.00%)\n1×"];
	"AP_GPS_Backend::AP_GPS_Backend(AP_GPS&, AP_GPS::GPS_State&, AP_HAL::UARTDriver*)" -> "JitterCorrection::JitterCorrection(unsigned short, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_Backend::Write_AP_Logger_Log_Startup_messages() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS_Backend::Write_AP_Logger_Log_Startup_messages() const\n0.00%\n(0.00%)\n1×"];
	"AP_GPS_Backend::Write_AP_Logger_Log_Startup_messages() const" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_Backend::Write_AP_Logger_Log_Startup_messages() const" -> "AP_GPS_UBLOX::name() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_Backend::Write_AP_Logger_Log_Startup_messages() const" -> "AP_HAL::Util::snprintf(char*, unsigned long, char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_Backend::Write_AP_Logger_Log_Startup_messages() const" -> "AP_Logger::Write_Message(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_Backend::broadcast_gps_type() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS_Backend::broadcast_gps_type() const\n0.00%\n(0.00%)\n1×"];
	"AP_GPS_Backend::broadcast_gps_type() const" -> "AP_GPS_UBLOX::name() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_Backend::broadcast_gps_type() const" -> "AP_HAL::Util::snprintf(char*, unsigned long, char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_Backend::broadcast_gps_type() const" -> "GCS::send_text(MAV_SEVERITY, char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_Backend::broadcast_gps_type() const" -> "gcs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_Backend::check_new_itow(unsigned int, unsigned int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS_Backend::check_new_itow(unsigned int, unsigned int)\n0.00%\n(0.00%)\n3622×"];
	"AP_GPS_Backend::check_new_itow(unsigned int, unsigned int)" -> "AP_GPS::get_rate_ms(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_Backend::check_new_itow(unsigned int, unsigned int)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n901×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_Backend::check_new_itow(unsigned int, unsigned int)" -> "HALSITL::UARTDriver::receive_time_constraint_us(unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n901×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_Backend::check_new_itow(unsigned int, unsigned int)" -> "JitterCorrection::correct_offboard_timestamp_usec(unsigned long, unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n901×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_Backend::check_new_itow(unsigned int, unsigned int)" -> "short constrain_value<short>(short, short, short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_Backend::prepare_for_arming()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS_Backend::prepare_for_arming()\n0.00%\n(0.00%)\n1×"];
	"AP_GPS_Backend::supports_mavlink_gps_rtk_message()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS_Backend::supports_mavlink_gps_rtk_message()\n0.00%\n(0.00%)\n720×"];
	"AP_GPS_ERB::_detect(ERB_detect_state&, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS_ERB::_detect(ERB_detect_state&, unsigned char)\n0.00%\n(0.00%)\n36×"];
	"AP_GPS_MTK19::_detect(MTK19_detect_state&, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS_MTK19::_detect(MTK19_detect_state&, unsigned char)\n0.00%\n(0.00%)\n36×"];
	"AP_GPS_MTK::_detect(MTK_detect_state&, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS_MTK::_detect(MTK_detect_state&, unsigned char)\n0.00%\n(0.00%)\n36×"];
	"AP_GPS_SBP2::_detect(SBP2_detect_state&, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS_SBP2::_detect(SBP2_detect_state&, unsigned char)\n0.00%\n(0.00%)\n36×"];
	"AP_GPS_SBP::_detect(SBP_detect_state&, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS_SBP::_detect(SBP_detect_state&, unsigned char)\n0.00%\n(0.00%)\n36×"];
	"AP_GPS_SIRF::_detect(SIRF_detect_state&, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS_SIRF::_detect(SIRF_detect_state&, unsigned char)\n0.00%\n(0.00%)\n36×"];
	"AP_GPS_UBLOX::AP_GPS_UBLOX(AP_GPS&, AP_GPS::GPS_State&, AP_HAL::UARTDriver*, AP_GPS::GPS_Role)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS_UBLOX::AP_GPS_UBLOX(AP_GPS&, AP_GPS::GPS_State&, AP_HAL::UARTDriver*, AP_GPS::GPS_Role)\n0.00%\n(0.00%)\n1×"];
	"AP_GPS_UBLOX::AP_GPS_UBLOX(AP_GPS&, AP_GPS::GPS_State&, AP_HAL::UARTDriver*, AP_GPS::GPS_Role)" -> "AP_GPS::send_blob_start(unsigned char, char const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_UBLOX::AP_GPS_UBLOX(AP_GPS&, AP_GPS::GPS_State&, AP_HAL::UARTDriver*, AP_GPS::GPS_Role)" -> "AP_GPS_Backend::AP_GPS_Backend(AP_GPS&, AP_GPS::GPS_State&, AP_HAL::UARTDriver*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_UBLOX::AP_GPS_UBLOX(AP_GPS&, AP_GPS::GPS_State&, AP_HAL::UARTDriver*, AP_GPS::GPS_Role)" -> "AP_GPS_UBLOX::_request_next_config() [clone .part.11]" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_UBLOX::AP_GPS_UBLOX(AP_GPS&, AP_GPS::GPS_State&, AP_HAL::UARTDriver*, AP_GPS::GPS_Role)" -> "HALSITL::UARTDriver::txspace()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_UBLOX::Write_AP_Logger_Log_Startup_messages() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS_UBLOX::Write_AP_Logger_Log_Startup_messages() const\n0.00%\n(0.00%)\n1×"];
	"AP_GPS_UBLOX::Write_AP_Logger_Log_Startup_messages() const" -> "AP_GPS_Backend::Write_AP_Logger_Log_Startup_messages() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_UBLOX::_detect(UBLOX_detect_state&, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS_UBLOX::_detect(UBLOX_detect_state&, unsigned char)\n0.00%\n(0.00%)\n36×"];
	"AP_GPS_UBLOX::_parse_gps()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS_UBLOX::_parse_gps()\n0.01%\n(0.00%)\n5422×"];
	"AP_GPS_UBLOX::_parse_gps()" -> "AP_GPS_Backend::check_new_itow(unsigned int, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3622×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_UBLOX::_parse_gps()" -> "AP_GPS_UBLOX::_send_message(unsigned char, unsigned char, void*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n17×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_UBLOX::_parse_gps()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n902×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_UBLOX::_parse_gps()" -> "HALSITL::UARTDriver::txspace()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n17×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_UBLOX::_parse_gps()" -> atan2f [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_UBLOX::_parse_gps()" -> "wrap_360(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n903×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_UBLOX::_request_next_config() [clone .part.11]" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS_UBLOX::_request_next_config() [clone .part.11]\n0.00%\n(0.00%)\n239×"];
	"AP_GPS_UBLOX::_request_next_config() [clone .part.11]" -> "AP_GPS_UBLOX::_send_message(unsigned char, unsigned char, void*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n239×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_UBLOX::_request_next_config() [clone .part.11]" -> "HALSITL::UARTDriver::txspace()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n239×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_UBLOX::_send_message(unsigned char, unsigned char, void*, unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS_UBLOX::_send_message(unsigned char, unsigned char, void*, unsigned short)\n0.00%\n(0.00%)\n256×"];
	"AP_GPS_UBLOX::_send_message(unsigned char, unsigned char, void*, unsigned short)" -> "HALSITL::UARTDriver::txspace()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n256×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_UBLOX::_send_message(unsigned char, unsigned char, void*, unsigned short)" -> "HALSITL::UARTDriver::write(unsigned char const*, unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1024×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_UBLOX::get_lag(float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS_UBLOX::get_lag(float&) const\n0.00%\n(0.00%)\n1794×"];
	"AP_GPS_UBLOX::is_healthy() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS_UBLOX::is_healthy() const\n0.00%\n(0.00%)\n720×"];
	"AP_GPS_UBLOX::name() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS_UBLOX::name() const\n0.00%\n(0.00%)\n2×"];
	"AP_GPS_UBLOX::read()" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GPS_UBLOX::read()\n0.42%\n(0.08%)\n9003×"];
	"AP_GPS_UBLOX::read()" -> "AP_GPS_UBLOX::_parse_gps()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n5422×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_UBLOX::read()" -> "AP_GPS_UBLOX::_request_next_config() [clone .part.11]" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n238×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_UBLOX::read()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9003×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_UBLOX::read()" -> "HALSITL::UARTDriver::available()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9003×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_UBLOX::read()" -> "HALSITL::UARTDriver::read()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.33%\n263566×", labeldistance="0.50", penwidth="0.50"];
	"AP_GPS_UBLOX::read()" -> "HALSITL::UARTDriver::txspace()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n238×", labeldistance="0.50", penwidth="0.50"];
	"AP_Gripper::AP_Gripper()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Gripper::AP_Gripper()\n0.00%\n(0.00%)\n1×"];
	"AP_Gripper::AP_Gripper()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Gripper::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Gripper::init()\n0.00%\n(0.00%)\n1×"];
	"AP_Gripper::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Gripper::update()\n0.00%\n(0.00%)\n1802×"];
	"AP_GyroFFT::AP_GyroFFT()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GyroFFT::AP_GyroFFT()\n0.00%\n(0.00%)\n1×"];
	"AP_GyroFFT::AP_GyroFFT()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GyroFFT::AP_GyroFFT()" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_GyroFFT::AP_GyroFFT()" -> "LowPassFilter<float>::LowPassFilter()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_GyroFFT::calibration_check()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GyroFFT::calibration_check()\n0.00%\n(0.00%)\n7×"];
	"AP_GyroFFT::init(unsigned int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GyroFFT::init(unsigned int)\n0.00%\n(0.00%)\n1×"];
	"AP_GyroFFT::sample_gyros()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GyroFFT::sample_gyros()\n0.01%\n(0.01%)\n72070×"];
	"AP_GyroFFT::update_freq_hover(float, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GyroFFT::update_freq_hover(float, float)\n0.00%\n(0.00%)\n14×"];
	"AP_GyroFFT::update_parameters()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GyroFFT::update_parameters()\n0.00%\n(0.00%)\n180×"];
	"AP_GyroFFT::write_log_messages()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_GyroFFT::write_log_messages()\n0.00%\n(0.00%)\n1740×"];
	"AP_HAL::BetterStream::printf(char const*, ...)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_HAL::BetterStream::printf(char const*, ...)\n0.00%\n(0.00%)\n9×"];
	"AP_HAL::BetterStream::printf(char const*, ...)" -> "print_vprintf(AP_HAL::BetterStream*, char const*, __va_list_tag*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9×", labeldistance="0.50", penwidth="0.50"];
	"AP_HAL::Scheduler::boost_end()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_HAL::Scheduler::boost_end()\n0.00%\n(0.00%)\n72070×"];
	"AP_HAL::Scheduler::call_delay_cb()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_HAL::Scheduler::call_delay_cb()\n0.09%\n(0.00%)\n1144×"];
	"AP_HAL::Scheduler::call_delay_cb()" -> "AP_Vehicle::scheduler_delay_callback()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.09%\n1133×", labeldistance="0.50", penwidth="0.50"];
	"AP_HAL::Scheduler::register_delay_callback(void (*)(), unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_HAL::Scheduler::register_delay_callback(void (*)(), unsigned short)\n0.00%\n(0.00%)\n1×"];
	"AP_HAL::Util::perf_begin(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_HAL::Util::perf_begin(void*)\n0.00%\n(0.00%)\n509457×"];
	"AP_HAL::Util::perf_end(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_HAL::Util::perf_end(void*)\n0.00%\n(0.00%)\n689×"];
	"AP_HAL::Util::set_hw_rtc(unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_HAL::Util::set_hw_rtc(unsigned long)\n0.00%\n(0.00%)\n1×"];
	"AP_HAL::Util::set_soft_armed(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_HAL::Util::set_soft_armed(bool)\n0.00%\n(0.00%)\n2×"];
	"AP_HAL::Util::set_soft_armed(bool)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_HAL::Util::set_soft_armed(bool)" -> "HALSITL::Util::was_watchdog_reset() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_HAL::Util::snprintf(char*, unsigned long, char const*, ...)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_HAL::Util::snprintf(char*, unsigned long, char const*, ...)\n0.00%\n(0.00%)\n6×"];
	"AP_HAL::Util::snprintf(char*, unsigned long, char const*, ...)" -> "print_vprintf(AP_HAL::BetterStream*, char const*, __va_list_tag*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_HAL::Util::vsnprintf(char*, unsigned long, char const*, __va_list_tag*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_HAL::Util::vsnprintf(char*, unsigned long, char const*, __va_list_tag*)\n0.00%\n(0.00%)\n24×"];
	"AP_HAL::Util::vsnprintf(char*, unsigned long, char const*, __va_list_tag*)" -> "print_vprintf(AP_HAL::BetterStream*, char const*, __va_list_tag*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n24×", labeldistance="0.50", penwidth="0.50"];
	"AP_HAL::get_HAL()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_HAL::get_HAL()\n0.00%\n(0.00%)\n1×"];
	"AP_HAL::get_HAL()" -> "AP_HAL::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_HAL::get_HAL()" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_HAL::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_HAL::init()\n0.00%\n(0.00%)\n1×"];
	"AP_HAL::init()" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_HAL::micros()" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_HAL::micros()\n0.41%\n(0.41%)\n3138449×"];
	"AP_HAL::micros64()" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_HAL::micros64()\n1.13%\n(1.13%)\n8623589×"];
	"AP_HAL::millis()" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_HAL::millis()\n1.14%\n(1.14%)\n6412813×"];
	"AP_HAL::millis()" -> "__gettimeofday_syscall" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_HAL::millis16()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_HAL::millis16()\n0.06%\n(0.06%)\n359574×"];
	"AP_Hott_Telem::AP_Hott_Telem()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Hott_Telem::AP_Hott_Telem()\n0.00%\n(0.00%)\n1×"];
	"AP_Hott_Telem::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Hott_Telem::init()\n0.00%\n(0.00%)\n1×"];
	"AP_Hott_Telem::init()" -> "AP::serialmanager()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Hott_Telem::init()" -> "AP_SerialManager::find_serial(AP_SerialManager::SerialProtocol, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialNav_NavEKF::get_altitude() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialNav_NavEKF::get_altitude() const\n0.00%\n(0.00%)\n130565×"];
	"AP_InertialNav_NavEKF::get_filter_status() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialNav_NavEKF::get_filter_status() const\n0.04%\n(0.01%)\n90300×"];
	"AP_InertialNav_NavEKF::get_filter_status() const" -> "AP_AHRS_NavEKF::get_filter_status(nav_filter_status&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n90300×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialNav_NavEKF::get_position() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialNav_NavEKF::get_position() const\n0.00%\n(0.00%)\n97731×"];
	"AP_InertialNav_NavEKF::get_velocity() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialNav_NavEKF::get_velocity() const\n0.00%\n(0.00%)\n202330×"];
	"AP_InertialNav_NavEKF::get_velocity_z() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialNav_NavEKF::get_velocity_z() const\n0.00%\n(0.00%)\n90015×"];
	"AP_InertialNav_NavEKF::update(bool)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialNav_NavEKF::update(bool)\n0.38%\n(0.04%)\n72070×"];
	"AP_InertialNav_NavEKF::update(bool)" -> "AP_AHRS_NavEKF::get_relative_position_D_origin(float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.11%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialNav_NavEKF::update(bool)" -> "AP_AHRS_NavEKF::get_relative_position_NE_origin(Vector2<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialNav_NavEKF::update(bool)" -> "AP_AHRS_NavEKF::get_velocity_NED(Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.11%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialNav_NavEKF::update(bool)" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72022×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::AP_InertialSensor()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::AP_InertialSensor()\n0.00%\n(0.00%)\n1×"];
	"AP_InertialSensor::AP_InertialSensor()" -> "AP_AccelCal::register_client(AP_AccelCal_Client*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::AP_InertialSensor()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::AP_InertialSensor()" -> "HarmonicNotchFilterParams::HarmonicNotchFilterParams()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::AP_InertialSensor()" -> "LowPassFilter2p<Vector3<float> >::LowPassFilter2p()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::AP_InertialSensor()" -> "LowPassFilter<Vector3<float> >::LowPassFilter()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::AP_InertialSensor()" -> "LowPassFilter<Vector3<float> >::set_cutoff_frequency(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::AP_InertialSensor()" -> "NotchFilterParams::NotchFilterParams()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::BatchSampler::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::BatchSampler::init()\n0.00%\n(0.00%)\n1×"];
	"AP_InertialSensor::BatchSampler::periodic()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::BatchSampler::periodic()\n0.00%\n(0.00%)\n72070×"];
	"AP_InertialSensor::BatchSampler::sample(unsigned char, AP_InertialSensor::IMU_SENSOR_TYPE, unsigned long, Vector3<float> const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::BatchSampler::sample(unsigned char, AP_InertialSensor::IMU_SENSOR_TYPE, unsigned long, Vector3<float> const&)\n0.02%\n(0.02%)\n644268×"];
	"AP_InertialSensor::_init_gyro()" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::_init_gyro()\n0.22%\n(0.00%)\n1×"];
	"AP_InertialSensor::_init_gyro()" -> "AP_HAL::BetterStream::printf(char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::_init_gyro()" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n150×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::_init_gyro()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n150×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::_init_gyro()" -> "AP_InertialSensor::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::_init_gyro()" -> "AP_InertialSensor::wait_for_sample() [clone .part.13] [clone .constprop.22]" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n150×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::_init_gyro()" -> "AP_InertialSensor_SITL::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n300×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::_init_gyro()" -> "ExpectDelay::ExpectDelay(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::_init_gyro()" -> "ExpectDelay::~ExpectDelay()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::_init_gyro()" -> "HALSITL::Scheduler::delay(unsigned short)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.22%\n155×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::_init_gyro()" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::_init_gyro()" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::_init_gyro()" -> "Vector3<float>::operator+(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::_init_gyro()" -> "Vector3<float>::operator+=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n300×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::_init_gyro()" -> "Vector3<float>::operator-(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::_init_gyro()" -> "Vector3<float>::operator/(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::acal_update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::acal_update()\n0.00%\n(0.00%)\n62×"];
	"AP_InertialSensor::accel_calibrated_ok_all() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::accel_calibrated_ok_all() const\n0.00%\n(0.00%)\n722×"];
	"AP_InertialSensor::accel_calibrated_ok_all() const" -> "std::enable_if<std::is_floating_point<std::common_type<float, float>::type>::value, bool>::type is_equal<float, float>(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2166×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::calc_vibration_and_clipping(unsigned char, Vector3<float> const&, float)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::calc_vibration_and_clipping(unsigned char, Vector3<float> const&, float)\n0.81%\n(0.21%)\n325712×"];
	"AP_InertialSensor::calc_vibration_and_clipping(unsigned char, Vector3<float> const&, float)" -> "LowPassFilter<Vector3<float> >::apply(Vector3<float>, float)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.57%\n651424×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::calc_vibration_and_clipping(unsigned char, Vector3<float> const&, float)" -> "Vector3<float>::operator-(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n325712×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::detect_backends() [clone .part.14] [clone .constprop.18]" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::detect_backends() [clone .part.14] [clone .constprop.18]\n0.00%\n(0.00%)\n1×"];
	"AP_InertialSensor::detect_backends() [clone .part.14] [clone .constprop.18]" -> "AP_InertialSensor_SITL::detect(AP_InertialSensor&, unsigned short const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::get_accel_clip_count(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::get_accel_clip_count(unsigned char) const\n0.00%\n(0.00%)\n7383×"];
	"AP_InertialSensor::get_accel_health_all() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::get_accel_health_all() const\n0.00%\n(0.00%)\n728×"];
	"AP_InertialSensor::get_delta_angle(unsigned char, Vector3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::get_delta_angle(unsigned char, Vector3<float>&) const\n0.03%\n(0.03%)\n287482×"];
	"AP_InertialSensor::get_delta_angle_dt(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::get_delta_angle_dt(unsigned char) const\n0.01%\n(0.01%)\n143342×"];
	"AP_InertialSensor::get_delta_velocity(unsigned char, Vector3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::get_delta_velocity(unsigned char, Vector3<float>&) const\n0.04%\n(0.04%)\n359552×"];
	"AP_InertialSensor::get_delta_velocity_dt(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::get_delta_velocity_dt(unsigned char) const\n0.02%\n(0.02%)\n359552×"];
	"AP_InertialSensor::get_gyro_health_all() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::get_gyro_health_all() const\n0.00%\n(0.00%)\n728×"];
	"AP_InertialSensor::get_new_trim(float&, float&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::get_new_trim(float&, float&)\n0.00%\n(0.00%)\n62×"];
	"AP_InertialSensor::get_singleton()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::get_singleton()\n0.00%\n(0.00%)\n1×"];
	"AP_InertialSensor::get_vibration_levels(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::get_vibration_levels(unsigned char) const\n0.00%\n(0.00%)\n2461×"];
	"AP_InertialSensor::get_vibration_levels(unsigned char) const" -> "LowPassFilter<Vector3<float> >::get() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2461×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::get_vibration_levels(unsigned char) const" -> "float safe_sqrt<float>(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7383×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::gyro_calibrated_ok_all() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::gyro_calibrated_ok_all() const\n0.00%\n(0.00%)\n728×"];
	"AP_InertialSensor::init(unsigned short)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::init(unsigned short)\n0.22%\n(0.00%)\n1×"];
	"AP_InertialSensor::init(unsigned short)" -> "AP_InertialSensor::BatchSampler::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::init(unsigned short)" -> "AP_InertialSensor::_init_gyro()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.22%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::init(unsigned short)" -> "AP_InertialSensor::detect_backends() [clone .part.14] [clone .constprop.18]" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::init(unsigned short)" -> "AP_InertialSensor_SITL::start()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::init(unsigned short)" -> "AP_Param::save(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::init(unsigned short)" -> "HALSITL::Util::was_watchdog_reset() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::init(unsigned short)" -> "HarmonicNotchFilter<Vector3<float> >::allocate_filters(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::init(unsigned short)" -> "HarmonicNotchFilter<Vector3<float> >::init(float, float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::init(unsigned short)" -> "Vector3<float>::operator!=(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::periodic()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::periodic()\n0.00%\n(0.00%)\n72070×"];
	"AP_InertialSensor::periodic()" -> "AP_InertialSensor::BatchSampler::periodic()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::register_accel(unsigned short, unsigned int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::register_accel(unsigned short, unsigned int)\n0.00%\n(0.00%)\n2×"];
	"AP_InertialSensor::register_accel(unsigned short, unsigned int)" -> "AP_Param::load()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::register_accel(unsigned short, unsigned int)" -> "AP_Param::save(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::register_gyro(unsigned short, unsigned int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::register_gyro(unsigned short, unsigned int)\n0.00%\n(0.00%)\n2×"];
	"AP_InertialSensor::register_gyro(unsigned short, unsigned int)" -> "AP_Param::load()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::set_accel_peak_hold(unsigned char, Vector3<float> const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::set_accel_peak_hold(unsigned char, Vector3<float> const&)\n0.07%\n(0.03%)\n325712×"];
	"AP_InertialSensor::set_accel_peak_hold(unsigned char, Vector3<float> const&)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n180951×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::update()" [color="#0d1375", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::update()\n1.45%\n(0.11%)\n72075×"];
	"AP_InertialSensor::update()" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72075×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::update()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n497×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::update()" -> "AP_InertialSensor::wait_for_sample() [clone .part.13] [clone .constprop.22]" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::update()" -> "AP_InertialSensor_SITL::update()" [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.33%\n144150×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::use_accel(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::use_accel(unsigned char) const\n0.09%\n(0.09%)\n861662×"];
	"AP_InertialSensor::use_gyro(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::use_gyro(unsigned char) const\n0.07%\n(0.07%)\n717522×"];
	"AP_InertialSensor::wait_for_sample()" [color="#0b9f6b", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::wait_for_sample()\n33.79%\n(0.09%)\n72070×"];
	"AP_InertialSensor::wait_for_sample()" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n216209×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::wait_for_sample()" -> "AP_InertialSensor_Backend::accumulate()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n144140×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::wait_for_sample()" -> "HALSITL::Scheduler::delay_microseconds(unsigned short)" [arrowsize="0.58", color="#0b9f6c", fontcolor="#0b9f6c", fontsize="10.00", label="33.67%\n72069×", labeldistance="1.35", penwidth="1.35"];
	"AP_InertialSensor::wait_for_sample() [clone .part.13] [clone .constprop.22]" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor::wait_for_sample() [clone .part.13] [clone .constprop.22]\n0.00%\n(0.00%)\n155×"];
	"AP_InertialSensor::wait_for_sample() [clone .part.13] [clone .constprop.22]" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n311×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::wait_for_sample() [clone .part.13] [clone .constprop.22]" -> "AP_InertialSensor_Backend::accumulate()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n314×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor::wait_for_sample() [clone .part.13] [clone .constprop.22]" -> "HALSITL::Scheduler::delay_microseconds(unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::AP_InertialSensor_Backend(AP_InertialSensor&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_Backend::AP_InertialSensor_Backend(AP_InertialSensor&)\n0.00%\n(0.00%)\n2×"];
	"AP_InertialSensor_Backend::AP_InertialSensor_Backend(AP_InertialSensor&)" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_accel_raw_sample(unsigned char, Vector3<float> const&, unsigned long, bool)" [color="#0d1876", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_Backend::_notify_new_accel_raw_sample(unsigned char, Vector3<float> const&, unsigned long, bool)\n2.71%\n(0.44%)\n325712×"];
	"AP_InertialSensor_Backend::_notify_new_accel_raw_sample(unsigned char, Vector3<float> const&, unsigned long, bool)" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n325712×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_accel_raw_sample(unsigned char, Vector3<float> const&, unsigned long, bool)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.09%\n651424×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_accel_raw_sample(unsigned char, Vector3<float> const&, unsigned long, bool)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n360×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_accel_raw_sample(unsigned char, Vector3<float> const&, unsigned long, bool)" -> "AP_InertialSensor::calc_vibration_and_clipping(unsigned char, Vector3<float> const&, float)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.81%\n325712×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_accel_raw_sample(unsigned char, Vector3<float> const&, unsigned long, bool)" -> "AP_InertialSensor::set_accel_peak_hold(unsigned char, Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n325712×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_accel_raw_sample(unsigned char, Vector3<float> const&, unsigned long, bool)" -> "AP_InertialSensor_Backend::log_accel_raw(unsigned char, unsigned long, Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.16%\n325712×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_accel_raw_sample(unsigned char, Vector3<float> const&, unsigned long, bool)" -> "LowPassFilter2p<Vector3<float> >::apply(Vector3<float> const&)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.55%\n325712×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_accel_raw_sample(unsigned char, Vector3<float> const&, unsigned long, bool)" -> "Vector3<float>::is_inf() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n325712×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_accel_raw_sample(unsigned char, Vector3<float> const&, unsigned long, bool)" -> "Vector3<float>::is_nan() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n325712×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_accel_raw_sample(unsigned char, Vector3<float> const&, unsigned long, bool)" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n325712×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_accel_raw_sample(unsigned char, Vector3<float> const&, unsigned long, bool)" -> "Vector3<float>::operator+=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n325712×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_accel_raw_sample(unsigned char, Vector3<float> const&, unsigned long, bool)" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.29%\n325712×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_accel_raw_sample(unsigned char, Vector3<float> const&, unsigned long, bool)" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n325712×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_accel_raw_sample(unsigned char, Vector3<float> const&, unsigned long, bool)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n360×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_accel_sensor_rate_sample(unsigned char, Vector3<float> const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_Backend::_notify_new_accel_sensor_rate_sample(unsigned char, Vector3<float> const&)\n0.03%\n(0.03%)\n868565×"];
	"AP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)" [color="#0d1676", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)\n2.24%\n(0.62%)\n318556×"];
	"AP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n318556×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n637112×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n360×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)" -> "AP_InertialSensor_Backend::log_gyro_raw(unsigned char, unsigned long, Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.16%\n318556×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)" -> "Empty::OpticalFlow::push_gyro(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n318556×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)" -> "LowPassFilter2p<Vector3<float> >::apply(Vector3<float> const&)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.54%\n318556×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)" -> "Vector3<float>::is_inf() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n318556×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)" -> "Vector3<float>::is_nan() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n318556×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)" -> "Vector3<float>::operator%(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n318556×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.11%\n1274224×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)" -> "Vector3<float>::operator*=(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n318556×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)" -> "Vector3<float>::operator+(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.09%\n955668×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)" -> "Vector3<float>::operator+=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n318556×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.29%\n318556×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n318556×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n360×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_notify_new_gyro_sensor_rate_sample(unsigned char, Vector3<float> const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_Backend::_notify_new_gyro_sensor_rate_sample(unsigned char, Vector3<float> const&)\n0.06%\n(0.06%)\n1585213×"];
	"AP_InertialSensor_Backend::_publish_accel(unsigned char, Vector3<float> const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_Backend::_publish_accel(unsigned char, Vector3<float> const&)\n0.06%\n(0.06%)\n144450×"];
	"AP_InertialSensor_Backend::_publish_temperature(unsigned char, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_Backend::_publish_temperature(unsigned char, float)\n0.02%\n(0.02%)\n325712×"];
	"AP_InertialSensor_Backend::_rotate_and_correct_accel(unsigned char, Vector3<float>&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_Backend::_rotate_and_correct_accel(unsigned char, Vector3<float>&)\n0.17%\n(0.11%)\n325712×"];
	"AP_InertialSensor_Backend::_rotate_and_correct_accel(unsigned char, Vector3<float>&)" -> "Vector3<float>::operator-=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n325712×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_rotate_and_correct_accel(unsigned char, Vector3<float>&)" -> "Vector3<float>::rotate(Rotation)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n651424×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_rotate_and_correct_gyro(unsigned char, Vector3<float>&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_Backend::_rotate_and_correct_gyro(unsigned char, Vector3<float>&)\n0.13%\n(0.07%)\n318556×"];
	"AP_InertialSensor_Backend::_rotate_and_correct_gyro(unsigned char, Vector3<float>&)" -> "Vector3<float>::operator-=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n318556×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::_rotate_and_correct_gyro(unsigned char, Vector3<float>&)" -> "Vector3<float>::rotate(Rotation)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n637112×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::accumulate()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_Backend::accumulate()\n0.00%\n(0.00%)\n144454×"];
	"AP_InertialSensor_Backend::log_accel_raw(unsigned char, unsigned long, Vector3<float> const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_Backend::log_accel_raw(unsigned char, unsigned long, Vector3<float> const&)\n0.16%\n(0.13%)\n325712×"];
	"AP_InertialSensor_Backend::log_accel_raw(unsigned char, unsigned long, Vector3<float> const&)" -> "AP_InertialSensor::BatchSampler::sample(unsigned char, AP_InertialSensor::IMU_SENSOR_TYPE, unsigned long, Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n325712×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::log_accel_raw(unsigned char, unsigned long, Vector3<float> const&)" -> "AP_Logger::should_log(unsigned int) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n324312×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::log_gyro_raw(unsigned char, unsigned long, Vector3<float> const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_Backend::log_gyro_raw(unsigned char, unsigned long, Vector3<float> const&)\n0.16%\n(0.13%)\n318556×"];
	"AP_InertialSensor_Backend::log_gyro_raw(unsigned char, unsigned long, Vector3<float> const&)" -> "AP_InertialSensor::BatchSampler::sample(unsigned char, AP_InertialSensor::IMU_SENSOR_TYPE, unsigned long, Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n318556×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::log_gyro_raw(unsigned char, unsigned long, Vector3<float> const&)" -> "AP_Logger::should_log(unsigned int) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n317186×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::update_accel(unsigned char)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_Backend::update_accel(unsigned char)\n0.32%\n(0.05%)\n144450×"];
	"AP_InertialSensor_Backend::update_accel(unsigned char)" -> "AP_InertialSensor_Backend::_publish_accel(unsigned char, Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n144450×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::update_accel(unsigned char)" -> "LowPassFilter2p<Vector3<float> >::set_cutoff_frequency(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::update_accel(unsigned char)" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.15%\n144450×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::update_accel(unsigned char)" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n144450×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::update_gyro(unsigned char)" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_Backend::update_gyro(unsigned char)\n1.00%\n(0.16%)\n144450×"];
	"AP_InertialSensor_Backend::update_gyro(unsigned char)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n433344×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::update_gyro(unsigned char)" -> "HarmonicNotchFilter<Vector3<float> >::init(float, float, float, float)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.25%\n22286×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::update_gyro(unsigned char)" -> "LowPassFilter2p<Vector3<float> >::set_cutoff_frequency(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n22286×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::update_gyro(unsigned char)" -> "NotchFilter<Vector3<float> >::init(float, float, float, float)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.22%\n22286×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::update_gyro(unsigned char)" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n144450×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::update_gyro(unsigned char)" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.15%\n144450×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::update_gyro(unsigned char)" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n144450×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_Backend::update_gyro(unsigned char)" -> "std::enable_if<std::is_floating_point<std::common_type<float, float>::type>::value, bool>::type is_equal<float, float>(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n844408×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::detect(AP_InertialSensor&, unsigned short const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_SITL::detect(AP_InertialSensor&, unsigned short const*)\n0.00%\n(0.00%)\n2×"];
	"AP_InertialSensor_SITL::detect(AP_InertialSensor&, unsigned short const*)" -> "AP::sitl()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::detect(AP_InertialSensor&, unsigned short const*)" -> "AP_InertialSensor_Backend::AP_InertialSensor_Backend(AP_InertialSensor&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::detect(AP_InertialSensor&, unsigned short const*)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_accel()" [color="#0d2e7c", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_SITL::generate_accel()\n7.43%\n(1.45%)\n325712×"];
	"AP_InertialSensor_SITL::generate_accel()" -> "AP_InertialSensor_Backend::_notify_new_accel_raw_sample(unsigned char, Vector3<float> const&, unsigned long, bool)" [arrowsize="0.35", color="#0d1876", fontcolor="#0d1876", fontsize="10.00", label="2.71%\n325712×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_accel()" -> "AP_InertialSensor_Backend::_notify_new_accel_sensor_rate_sample(unsigned char, Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n868565×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_accel()" -> "AP_InertialSensor_Backend::_publish_temperature(unsigned char, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n325712×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_accel()" -> "AP_InertialSensor_Backend::_rotate_and_correct_accel(unsigned char, Vector3<float>&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.17%\n325712×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_accel()" -> "Vector3<float>::operator+=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.09%\n868565×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_accel()" -> "Vector3<float>::operator/=(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n325712×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_accel()" -> "rand_float()" [arrowsize="0.35", color="#0d1976", fontcolor="#0d1976", fontsize="10.00", label="2.93%\n5211390×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_gyro()" [color="#0d4f85", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_SITL::generate_gyro()\n13.78%\n(3.80%)\n318556×"];
	"AP_InertialSensor_SITL::generate_gyro()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.62%\n4755639×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_gyro()" -> "AP_InertialSensor_Backend::_notify_new_gyro_raw_sample(unsigned char, Vector3<float> const&, unsigned long)" [arrowsize="0.35", color="#0d1676", fontcolor="#0d1676", fontsize="10.00", label="2.24%\n318556×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_gyro()" -> "AP_InertialSensor_Backend::_notify_new_gyro_sensor_rate_sample(unsigned char, Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n1585213×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_gyro()" -> "AP_InertialSensor_Backend::_rotate_and_correct_gyro(unsigned char, Vector3<float>&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.13%\n318556×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_gyro()" -> "Vector3<float>::operator+=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.16%\n1585213×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_gyro()" -> "Vector3<float>::operator/=(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n318556×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_gyro()" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_gyro()" -> fmod [arrowsize="0.35", color="#0d1275", fontcolor="#0d1275", fontsize="10.00", label="1.38%\n4755638×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::generate_gyro()" -> "rand_float()" [arrowsize="0.35", color="#0d247a", fontcolor="#0d247a", fontsize="10.00", label="5.34%\n9511278×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::start()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_SITL::start()\n0.00%\n(0.00%)\n2×"];
	"AP_InertialSensor_SITL::start()" -> "AP_InertialSensor::register_accel(unsigned short, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::start()" -> "AP_InertialSensor::register_gyro(unsigned short, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::start()" -> "HALSITL::Scheduler::register_timer_process(Functor<void>)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::update()" [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_InertialSensor_SITL::update()\n1.34%\n(0.01%)\n144450×"];
	"AP_InertialSensor_SITL::update()" -> "AP_InertialSensor_Backend::update_accel(unsigned char)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.32%\n144450×", labeldistance="0.50", penwidth="0.50"];
	"AP_InertialSensor_SITL::update()" -> "AP_InertialSensor_Backend::update_gyro(unsigned char)" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.00%\n144450×", labeldistance="0.50", penwidth="0.50"];
	"AP_LTM_Telem::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_LTM_Telem::init()\n0.00%\n(0.00%)\n1×"];
	"AP_LTM_Telem::init()" -> "AP::serialmanager()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_LTM_Telem::init()" -> "AP_SerialManager::find_serial(AP_SerialManager::SerialProtocol, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_LandingGear::deploy_for_landing()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_LandingGear::deploy_for_landing()\n0.00%\n(0.00%)\n1×"];
	"AP_LandingGear::deploy_for_landing()" -> "SRV_Channels::function_assigned(SRV_Channel::Aux_servo_function_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_LandingGear::deploy_for_landing()" -> "SRV_Channels::set_output_limit(SRV_Channel::Aux_servo_function_t, SRV_Channel::Limit)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_LandingGear::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_LandingGear::init()\n0.00%\n(0.00%)\n1×"];
	"AP_LandingGear::init()" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_LandingGear::init()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_LandingGear::init()" -> "AP_Logger::Write(char const*, char const*, char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_LandingGear::init()" -> "HALSITL::GPIO::pinMode(unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_LandingGear::init()" -> "HALSITL::GPIO::write(unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::AP_Logger(AP_ParamT<int, (ap_var_type)3> const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::AP_Logger(AP_ParamT<int, (ap_var_type)3> const&)\n0.00%\n(0.00%)\n1×"];
	"AP_Logger::AP_Logger(AP_ParamT<int, (ap_var_type)3> const&)" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::AP_Logger(AP_ParamT<int, (ap_var_type)3> const&)" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::CardInserted()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::CardInserted()\n0.00%\n(0.00%)\n7×"];
	"AP_Logger::CardInserted()" -> "AP_Logger_File::CardInserted() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Init(LogStructure const*, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Init(LogStructure const*, unsigned char)\n0.00%\n(0.00%)\n1×"];
	"AP_Logger::Init(LogStructure const*, unsigned char)" -> "AP_Logger::validate_structures(LogStructure const*, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Init(LogStructure const*, unsigned char)" -> "AP_Logger_File::AP_Logger_File(AP_Logger&, LoggerMessageWriter_DFLogStart*, char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Init(LogStructure const*, unsigned char)" -> "AP_Logger_File::Init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Init(LogStructure const*, unsigned char)" -> "AP_Logger_File::Prep()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Init(LogStructure const*, unsigned char)" -> "HALSITL::Util::was_watchdog_reset() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Init(LogStructure const*, unsigned char)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::PrepForArming()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::PrepForArming()\n0.00%\n(0.00%)\n1×"];
	"AP_Logger::PrepForArming()" -> "AP_Logger_File::PrepForArming()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write(char const*, char const*, char const*, ...)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write(char const*, char const*, char const*, ...)\n0.03%\n(0.00%)\n1741×"];
	"AP_Logger::Write(char const*, char const*, char const*, ...)" -> "AP_Logger::WriteV(char const*, char const*, char const*, char const*, char const*, __va_list_tag*, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n1741×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write(char const*, char const*, char const*, char const*, char const*, ...)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write(char const*, char const*, char const*, char const*, char const*, ...)\n0.03%\n(0.00%)\n1305×"];
	"AP_Logger::Write(char const*, char const*, char const*, char const*, char const*, ...)" -> "AP_Logger::WriteV(char const*, char const*, char const*, char const*, char const*, __va_list_tag*, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n1305×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::WriteBlock(void const*, unsigned short)" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::WriteBlock(void const*, unsigned short)\n0.44%\n(0.02%)\n60943×"];
	"AP_Logger::WriteBlock(void const*, unsigned short)" -> "AP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.43%\n60943×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::WriteCriticalBlock(void const*, unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::WriteCriticalBlock(void const*, unsigned short)\n0.00%\n(0.00%)\n194×"];
	"AP_Logger::WriteCriticalBlock(void const*, unsigned short)" -> "AP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n194×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::WriteV(char const*, char const*, char const*, char const*, char const*, __va_list_tag*, bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::WriteV(char const*, char const*, char const*, char const*, char const*, __va_list_tag*, bool)\n0.06%\n(0.00%)\n3046×"];
	"AP_Logger::WriteV(char const*, char const*, char const*, char const*, char const*, __va_list_tag*, bool)" -> "AP_Logger::msg_fmt_for_name(char const*, char const*, char const*, char const*, char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n3046×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::WriteV(char const*, char const*, char const*, char const*, char const*, __va_list_tag*, bool)" -> "AP_Logger_Backend::Write(unsigned char, __va_list_tag*, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n3045×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::WriteV(char const*, char const*, char const*, char const*, char const*, __va_list_tag*, bool)" -> "AP_Logger_Backend::Write_Emit_FMT(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_AHRS2()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_AHRS2()\n0.02%\n(0.00%)\n1740×"];
	"AP_Logger::Write_AHRS2()" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_AHRS2()" -> "AP_AHRS_NavEKF::get_secondary_attitude(Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_AHRS2()" -> "AP_AHRS_NavEKF::get_secondary_position(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_AHRS2()" -> "AP_AHRS_NavEKF::get_secondary_quaternion(Quaternion&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_AHRS2()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_AHRS2()" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_AHRS2()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_AHRS2()" -> "wrap_360_cd(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Attitude(Vector3<float> const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_Attitude(Vector3<float> const&)\n0.01%\n(0.00%)\n1740×"];
	"AP_Logger::Write_Attitude(Vector3<float> const&)" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Attitude(Vector3<float> const&)" -> "AP_AHRS_NavEKF::get_error_rp() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Attitude(Vector3<float> const&)" -> "AP_AHRS_NavEKF::get_error_yaw() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Attitude(Vector3<float> const&)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Attitude(Vector3<float> const&)" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Attitude(Vector3<float> const&)" -> "wrap_360_cd(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Attitude(Vector3<float> const&)" -> "wrap_360_cd(int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Baro(unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_Baro(unsigned long)\n0.01%\n(0.00%)\n1740×"];
	"AP_Logger::Write_Baro(unsigned long)" -> "AP::baro()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Baro(unsigned long)" -> "AP_Baro::get_climb_rate()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Baro(unsigned long)" -> "AP_Baro::get_ground_temperature() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Baro(unsigned long)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Baro(unsigned long)" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Beacon(AP_Beacon&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_Beacon(AP_Beacon&)\n0.00%\n(0.00%)\n1740×"];
	"AP_Logger::Write_Beacon(AP_Beacon&)" -> "AP_Beacon::enabled()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Command(__mavlink_command_int_t const&, MAV_RESULT, bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_Command(__mavlink_command_int_t const&, MAV_RESULT, bool)\n0.00%\n(0.00%)\n1×"];
	"AP_Logger::Write_Command(__mavlink_command_int_t const&, MAV_RESULT, bool)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Command(__mavlink_command_int_t const&, MAV_RESULT, bool)" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Compass(unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_Compass(unsigned long)\n0.05%\n(0.00%)\n1740×"];
	"AP_Logger::Write_Compass(unsigned long)" -> "AP::compass()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Compass(unsigned long)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Compass(unsigned long)" -> "AP_Logger::Write_Compass_instance(unsigned long, unsigned char, LogMessages)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n5220×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Compass_instance(unsigned long, unsigned char, LogMessages)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_Compass_instance(unsigned long, unsigned char, LogMessages)\n0.05%\n(0.00%)\n5220×"];
	"AP_Logger::Write_Compass_instance(unsigned long, unsigned char, LogMessages)" -> "AP::compass()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5220×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Compass_instance(unsigned long, unsigned char, LogMessages)" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n5220×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Compass_instance(unsigned long, unsigned char, LogMessages)" -> "Compass::_get_state_id(typesafe_index<unsigned char, TAG_Priority>) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n26100×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Current()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_Current()\n0.01%\n(0.00%)\n1740×"];
	"AP_Logger::Write_Current()" -> "AP::battery()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Current()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Current()" -> "AP_Logger::Write_Current_instance(unsigned long, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Current_instance(unsigned long, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_Current_instance(unsigned long, unsigned char)\n0.01%\n(0.00%)\n1740×"];
	"AP_Logger::Write_Current_instance(unsigned long, unsigned char)" -> "AP::battery()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Current_instance(unsigned long, unsigned char)" -> "AP_BattMonitor::consumed_mah(float&, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Current_instance(unsigned long, unsigned char)" -> "AP_BattMonitor::consumed_wh(float&, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Current_instance(unsigned long, unsigned char)" -> "AP_BattMonitor::current_amps(float&, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Current_instance(unsigned long, unsigned char)" -> "AP_BattMonitor::get_temperature(float&, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Current_instance(unsigned long, unsigned char)" -> "AP_BattMonitor::has_cell_voltages(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Current_instance(unsigned long, unsigned char)" -> "AP_BattMonitor::voltage(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Current_instance(unsigned long, unsigned char)" -> "AP_BattMonitor::voltage_resting_estimate(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Current_instance(unsigned long, unsigned char)" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Error(LogErrorSubsystem, LogErrorCode)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_Error(LogErrorSubsystem, LogErrorCode)\n0.00%\n(0.00%)\n7×"];
	"AP_Logger::Write_Error(LogErrorSubsystem, LogErrorCode)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Error(LogErrorSubsystem, LogErrorCode)" -> "AP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Event(LogEvent)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_Event(LogEvent)\n0.00%\n(0.00%)\n11×"];
	"AP_Logger::Write_Event(LogEvent)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n11×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Event(LogEvent)" -> "AP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n11×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_GPS(unsigned char, unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_GPS(unsigned char, unsigned long)\n0.01%\n(0.00%)\n870×"];
	"AP_Logger::Write_GPS(unsigned char, unsigned long)" -> "AP::gps()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n870×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_GPS(unsigned char, unsigned long)" -> "AP_GPS::horizontal_accuracy(unsigned char, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n870×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_GPS(unsigned char, unsigned long)" -> "AP_GPS::speed_accuracy(unsigned char, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n870×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_GPS(unsigned char, unsigned long)" -> "AP_GPS::vertical_accuracy(unsigned char, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n870×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_GPS(unsigned char, unsigned long)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n870×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_GPS(unsigned char, unsigned long)" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_IMU()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_IMU()\n0.06%\n(0.01%)\n4349×"];
	"AP_Logger::Write_IMU()" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n13047×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_IMU()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4349×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_IMU()" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n8698×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Message(char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_Message(char const*)\n0.00%\n(0.00%)\n22×"];
	"AP_Logger::Write_Message(char const*)" -> "AP_Logger_Backend::Write_Message(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n22×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_MessageF(char const*, ...)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_MessageF(char const*, ...)\n0.00%\n(0.00%)\n1×"];
	"AP_Logger::Write_MessageF(char const*, ...)" -> "AP_HAL::Util::vsnprintf(char*, unsigned long, char const*, __va_list_tag*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_MessageF(char const*, ...)" -> "AP_Logger_Backend::Write_Message(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Mission_Cmd(AP_Mission const&, AP_Mission::Mission_Command const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_Mission_Cmd(AP_Mission const&, AP_Mission::Mission_Command const&)\n0.00%\n(0.00%)\n1×"];
	"AP_Logger::Write_Mission_Cmd(AP_Mission const&, AP_Mission::Mission_Command const&)" -> "AP_Logger_Backend::Write_Mission_Cmd(AP_Mission const&, AP_Mission::Mission_Command const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Mode(unsigned char, ModeReason)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_Mode(unsigned char, ModeReason)\n0.00%\n(0.00%)\n3×"];
	"AP_Logger::Write_Mode(unsigned char, ModeReason)" -> "AP_Logger_Backend::Write_Mode(unsigned char, ModeReason)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Origin(unsigned char, Location const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_Origin(unsigned char, Location const&)\n0.00%\n(0.00%)\n2×"];
	"AP_Logger::Write_Origin(unsigned char, Location const&)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Origin(unsigned char, Location const&)" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_POS()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_POS()\n0.02%\n(0.00%)\n1740×"];
	"AP_Logger::Write_POS()" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_POS()" -> "AP_AHRS_NavEKF::get_position(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_POS()" -> "AP_AHRS_NavEKF::get_relative_position_D_home(float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_POS()" -> "AP_AHRS_NavEKF::get_relative_position_D_origin(float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_POS()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_POS()" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_POS()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Parameter(char const*, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_Parameter(char const*, float)\n0.00%\n(0.00%)\n32×"];
	"AP_Logger::Write_Parameter(char const*, float)" -> "AP_Logger_Backend::Write_Parameter(char const*, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n30×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Power()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_Power()\n0.00%\n(0.00%)\n1740×"];
	"AP_Logger::Write_Proximity(AP_Proximity&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_Proximity(AP_Proximity&)\n0.00%\n(0.00%)\n1740×"];
	"AP_Logger::Write_Proximity(AP_Proximity&)" -> "AP_Proximity::get_status() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_RCIN()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_RCIN()\n0.01%\n(0.00%)\n1741×"];
	"AP_Logger::Write_RCIN()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1741×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_RCIN()" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1741×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_RCIN()" -> "RC_Channels::get_radio_in(unsigned short*, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1741×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_RCIN()" -> "rc()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1741×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_RCOUT()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_RCOUT()\n0.01%\n(0.00%)\n1740×"];
	"AP_Logger::Write_RCOUT()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_RCOUT()" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_RCOUT()" -> "HALSITL::RCOutput::read(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n24360×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Rate(AP_AHRS_View const*, AP_Motors const&, AC_AttitudeControl const&, AC_PosControl const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_Rate(AP_AHRS_View const*, AP_Motors const&, AC_AttitudeControl const&, AC_PosControl const&)\n0.02%\n(0.00%)\n1740×"];
	"AP_Logger::Write_Rate(AP_AHRS_View const*, AP_Motors const&, AC_AttitudeControl const&, AC_PosControl const&)" -> "AP_AHRS_NavEKF::get_accel_ef_blended() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Rate(AP_AHRS_View const*, AP_Motors const&, AC_AttitudeControl const&, AC_PosControl const&)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Rate(AP_AHRS_View const*, AP_Motors const&, AC_AttitudeControl const&, AC_PosControl const&)" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Rate(AP_AHRS_View const*, AP_Motors const&, AC_AttitudeControl const&, AC_PosControl const&)" -> "LowPassFilter<float>::get() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Rate(AP_AHRS_View const*, AP_Motors const&, AC_AttitudeControl const&, AC_PosControl const&)" -> "Vector3<float>::operator+(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Rate(AP_AHRS_View const*, AP_Motors const&, AC_AttitudeControl const&, AC_PosControl const&)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_SRTL(bool, unsigned short, unsigned short, unsigned char, Vector3<float> const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_SRTL(bool, unsigned short, unsigned short, unsigned char, Vector3<float> const&)\n0.00%\n(0.00%)\n401×"];
	"AP_Logger::Write_SRTL(bool, unsigned short, unsigned short, unsigned char, Vector3<float> const&)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n401×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_SRTL(bool, unsigned short, unsigned short, unsigned char, Vector3<float> const&)" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n401×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Vibration()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_Vibration()\n0.02%\n(0.00%)\n1740×"];
	"AP_Logger::Write_Vibration()" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Vibration()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Vibration()" -> "AP_InertialSensor::get_accel_clip_count(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5220×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Vibration()" -> "AP_InertialSensor::get_vibration_levels(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_Vibration()" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::Write_calc_msg_len(char const*) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::Write_calc_msg_len(char const*) const\n0.00%\n(0.00%)\n141×"];
	"AP_Logger::Write_calc_msg_len(char const*) const" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n141×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::assert_same_fmt_for_name(AP_Logger::log_write_fmt const*, char const*, char const*, char const*, char const*, char const*) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::assert_same_fmt_for_name(AP_Logger::log_write_fmt const*, char const*, char const*, char const*, char const*, char const*) const\n0.00%\n(0.00%)\n3042×"];
	"AP_Logger::assert_same_fmt_for_name(AP_Logger::log_write_fmt const*, char const*, char const*, char const*, char const*, char const*) const" -> "__strcmp_sse2_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n11732×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::backend_starting_new_log(AP_Logger_Backend const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::backend_starting_new_log(AP_Logger_Backend const*)\n0.00%\n(0.00%)\n1×"];
	"AP_Logger::fill_log_write_logstructure(LogStructure&, unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::fill_log_write_logstructure(LogStructure&, unsigned char) const\n0.00%\n(0.00%)\n4×"];
	"AP_Logger::fill_log_write_logstructure(LogStructure&, unsigned char) const" -> "__strncpy_sse2_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n16×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::fill_log_write_logstructure(LogStructure&, unsigned char) const" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::handle_log_send()" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::handle_log_send()\n0.49%\n(0.08%)\n288280×"];
	"AP_Logger::handle_log_send()" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.30%\n288280×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::handle_log_send()" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.11%\n288280×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::labels_string_is_good(char const*) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::labels_string_is_good(char const*) const\n0.00%\n(0.00%)\n137×"];
	"AP_Logger::labels_string_is_good(char const*) const" -> "__strcmp_sse2_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5692×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::labels_string_is_good(char const*) const" -> "__strncpy_sse2_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n137×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::labels_string_is_good(char const*) const" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::labels_string_is_good(char const*) const" -> strnlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n137×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::log_while_disarmed() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::log_while_disarmed() const\n0.00%\n(0.00%)\n2688×"];
	"AP_Logger::log_while_disarmed() const" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2688×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::log_write_fmt_for_msg_type(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::log_write_fmt_for_msg_type(unsigned char) const\n0.00%\n(0.00%)\n2883×"];
	"AP_Logger::logging_enabled() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::logging_enabled() const\n0.00%\n(0.00%)\n721×"];
	"AP_Logger::logging_enabled() const" -> "AP_Logger_File::logging_enabled() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::logging_failed() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::logging_failed() const\n0.00%\n(0.00%)\n728×"];
	"AP_Logger::logging_failed() const" -> "AP_Logger_File::logging_failed() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n728×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::logging_present() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::logging_present() const\n0.00%\n(0.00%)\n729×"];
	"AP_Logger::logging_started()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::logging_started()\n0.03%\n(0.03%)\n173570×"];
	"AP_Logger::logging_started()" -> "AP_Logger_File::logging_started() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n173570×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::msg_fmt_for_name(char const*, char const*, char const*, char const*, char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::msg_fmt_for_name(char const*, char const*, char const*, char const*, char const*)\n0.01%\n(0.00%)\n3046×"];
	"AP_Logger::msg_fmt_for_name(char const*, char const*, char const*, char const*, char const*)" -> "AP_Logger::Write_calc_msg_len(char const*) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::msg_fmt_for_name(char const*, char const*, char const*, char const*, char const*)" -> "AP_Logger::assert_same_fmt_for_name(AP_Logger::log_write_fmt const*, char const*, char const*, char const*, char const*, char const*) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3042×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::msg_fmt_for_name(char const*, char const*, char const*, char const*, char const*)" -> "AP_Logger::validate_structure(LogStructure const*, short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::msg_fmt_for_name(char const*, char const*, char const*, char const*, char const*)" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3046×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::msg_fmt_for_name(char const*, char const*, char const*, char const*, char const*)" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3046×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::msg_fmt_for_name(char const*, char const*, char const*, char const*, char const*)" -> "__memcpy_chk_avx_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n16×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::msg_fmt_for_name(char const*, char const*, char const*, char const*, char const*)" -> "__memset_chk_avx2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::msg_fmt_for_name(char const*, char const*, char const*, char const*, char const*)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::msg_fmt_for_name(char const*, char const*, char const*, char const*, char const*)" -> calloc [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::msg_fmt_for_name(char const*, char const*, char const*, char const*, char const*)" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n16×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::multiplier(unsigned short) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::multiplier(unsigned short) const\n0.00%\n(0.00%)\n14×"];
	"AP_Logger::periodic_tasks()" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::periodic_tasks()\n0.26%\n(0.01%)\n72070×"];
	"AP_Logger::periodic_tasks()" -> "AP_Logger::handle_log_send()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::periodic_tasks()" -> "AP_Logger_Backend::periodic_tasks()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::setVehicle_Startup_Writer(Functor<void>)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::setVehicle_Startup_Writer(Functor<void>)\n0.00%\n(0.00%)\n1×"];
	"AP_Logger::set_vehicle_armed(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::set_vehicle_armed(bool)\n0.00%\n(0.00%)\n1×"];
	"AP_Logger::should_log(unsigned int) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::should_log(unsigned int) const\n0.05%\n(0.05%)\n825012×"];
	"AP_Logger::should_log(unsigned int) const" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3565×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::structure(unsigned short) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::structure(unsigned short) const\n0.00%\n(0.00%)\n2747×"];
	"AP_Logger::structure_for_msg_type(unsigned char)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::structure_for_msg_type(unsigned char)\n0.21%\n(0.21%)\n65535×"];
	"AP_Logger::unit(unsigned short) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::unit(unsigned short) const\n0.00%\n(0.00%)\n31×"];
	"AP_Logger::validate_structure(LogStructure const*, short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::validate_structure(LogStructure const*, short)\n0.00%\n(0.00%)\n137×"];
	"AP_Logger::validate_structure(LogStructure const*, short)" -> "AP_Logger::Write_calc_msg_len(char const*) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n137×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::validate_structure(LogStructure const*, short)" -> "AP_Logger::labels_string_is_good(char const*) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n137×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::validate_structure(LogStructure const*, short)" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n822×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::validate_structure(LogStructure const*, short)" -> strnlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n685×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::validate_structures(LogStructure const*, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger::validate_structures(LogStructure const*, unsigned char)\n0.00%\n(0.00%)\n1×"];
	"AP_Logger::validate_structures(LogStructure const*, unsigned char)" -> "AP_Logger::validate_structure(LogStructure const*, short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n133×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::validate_structures(LogStructure const*, unsigned char)" -> "__fprintf_chk" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::validate_structures(LogStructure const*, unsigned char)" -> "__strcmp_sse2_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n465×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger::validate_structures(LogStructure const*, unsigned char)" -> "std::enable_if<std::is_floating_point<std::common_type<double, double>::type>::value, bool>::type is_equal<double, double>(double, double)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n91×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::AP_Logger_Backend(AP_Logger&, LoggerMessageWriter_DFLogStart*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::AP_Logger_Backend(AP_Logger&, LoggerMessageWriter_DFLogStart*)\n0.00%\n(0.00%)\n1×"];
	"AP_Logger_Backend::StartNewLogOK() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::StartNewLogOK() const\n0.01%\n(0.01%)\n65773×"];
	"AP_Logger_Backend::StartNewLogOK() const" -> "AP_Logger_File::logging_started() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n65773×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write(unsigned char, __va_list_tag*, bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::Write(unsigned char, __va_list_tag*, bool)\n0.05%\n(0.01%)\n3045×"];
	"AP_Logger_Backend::Write(unsigned char, __va_list_tag*, bool)" -> "AP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n3045×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write(unsigned char, __va_list_tag*, bool)" -> "AP_Logger_File::bufferspace_available()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3045×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write(unsigned char, __va_list_tag*, bool)" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n30310×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::WriteBlockCheckStartupMessages()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::WriteBlockCheckStartupMessages()\n0.07%\n(0.01%)\n65773×"];
	"AP_Logger_Backend::WriteBlockCheckStartupMessages()" -> "HALSITL::Scheduler::in_main_thread() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::WriteBlockCheckStartupMessages()" -> "LoggerMessageWriter_DFLogStart::process()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n5×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)\n0.54%\n(0.06%)\n68461×"];
	"AP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)" -> "AP_Logger::log_while_disarmed() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2663×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)" -> "AP_Logger::log_write_fmt_for_msg_type(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2883×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)" -> "AP_Logger::structure_for_msg_type(unsigned char)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.21%\n65535×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)" -> "AP_Logger_File::StartNewLogOK() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n65773×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)" -> "AP_Logger_File::WritesOK() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n65773×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)" -> "AP_Logger_File::_WritePrioritisedBlock(void const*, unsigned short, bool)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.26%\n65773×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)" -> "HALSITL::Scheduler::in_main_thread() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4227×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Emit_FMT(unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::Write_Emit_FMT(unsigned char)\n0.00%\n(0.00%)\n4×"];
	"AP_Logger_Backend::Write_Emit_FMT(unsigned char)" -> "AP_Logger::fill_log_write_logstructure(LogStructure&, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Emit_FMT(unsigned char)" -> "AP_Logger_Backend::Write_Format(LogStructure const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Emit_FMT(unsigned char)" -> "AP_Logger_Backend::Write_Format_Units(LogStructure const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Format(LogStructure const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::Write_Format(LogStructure const*)\n0.03%\n(0.00%)\n2618×"];
	"AP_Logger_Backend::Write_Format(LogStructure const*)" -> "AP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n2618×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Format(LogStructure const*)" -> "__strncpy_sse2_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7854×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Format_Units(LogStructure const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::Write_Format_Units(LogStructure const*)\n0.00%\n(0.00%)\n136×"];
	"AP_Logger_Backend::Write_Format_Units(LogStructure const*)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n136×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Format_Units(LogStructure const*)" -> "AP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n136×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Format_Units(LogStructure const*)" -> "__strncpy_sse2_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n272×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Message(char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::Write_Message(char const*)\n0.00%\n(0.00%)\n29×"];
	"AP_Logger_Backend::Write_Message(char const*)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n29×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Message(char const*)" -> "AP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n29×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Message(char const*)" -> "__strncpy_sse2_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n29×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_MessageF(char const*, ...)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::Write_MessageF(char const*, ...)\n0.00%\n(0.00%)\n2×"];
	"AP_Logger_Backend::Write_MessageF(char const*, ...)" -> "AP_HAL::Util::vsnprintf(char*, unsigned long, char const*, __va_list_tag*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_MessageF(char const*, ...)" -> "AP_Logger_Backend::Write_Message(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Mission_Cmd(AP_Mission const&, AP_Mission::Mission_Command const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::Write_Mission_Cmd(AP_Mission const&, AP_Mission::Mission_Command const&)\n0.00%\n(0.00%)\n3×"];
	"AP_Logger_Backend::Write_Mission_Cmd(AP_Mission const&, AP_Mission::Mission_Command const&)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Mission_Cmd(AP_Mission const&, AP_Mission::Mission_Command const&)" -> "AP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Mission_Cmd(AP_Mission const&, AP_Mission::Mission_Command const&)" -> "AP_Mission::mission_cmd_to_mavlink_int(AP_Mission::Mission_Command const&, __mavlink_mission_item_int_t&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Mode(unsigned char, ModeReason)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::Write_Mode(unsigned char, ModeReason)\n0.00%\n(0.00%)\n3×"];
	"AP_Logger_Backend::Write_Mode(unsigned char, ModeReason)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Mode(unsigned char, ModeReason)" -> "AP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Multiplier(MultiplierStructure const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::Write_Multiplier(MultiplierStructure const*)\n0.00%\n(0.00%)\n14×"];
	"AP_Logger_Backend::Write_Multiplier(MultiplierStructure const*)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Multiplier(MultiplierStructure const*)" -> "AP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Parameter(AP_Param const*, AP_Param::ParamToken const&, ap_var_type)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::Write_Parameter(AP_Param const*, AP_Param::ParamToken const&, ap_var_type)\n0.06%\n(0.00%)\n1217×"];
	"AP_Logger_Backend::Write_Parameter(AP_Param const*, AP_Param::ParamToken const&, ap_var_type)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1217×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Parameter(AP_Param const*, AP_Param::ParamToken const&, ap_var_type)" -> "AP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n1217×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Parameter(AP_Param const*, AP_Param::ParamToken const&, ap_var_type)" -> "AP_Param::cast_to_float(ap_var_type) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1217×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Parameter(AP_Param const*, AP_Param::ParamToken const&, ap_var_type)" -> "AP_Param::copy_name_token(AP_Param::ParamToken const&, char*, unsigned long, bool) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n1217×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Parameter(AP_Param const*, AP_Param::ParamToken const&, ap_var_type)" -> "__strncpy_sse2_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1217×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Parameter(char const*, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::Write_Parameter(char const*, float)\n0.00%\n(0.00%)\n30×"];
	"AP_Logger_Backend::Write_Parameter(char const*, float)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n30×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Parameter(char const*, float)" -> "AP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n30×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Parameter(char const*, float)" -> "__strncpy_sse2_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n30×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Unit(UnitStructure const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::Write_Unit(UnitStructure const*)\n0.00%\n(0.00%)\n31×"];
	"AP_Logger_Backend::Write_Unit(UnitStructure const*)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n31×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Unit(UnitStructure const*)" -> "AP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n31×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::Write_Unit(UnitStructure const*)" -> "__strncpy_sse2_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n31×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::multiplier(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::multiplier(unsigned char) const\n0.00%\n(0.00%)\n14×"];
	"AP_Logger_Backend::multiplier(unsigned char) const" -> "AP_Logger::multiplier(unsigned short) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::num_multipliers() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::num_multipliers() const\n0.00%\n(0.00%)\n15×"];
	"AP_Logger_Backend::num_types() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::num_types() const\n0.00%\n(0.00%)\n2754×"];
	"AP_Logger_Backend::num_units() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::num_units() const\n0.00%\n(0.00%)\n32×"];
	"AP_Logger_Backend::periodic_tasks()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::periodic_tasks()\n0.12%\n(0.01%)\n72070×"];
	"AP_Logger_Backend::periodic_tasks()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::periodic_tasks()" -> "AP_Logger_File::periodic_1Hz()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n180×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::periodic_tasks()" -> "AP_Logger_File::periodic_fullrate()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.10%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::push_log_blocks()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::push_log_blocks()\n0.09%\n(0.01%)\n72070×"];
	"AP_Logger_Backend::push_log_blocks()" -> "LoggerMessageWriter_DFLogStart::process()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n2483×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::start_new_log_reset_variables()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::start_new_log_reset_variables()\n0.00%\n(0.00%)\n1×"];
	"AP_Logger_Backend::start_new_log_reset_variables()" -> "AP_Logger::backend_starting_new_log(AP_Logger_Backend const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::start_new_log_reset_variables()" -> "LoggerMessageWriter_DFLogStart::reset()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::structure(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::structure(unsigned char) const\n0.00%\n(0.00%)\n2747×"];
	"AP_Logger_Backend::structure(unsigned char) const" -> "AP_Logger::structure(unsigned short) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2747×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::unit(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::unit(unsigned char) const\n0.00%\n(0.00%)\n31×"];
	"AP_Logger_Backend::unit(unsigned char) const" -> "AP_Logger::unit(unsigned short) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n31×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_Backend::vehicle_message_writer()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_Backend::vehicle_message_writer()\n0.00%\n(0.00%)\n2×"];
	"AP_Logger_File::AP_Logger_File(AP_Logger&, LoggerMessageWriter_DFLogStart*, char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_File::AP_Logger_File(AP_Logger&, LoggerMessageWriter_DFLogStart*, char const*)\n0.00%\n(0.00%)\n1×"];
	"AP_Logger_File::AP_Logger_File(AP_Logger&, LoggerMessageWriter_DFLogStart*, char const*)" -> "AP_Logger_Backend::AP_Logger_Backend(AP_Logger&, LoggerMessageWriter_DFLogStart*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::AP_Logger_File(AP_Logger&, LoggerMessageWriter_DFLogStart*, char const*)" -> "ByteBuffer::ByteBuffer(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::AP_Logger_File(AP_Logger&, LoggerMessageWriter_DFLogStart*, char const*)" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::CardInserted() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_File::CardInserted() const\n0.00%\n(0.00%)\n7×"];
	"AP_Logger_File::Init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_File::Init()\n0.00%\n(0.00%)\n1×"];
	"AP_Logger_File::Init()" -> "AP::FS()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::Init()" -> "AP_Filesystem::stat(char const*, stat*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::Init()" -> "AP_HAL::BetterStream::printf(char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::Init()" -> "ByteBuffer::set_size(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::Init()" -> "ExpectDelay::ExpectDelay(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::Init()" -> "ExpectDelay::~ExpectDelay()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::Init()" -> "HALSITL::Scheduler::register_io_process(Functor<void>)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::Prep()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_File::Prep()\n0.00%\n(0.00%)\n1×"];
	"AP_Logger_File::Prep()" -> "AP::FS()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::Prep()" -> "AP_Filesystem::disk_free(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::Prep()" -> "AP_Filesystem::disk_space(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::PrepForArming()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_File::PrepForArming()\n0.00%\n(0.00%)\n1×"];
	"AP_Logger_File::PrepForArming()" -> "AP_Logger_Backend::start_new_log_reset_variables()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::PrepForArming()" -> "AP_Logger_File::start_new_log() [clone .part.11] [clone .constprop.22]" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::PrepForArming()" -> "HALSITL::Semaphore::give()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::PrepForArming()" -> "HALSITL::Semaphore::take(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::StartNewLogOK() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_File::StartNewLogOK() const\n0.01%\n(0.00%)\n65773×"];
	"AP_Logger_File::StartNewLogOK() const" -> "AP_Logger_Backend::StartNewLogOK() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n65773×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::WritesOK() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_File::WritesOK() const\n0.00%\n(0.00%)\n65773×"];
	"AP_Logger_File::_WritePrioritisedBlock(void const*, unsigned short, bool)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_File::_WritePrioritisedBlock(void const*, unsigned short, bool)\n0.26%\n(0.04%)\n65773×"];
	"AP_Logger_File::_WritePrioritisedBlock(void const*, unsigned short, bool)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1406×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::_WritePrioritisedBlock(void const*, unsigned short, bool)" -> "AP_Logger_Backend::WriteBlockCheckStartupMessages()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n65773×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::_WritePrioritisedBlock(void const*, unsigned short, bool)" -> "ByteBuffer::space() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n131535×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::_WritePrioritisedBlock(void const*, unsigned short, bool)" -> "ByteBuffer::write(unsigned char const*, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n65767×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::_WritePrioritisedBlock(void const*, unsigned short, bool)" -> "HALSITL::Semaphore::give()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n65768×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::_WritePrioritisedBlock(void const*, unsigned short, bool)" -> "HALSITL::Semaphore::take(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n65768×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::_get_log_size(unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_File::_get_log_size(unsigned short)\n0.00%\n(0.00%)\n1×"];
	"AP_Logger_File::_get_log_size(unsigned short)" -> "AP::FS()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::_get_log_size(unsigned short)" -> "AP_Filesystem::stat(char const*, stat*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::_get_log_size(unsigned short)" -> "ExpectDelay::ExpectDelay(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::_get_log_size(unsigned short)" -> "ExpectDelay::~ExpectDelay()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::_get_log_size(unsigned short)" -> "__asprintf_chk" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::_get_log_size(unsigned short)" -> free [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::bufferspace_available()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_File::bufferspace_available()\n0.00%\n(0.00%)\n3046×"];
	"AP_Logger_File::bufferspace_available()" -> "ByteBuffer::space() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3046×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::find_last_log()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_File::find_last_log()\n0.00%\n(0.00%)\n1×"];
	"AP_Logger_File::find_last_log()" -> "AP::FS()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::find_last_log()" -> "AP_Filesystem::close(int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::find_last_log()" -> "AP_Filesystem::open(char const*, int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::find_last_log()" -> "AP_Filesystem::read(int, void*, unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::find_last_log()" -> "ExpectDelay::ExpectDelay(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::find_last_log()" -> "ExpectDelay::~ExpectDelay()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::find_last_log()" -> "__asprintf_chk" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::find_last_log()" -> free [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::find_last_log()" -> strtol [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::logging_enabled() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_File::logging_enabled() const\n0.00%\n(0.00%)\n721×"];
	"AP_Logger_File::logging_enabled() const" -> "AP_Logger::log_while_disarmed() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n25×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::logging_failed() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_File::logging_failed() const\n0.00%\n(0.00%)\n728×"];
	"AP_Logger_File::logging_failed() const" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n728×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::logging_started() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_File::logging_started() const\n0.01%\n(0.01%)\n239343×"];
	"AP_Logger_File::periodic_1Hz()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_File::periodic_1Hz()\n0.00%\n(0.00%)\n180×"];
	"AP_Logger_File::periodic_1Hz()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n180×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::periodic_1Hz()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n180×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::periodic_1Hz()" -> "AP_Logger_Backend::WritePrioritisedBlock(void const*, unsigned short, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n180×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::periodic_fullrate()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_File::periodic_fullrate()\n0.10%\n(0.00%)\n72070×"];
	"AP_Logger_File::periodic_fullrate()" -> "AP_Logger_Backend::push_log_blocks()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.09%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::start_new_log() [clone .part.11] [clone .constprop.22]" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Logger_File::start_new_log() [clone .part.11] [clone .constprop.22]\n0.00%\n(0.00%)\n1×"];
	"AP_Logger_File::start_new_log() [clone .part.11] [clone .constprop.22]" -> "AP::FS()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::start_new_log() [clone .part.11] [clone .constprop.22]" -> "AP_Filesystem::close(int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::start_new_log() [clone .part.11] [clone .constprop.22]" -> "AP_Filesystem::disk_free(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::start_new_log() [clone .part.11] [clone .constprop.22]" -> "AP_Filesystem::open(char const*, int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::start_new_log() [clone .part.11] [clone .constprop.22]" -> "AP_Filesystem::stat(char const*, stat*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::start_new_log() [clone .part.11] [clone .constprop.22]" -> "AP_Filesystem::write(int, void const*, unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::start_new_log() [clone .part.11] [clone .constprop.22]" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::start_new_log() [clone .part.11] [clone .constprop.22]" -> "AP_Logger_File::_get_log_size(unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::start_new_log() [clone .part.11] [clone .constprop.22]" -> "AP_Logger_File::find_last_log()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::start_new_log() [clone .part.11] [clone .constprop.22]" -> "ByteBuffer::clear()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::start_new_log() [clone .part.11] [clone .constprop.22]" -> "ExpectDelay::ExpectDelay(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::start_new_log() [clone .part.11] [clone .constprop.22]" -> "ExpectDelay::~ExpectDelay()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::start_new_log() [clone .part.11] [clone .constprop.22]" -> "HALSITL::Semaphore::give()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::start_new_log() [clone .part.11] [clone .constprop.22]" -> "HALSITL::Semaphore::take(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::start_new_log() [clone .part.11] [clone .constprop.22]" -> "__asprintf_chk" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::start_new_log() [clone .part.11] [clone .constprop.22]" -> "__snprintf_chk" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Logger_File::start_new_log() [clone .part.11] [clone .constprop.22]" -> free [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Mission::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Mission::init()\n0.00%\n(0.00%)\n1×"];
	"AP_Mission::init()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Mission::init()" -> "StorageAccess::read_uint32(unsigned short) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Mission::mission_cmd_to_mavlink_int(AP_Mission::Mission_Command const&, __mavlink_mission_item_int_t&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Mission::mission_cmd_to_mavlink_int(AP_Mission::Mission_Command const&, __mavlink_mission_item_int_t&)\n0.00%\n(0.00%)\n3×"];
	"AP_Mission::read_cmd_from_storage(unsigned short, AP_Mission::Mission_Command&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Mission::read_cmd_from_storage(unsigned short, AP_Mission::Mission_Command&) const\n0.00%\n(0.00%)\n14×"];
	"AP_Mission::read_cmd_from_storage(unsigned short, AP_Mission::Mission_Command&) const" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Mission::read_cmd_from_storage(unsigned short, AP_Mission::Mission_Command&) const" -> "StorageAccess::read_block(void*, unsigned short, unsigned long) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n11×", labeldistance="0.50", penwidth="0.50"];
	"AP_Mission::read_cmd_from_storage(unsigned short, AP_Mission::Mission_Command&) const" -> "StorageAccess::read_byte(unsigned short) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n11×", labeldistance="0.50", penwidth="0.50"];
	"AP_Mission::read_cmd_from_storage(unsigned short, AP_Mission::Mission_Command&) const" -> "StorageAccess::read_uint16(unsigned short) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n11×", labeldistance="0.50", penwidth="0.50"];
	"AP_Mission::read_cmd_from_storage(unsigned short, AP_Mission::Mission_Command&) const" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"AP_Mission::read_cmd_from_storage(unsigned short, AP_Mission::Mission_Command&) const" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"AP_Motors::AP_Motors(unsigned short, unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Motors::AP_Motors(unsigned short, unsigned short)\n0.00%\n(0.00%)\n1×"];
	"AP_Motors::AP_Motors(unsigned short, unsigned short)" -> "LowPassFilter<float>::LowPassFilter()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Motors::AP_Motors(unsigned short, unsigned short)" -> "LowPassFilter<float>::reset(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Motors::AP_Motors(unsigned short, unsigned short)" -> "LowPassFilter<float>::set_cutoff_frequency(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Motors::add_motor_num(signed char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Motors::add_motor_num(signed char)\n0.00%\n(0.00%)\n4×"];
	"AP_Motors::add_motor_num(signed char)" -> "SRV_Channels::find_channel(SRV_Channel::Aux_servo_function_t, unsigned char&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_Motors::add_motor_num(signed char)" -> "SRV_Channels::set_aux_channel_default(SRV_Channel::Aux_servo_function_t, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_Motors::armed(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Motors::armed(bool)\n0.00%\n(0.00%)\n1×"];
	"AP_Motors::rc_map_mask(unsigned int) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Motors::rc_map_mask(unsigned int) const\n0.00%\n(0.00%)\n1×"];
	"AP_Motors::rc_map_mask(unsigned int) const" -> "SRV_Channels::get_output_channel_mask(SRV_Channel::Aux_servo_function_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_Motors::rc_set_freq(unsigned int, unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Motors::rc_set_freq(unsigned int, unsigned short)\n0.00%\n(0.00%)\n2×"];
	"AP_Motors::rc_set_freq(unsigned int, unsigned short)" -> "HALSITL::RCOutput::set_freq(unsigned int, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Motors::rc_set_freq(unsigned int, unsigned short)" -> "SRV_Channels::get_output_channel_mask(SRV_Channel::Aux_servo_function_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"AP_Motors::rc_write(unsigned char, unsigned short)" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Motors::rc_write(unsigned char, unsigned short)\n0.55%\n(0.02%)\n288288×"];
	"AP_Motors::rc_write(unsigned char, unsigned short)" -> "SRV_Channels::set_output_pwm(SRV_Channel::Aux_servo_function_t, unsigned short)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.53%\n288288×", labeldistance="0.50", penwidth="0.50"];
	"AP_Motors::set_desired_spool_state(AP_Motors::DesiredSpoolState)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Motors::set_desired_spool_state(AP_Motors::DesiredSpoolState)\n0.00%\n(0.00%)\n72072×"];
	"AP_Motors::set_radio_passthrough(float, float, float, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Motors::set_radio_passthrough(float, float, float, float)\n0.00%\n(0.00%)\n9010×"];
	"AP_MotorsMatrix::check_for_failed_motor(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMatrix::check_for_failed_motor(float)\n0.15%\n(0.13%)\n72072×"];
	"AP_MotorsMatrix::check_for_failed_motor(float)" -> "AP_MotorsMulticopter::get_compensation_gain() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n72072×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMatrix::get_motor_mask()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMatrix::get_motor_mask()\n0.00%\n(0.00%)\n1×"];
	"AP_MotorsMatrix::get_motor_mask()" -> "AP_Motors::rc_map_mask(unsigned int) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMatrix::get_motor_mask()" -> "AP_MotorsMulticopter::get_motor_mask()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMatrix::init(AP_Motors::motor_frame_class, AP_Motors::motor_frame_type)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMatrix::init(AP_Motors::motor_frame_class, AP_Motors::motor_frame_type)\n0.00%\n(0.00%)\n1×"];
	"AP_MotorsMatrix::init(AP_Motors::motor_frame_class, AP_Motors::motor_frame_type)" -> "AP_Motors::rc_set_freq(unsigned int, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMatrix::init(AP_Motors::motor_frame_class, AP_Motors::motor_frame_type)" -> "AP_MotorsMatrix::setup_motors(AP_Motors::motor_frame_class, AP_Motors::motor_frame_type)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMatrix::output_armed_stabilizing()" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMatrix::output_armed_stabilizing()\n0.48%\n(0.29%)\n72072×"];
	"AP_MotorsMatrix::output_armed_stabilizing()" -> "AP_MotorsMatrix::check_for_failed_motor(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.15%\n72072×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMatrix::output_armed_stabilizing()" -> "AP_MotorsMulticopter::get_compensation_gain() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n72072×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMatrix::output_armed_stabilizing()" -> "LowPassFilter<float>::get() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72072×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMatrix::output_armed_stabilizing()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n144144×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMatrix::output_to_motors()" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMatrix::output_to_motors()\n1.03%\n(0.09%)\n72072×"];
	"AP_MotorsMatrix::output_to_motors()" -> "AP_Motors::rc_write(unsigned char, unsigned short)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.55%\n288288×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMatrix::output_to_motors()" -> "AP_MotorsMulticopter::actuator_spin_up_to_ground_idle() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4068×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMatrix::output_to_motors()" -> "AP_MotorsMulticopter::output_to_pwm(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n288288×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMatrix::output_to_motors()" -> "AP_MotorsMulticopter::set_actuator_with_slew(float&, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n275152×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMatrix::output_to_motors()" -> "AP_MotorsMulticopter::thrust_to_actuator(float)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.27%\n271084×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMatrix::set_frame_class_and_type(AP_Motors::motor_frame_class, AP_Motors::motor_frame_type)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMatrix::set_frame_class_and_type(AP_Motors::motor_frame_class, AP_Motors::motor_frame_type)\n0.00%\n(0.00%)\n6×"];
	"AP_MotorsMatrix::set_update_rate(unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMatrix::set_update_rate(unsigned short)\n0.00%\n(0.00%)\n1×"];
	"AP_MotorsMatrix::set_update_rate(unsigned short)" -> "AP_Motors::rc_set_freq(unsigned int, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMatrix::setup_motors(AP_Motors::motor_frame_class, AP_Motors::motor_frame_type)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMatrix::setup_motors(AP_Motors::motor_frame_class, AP_Motors::motor_frame_type)\n0.00%\n(0.00%)\n1×"];
	"AP_MotorsMatrix::setup_motors(AP_Motors::motor_frame_class, AP_Motors::motor_frame_type)" -> "AP_Motors::add_motor_num(signed char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMatrix::thrust_compensation()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMatrix::thrust_compensation()\n0.00%\n(0.00%)\n72072×"];
	"AP_MotorsMulticopter::AP_MotorsMulticopter(unsigned short, unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMulticopter::AP_MotorsMulticopter(unsigned short, unsigned short)\n0.00%\n(0.00%)\n1×"];
	"AP_MotorsMulticopter::AP_MotorsMulticopter(unsigned short, unsigned short)" -> "AP_Motors::AP_Motors(unsigned short, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::AP_MotorsMulticopter(unsigned short, unsigned short)" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::AP_MotorsMulticopter(unsigned short, unsigned short)" -> "LowPassFilter<float>::LowPassFilter()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::AP_MotorsMulticopter(unsigned short, unsigned short)" -> "LowPassFilter<float>::reset(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::AP_MotorsMulticopter(unsigned short, unsigned short)" -> "LowPassFilter<float>::set_cutoff_frequency(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::actuator_spin_up_to_ground_idle() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMulticopter::actuator_spin_up_to_ground_idle() const\n0.00%\n(0.00%)\n4068×"];
	"AP_MotorsMulticopter::actuator_spin_up_to_ground_idle() const" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4068×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::check_mot_pwm_params() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMulticopter::check_mot_pwm_params() const\n0.00%\n(0.00%)\n7×"];
	"AP_MotorsMulticopter::get_compensation_gain() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMulticopter::get_compensation_gain() const\n0.05%\n(0.04%)\n144144×"];
	"AP_MotorsMulticopter::get_compensation_gain() const" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n144144×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::get_current_limit_max_throttle()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMulticopter::get_current_limit_max_throttle()\n0.01%\n(0.01%)\n67771×"];
	"AP_MotorsMulticopter::get_current_limit_max_throttle()" -> "AP::battery()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n67771×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::get_motor_mask()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMulticopter::get_motor_mask()\n0.00%\n(0.00%)\n1×"];
	"AP_MotorsMulticopter::get_motor_mask()" -> "SRV_Channels::get_output_channel_mask(SRV_Channel::Aux_servo_function_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::get_throttle_hover() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMulticopter::get_throttle_hover() const\n0.00%\n(0.00%)\n170813×"];
	"AP_MotorsMulticopter::output()" [color="#0d1475", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMulticopter::output()\n1.70%\n(0.06%)\n72072×"];
	"AP_MotorsMulticopter::output()" -> "AP_MotorsMatrix::output_armed_stabilizing()" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.48%\n72072×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::output()" -> "AP_MotorsMatrix::output_to_motors()" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.03%\n72072×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::output()" -> "AP_MotorsMatrix::thrust_compensation()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72072×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::output()" -> "AP_MotorsMulticopter::output_logic()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n72072×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::output()" -> "AP_MotorsMulticopter::update_lift_max_from_batt_voltage()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n72072×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::output()" -> "LowPassFilter<float>::apply(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n69588×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::output()" -> "LowPassFilter<float>::get() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n211248×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::output()" -> "LowPassFilter<float>::reset(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2484×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::output()" -> "SRV_Channels::set_output_scaled(SRV_Channel::Aux_servo_function_t, short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n360360×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::output()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72072×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::output_logic()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMulticopter::output_logic()\n0.05%\n(0.03%)\n72072×"];
	"AP_MotorsMulticopter::output_logic()" -> "AP_MotorsMulticopter::get_current_limit_max_throttle()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n67771×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::output_logic()" -> "LowPassFilter<float>::get() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n139×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::output_logic()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1089×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::output_min()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMulticopter::output_min()\n0.00%\n(0.00%)\n2×"];
	"AP_MotorsMulticopter::output_min()" -> "AP_Motors::set_desired_spool_state(AP_Motors::DesiredSpoolState)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::output_min()" -> "AP_MotorsMulticopter::output()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::output_to_pwm(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMulticopter::output_to_pwm(float)\n0.05%\n(0.05%)\n288288×"];
	"AP_MotorsMulticopter::set_actuator_with_slew(float&, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMulticopter::set_actuator_with_slew(float&, float)\n0.08%\n(0.06%)\n275152×"];
	"AP_MotorsMulticopter::set_actuator_with_slew(float&, float)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n275152×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::set_throttle_range(short, short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMulticopter::set_throttle_range(short, short)\n0.00%\n(0.00%)\n7×"];
	"AP_MotorsMulticopter::thrust_to_actuator(float)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMulticopter::thrust_to_actuator(float)\n0.27%\n(0.18%)\n271084×"];
	"AP_MotorsMulticopter::thrust_to_actuator(float)" -> "LowPassFilter<float>::get() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n542168×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::thrust_to_actuator(float)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n813252×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::thrust_to_actuator(float)" -> "float safe_sqrt<float>(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n271084×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::update_lift_max_from_batt_voltage()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMulticopter::update_lift_max_from_batt_voltage()\n0.02%\n(0.01%)\n72072×"];
	"AP_MotorsMulticopter::update_lift_max_from_batt_voltage()" -> "AP::battery()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72072×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::update_lift_max_from_batt_voltage()" -> "AP_BattMonitor::voltage_resting_estimate(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72072×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::update_lift_max_from_batt_voltage()" -> "LowPassFilter<float>::reset(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72072×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::update_throttle_hover(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_MotorsMulticopter::update_throttle_hover(float)\n0.00%\n(0.00%)\n14×"];
	"AP_MotorsMulticopter::update_throttle_hover(float)" -> "LowPassFilter<float>::get() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"AP_MotorsMulticopter::update_throttle_hover(float)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n28×", labeldistance="0.50", penwidth="0.50"];
	"AP_Mount::AP_Mount()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Mount::AP_Mount()\n0.00%\n(0.00%)\n1×"];
	"AP_Mount::AP_Mount()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Mount::AP_Mount()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Mount::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Mount::init()\n0.00%\n(0.00%)\n1×"];
	"AP_Mount::init()" -> "AP_Param::configured() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Mount::init()" -> "SRV_Channels::function_assigned(SRV_Channel::Aux_servo_function_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Mount::send_gimbal_report(mavlink_channel_t)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Mount::send_gimbal_report(mavlink_channel_t)\n0.00%\n(0.00%)\n721×"];
	"AP_Mount::send_mount_status(mavlink_channel_t)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Mount::send_mount_status(mavlink_channel_t)\n0.00%\n(0.00%)\n721×"];
	"AP_Mount::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Mount::update()\n0.00%\n(0.00%)\n9008×"];
	"AP_Mount::update_fast()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Mount::update_fast()\n0.00%\n(0.00%)\n72070×"];
	"AP_NMEA_Output::probe()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_NMEA_Output::probe()\n0.00%\n(0.00%)\n1×"];
	"AP_NMEA_Output::probe()" -> "AP::serialmanager()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_NMEA_Output::probe()" -> "AP_SerialManager::find_serial(AP_SerialManager::SerialProtocol, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Notify::AP_Notify()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Notify::AP_Notify()\n0.00%\n(0.00%)\n1×"];
	"AP_Notify::AP_Notify()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Notify::AP_Notify()" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Notify::add_backends() [clone .part.1] [clone .constprop.2]" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Notify::add_backends() [clone .part.1] [clone .constprop.2]\n0.00%\n(0.00%)\n1×"];
	"AP_Notify::add_backends() [clone .part.1] [clone .constprop.2]" -> "AP_BoardLED::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Notify::add_backends() [clone .part.1] [clone .constprop.2]" -> "AP_ToneAlarm::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Notify::add_backends() [clone .part.1] [clone .constprop.2]" -> "AP_ToneAlarm::~AP_ToneAlarm()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Notify::add_backends() [clone .part.1] [clone .constprop.2]" -> "Buzzer::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Notify::add_backends() [clone .part.1] [clone .constprop.2]" -> "Buzzer::~Buzzer()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Notify::add_backends() [clone .part.1] [clone .constprop.2]" -> "Display::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Notify::add_backends() [clone .part.1] [clone .constprop.2]" -> "Display::~Display()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Notify::add_backends() [clone .part.1] [clone .constprop.2]" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Notify::add_backends() [clone .part.1] [clone .constprop.2]" -> "NCP5623::NCP5623(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"AP_Notify::add_backends() [clone .part.1] [clone .constprop.2]" -> "NCP5623::~NCP5623()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"AP_Notify::add_backends() [clone .part.1] [clone .constprop.2]" -> "RGBLed::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Notify::add_backends() [clone .part.1] [clone .constprop.2]" -> "ToshibaLED_I2C::ToshibaLED_I2C(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Notify::add_backends() [clone .part.1] [clone .constprop.2]" -> "ToshibaLED_I2C::~ToshibaLED_I2C()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Notify::add_backends() [clone .part.1] [clone .constprop.2]" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n11×", labeldistance="0.50", penwidth="0.50"];
	"AP_Notify::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Notify::init()\n0.00%\n(0.00%)\n1×"];
	"AP_Notify::init()" -> "AP_Notify::add_backends() [clone .part.1] [clone .constprop.2]" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Notify::send_text(char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Notify::send_text(char const*)\n0.00%\n(0.00%)\n21×"];
	"AP_Notify::send_text(char const*)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n21×", labeldistance="0.50", penwidth="0.50"];
	"AP_Notify::send_text(char const*)" -> "__strncpy_sse2_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n21×", labeldistance="0.50", penwidth="0.50"];
	"AP_Notify::set_flight_mode_str(char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Notify::set_flight_mode_str(char const*)\n0.00%\n(0.00%)\n2×"];
	"AP_Notify::set_flight_mode_str(char const*)" -> "__strncpy_sse2_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Notify::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Notify::update()\n0.00%\n(0.00%)\n9129×"];
	"AP_Notify::update()" -> "AP_BoardLED::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9129×", labeldistance="0.50", penwidth="0.50"];
	"AP_OADatabase::AP_OADatabase()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_OADatabase::AP_OADatabase()\n0.00%\n(0.00%)\n1×"];
	"AP_OADatabase::AP_OADatabase()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_OADatabase::AP_OADatabase()" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_OADatabase::send_adsb_vehicle(mavlink_channel_t, unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_OADatabase::send_adsb_vehicle(mavlink_channel_t, unsigned short)\n0.00%\n(0.00%)\n721×"];
	"AP_OAPathPlanner::AP_OAPathPlanner()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_OAPathPlanner::AP_OAPathPlanner()\n0.00%\n(0.00%)\n1×"];
	"AP_OAPathPlanner::AP_OAPathPlanner()" -> "AP_OADatabase::AP_OADatabase()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_OAPathPlanner::AP_OAPathPlanner()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_OAPathPlanner::AP_OAPathPlanner()" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_OAPathPlanner::AP_OAPathPlanner()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9×", labeldistance="0.50", penwidth="0.50"];
	"AP_OAPathPlanner::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_OAPathPlanner::init()\n0.00%\n(0.00%)\n1×"];
	"AP_OAPathPlanner::mission_avoidance(Location const&, Location const&, Location const&, Location&, Location&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_OAPathPlanner::mission_avoidance(Location const&, Location const&, Location const&, Location&, Location&)\n0.01%\n(0.01%)\n46135×"];
	"AP_OAPathPlanner::pre_arm_check(char*, unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_OAPathPlanner::pre_arm_check(char*, unsigned char) const\n0.00%\n(0.00%)\n7×"];
	"AP_Param::cast_to_float(ap_var_type) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::cast_to_float(ap_var_type) const\n0.00%\n(0.00%)\n2433×"];
	"AP_Param::check_group_info(AP_Param::GroupInfo const*, unsigned short*, unsigned char, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::check_group_info(AP_Param::GroupInfo const*, unsigned short*, unsigned char, unsigned char)\n0.00%\n(0.00%)\n45×"];
	"AP_Param::check_group_info(AP_Param::GroupInfo const*, unsigned short*, unsigned char, unsigned char)" -> "AP_Param::check_group_info(AP_Param::GroupInfo const*, unsigned short*, unsigned char, unsigned char)'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n53×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::check_group_info(AP_Param::GroupInfo const*, unsigned short*, unsigned char, unsigned char)" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n619×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::check_group_info(AP_Param::GroupInfo const*, unsigned short*, unsigned char, unsigned char)'2" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::check_group_info(AP_Param::GroupInfo const*, unsigned short*, unsigned char, unsigned char)'2\n0.00%\n(0.00%)\n101×"];
	"AP_Param::check_group_info(AP_Param::GroupInfo const*, unsigned short*, unsigned char, unsigned char)'2" -> "AP_Param::check_group_info(AP_Param::GroupInfo const*, unsigned short*, unsigned char, unsigned char)'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="48×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::check_group_info(AP_Param::GroupInfo const*, unsigned short*, unsigned char, unsigned char)'2" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n829×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::check_var_info()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::check_var_info()\n0.00%\n(0.00%)\n1×"];
	"AP_Param::check_var_info()" -> "AP_Param::check_group_info(AP_Param::GroupInfo const*, unsigned short*, unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n45×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::check_var_info()" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n45×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::configured() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::configured() const\n0.01%\n(0.00%)\n17×"];
	"AP_Param::configured() const" -> "AP_Param::find_var_info(unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n33×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::configured() const" -> "AP_Param::scan(AP_Param::Param_header const*, unsigned short*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n16×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::configured_in_storage() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::configured_in_storage() const\n0.00%\n(0.00%)\n3×"];
	"AP_Param::configured_in_storage() const" -> "AP_Param::find_var_info(unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::configured_in_storage() const" -> "AP_Param::scan(AP_Param::Param_header const*, unsigned short*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::convert_old_parameter(AP_Param::ConversionInfo const*, float, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::convert_old_parameter(AP_Param::ConversionInfo const*, float, unsigned char)\n0.00%\n(0.00%)\n36×"];
	"AP_Param::convert_old_parameter(AP_Param::ConversionInfo const*, float, unsigned char)" -> "AP_Param::scan(AP_Param::Param_header const*, unsigned short*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n36×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::convert_old_parameters(AP_Param::ConversionInfo const*, unsigned char, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::convert_old_parameters(AP_Param::ConversionInfo const*, unsigned char, unsigned char)\n0.04%\n(0.00%)\n12×"];
	"AP_Param::convert_old_parameters(AP_Param::ConversionInfo const*, unsigned char, unsigned char)" -> "AP_Param::flush()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n12×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::convert_old_parameters(AP_Param::ConversionInfo const*, unsigned char, unsigned char)" -> "AP_Param::scan(AP_Param::Param_header const*, unsigned short*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n27×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::convert_parameter_width(ap_var_type)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::convert_parameter_width(ap_var_type)\n0.01%\n(0.00%)\n16×"];
	"AP_Param::convert_parameter_width(ap_var_type)" -> "AP_Param::find_var_info(unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n32×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::convert_parameter_width(ap_var_type)" -> "AP_Param::scan(AP_Param::Param_header const*, unsigned short*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n32×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::copy_name_info(AP_Param::Info const*, AP_Param::GroupInfo const*, AP_Param::GroupNesting const&, unsigned char, char*, unsigned long, bool) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::copy_name_info(AP_Param::Info const*, AP_Param::GroupInfo const*, AP_Param::GroupNesting const&, unsigned char, char*, unsigned long, bool) const\n0.01%\n(0.00%)\n2459×"];
	"AP_Param::copy_name_info(AP_Param::Info const*, AP_Param::GroupInfo const*, AP_Param::GroupNesting const&, unsigned char, char*, unsigned long, bool) const" -> "__strncpy_sse2_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6411×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::copy_name_info(AP_Param::Info const*, AP_Param::GroupInfo const*, AP_Param::GroupNesting const&, unsigned char, char*, unsigned long, bool) const" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::copy_name_info(AP_Param::Info const*, AP_Param::GroupInfo const*, AP_Param::GroupNesting const&, unsigned char, char*, unsigned long, bool) const" -> strnlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4304×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::copy_name_token(AP_Param::ParamToken const&, char*, unsigned long, bool) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::copy_name_token(AP_Param::ParamToken const&, char*, unsigned long, bool) const\n0.04%\n(0.00%)\n2433×"];
	"AP_Param::copy_name_token(AP_Param::ParamToken const&, char*, unsigned long, bool) const" -> "AP_Param::copy_name_info(AP_Param::Info const*, AP_Param::GroupInfo const*, AP_Param::GroupNesting const&, unsigned char, char*, unsigned long, bool) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n2433×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::copy_name_token(AP_Param::ParamToken const&, char*, unsigned long, bool) const" -> "AP_Param::find_var_info_group(AP_Param::GroupInfo const*, unsigned short, unsigned int, unsigned char, long, unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n2323×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::count_parameters()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::count_parameters()\n0.12%\n(0.00%)\n33×"];
	"AP_Param::count_parameters()" -> "AP_Param::next_scalar(AP_Param::ParamToken*, ap_var_type*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n3436×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find(char const*, ap_var_type*, unsigned short*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::find(char const*, ap_var_type*, unsigned short*)\n0.02%\n(0.00%)\n319×"];
	"AP_Param::find(char const*, ap_var_type*, unsigned short*)" -> "AP_Param::find_group(char const*, unsigned short, long, AP_Param::GroupInfo const*, ap_var_type*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n283×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find(char const*, ap_var_type*, unsigned short*)" -> "__strcasecmp_avx" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n16096×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find(char const*, ap_var_type*, unsigned short*)" -> "__strncmp_sse42" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7259×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find(char const*, ap_var_type*, unsigned short*)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find(char const*, ap_var_type*, unsigned short*)" -> strnlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7258×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find_by_header_group(AP_Param::Param_header, void**, unsigned short, AP_Param::GroupInfo const*, unsigned int, unsigned char, long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::find_by_header_group(AP_Param::Param_header, void**, unsigned short, AP_Param::GroupInfo const*, unsigned int, unsigned char, long)\n0.00%\n(0.00%)\n49×"];
	"AP_Param::find_by_header_group(AP_Param::Param_header, void**, unsigned short, AP_Param::GroupInfo const*, unsigned int, unsigned char, long)" -> "AP_Param::find_by_header_group(AP_Param::Param_header, void**, unsigned short, AP_Param::GroupInfo const*, unsigned int, unsigned char, long)'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n39×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find_by_header_group(AP_Param::Param_header, void**, unsigned short, AP_Param::GroupInfo const*, unsigned int, unsigned char, long)'2" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::find_by_header_group(AP_Param::Param_header, void**, unsigned short, AP_Param::GroupInfo const*, unsigned int, unsigned char, long)'2\n0.00%\n(0.00%)\n77×"];
	"AP_Param::find_by_header_group(AP_Param::Param_header, void**, unsigned short, AP_Param::GroupInfo const*, unsigned int, unsigned char, long)'2" -> "AP_Param::find_by_header_group(AP_Param::Param_header, void**, unsigned short, AP_Param::GroupInfo const*, unsigned int, unsigned char, long)'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="38×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find_group(char const*, unsigned short, long, AP_Param::GroupInfo const*, ap_var_type*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::find_group(char const*, unsigned short, long, AP_Param::GroupInfo const*, ap_var_type*)\n0.00%\n(0.00%)\n283×"];
	"AP_Param::find_group(char const*, unsigned short, long, AP_Param::GroupInfo const*, ap_var_type*)" -> "AP_Param::find_group(char const*, unsigned short, long, AP_Param::GroupInfo const*, ap_var_type*)'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n104×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find_group(char const*, unsigned short, long, AP_Param::GroupInfo const*, ap_var_type*)" -> "__strcasecmp_avx" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2261×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find_group(char const*, unsigned short, long, AP_Param::GroupInfo const*, ap_var_type*)" -> "__strncasecmp_avx" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n811×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find_group(char const*, unsigned short, long, AP_Param::GroupInfo const*, ap_var_type*)" -> "__strncmp_sse42" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n599×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find_group(char const*, unsigned short, long, AP_Param::GroupInfo const*, ap_var_type*)" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n811×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find_group(char const*, unsigned short, long, AP_Param::GroupInfo const*, ap_var_type*)" -> strnlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n599×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find_group(char const*, unsigned short, long, AP_Param::GroupInfo const*, ap_var_type*)'2" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::find_group(char const*, unsigned short, long, AP_Param::GroupInfo const*, ap_var_type*)'2\n0.00%\n(0.00%)\n204×"];
	"AP_Param::find_group(char const*, unsigned short, long, AP_Param::GroupInfo const*, ap_var_type*)'2" -> "AP_Param::find_group(char const*, unsigned short, long, AP_Param::GroupInfo const*, ap_var_type*)'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="100×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find_group(char const*, unsigned short, long, AP_Param::GroupInfo const*, ap_var_type*)'2" -> "__strcasecmp_avx" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n220×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find_group(char const*, unsigned short, long, AP_Param::GroupInfo const*, ap_var_type*)'2" -> "__strncasecmp_avx" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n460×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find_group(char const*, unsigned short, long, AP_Param::GroupInfo const*, ap_var_type*)'2" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n460×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find_key_by_pointer_group(void const*, unsigned short, AP_Param::GroupInfo const*, long, unsigned short&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::find_key_by_pointer_group(void const*, unsigned short, AP_Param::GroupInfo const*, long, unsigned short&)\n0.00%\n(0.00%)\n228×"];
	"AP_Param::find_key_by_pointer_group(void const*, unsigned short, AP_Param::GroupInfo const*, long, unsigned short&)" -> "AP_Param::find_key_by_pointer_group(void const*, unsigned short, AP_Param::GroupInfo const*, long, unsigned short&)'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n127×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find_key_by_pointer_group(void const*, unsigned short, AP_Param::GroupInfo const*, long, unsigned short&)'2" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::find_key_by_pointer_group(void const*, unsigned short, AP_Param::GroupInfo const*, long, unsigned short&)'2\n0.00%\n(0.00%)\n164×"];
	"AP_Param::find_key_by_pointer_group(void const*, unsigned short, AP_Param::GroupInfo const*, long, unsigned short&)'2" -> "AP_Param::find_key_by_pointer_group(void const*, unsigned short, AP_Param::GroupInfo const*, long, unsigned short&)'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="37×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find_object(char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::find_object(char const*)\n0.00%\n(0.00%)\n2×"];
	"AP_Param::find_object(char const*)" -> "__strcasecmp_avx" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n182×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find_old_parameter(AP_Param::ConversionInfo const*, AP_Param*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::find_old_parameter(AP_Param::ConversionInfo const*, AP_Param*)\n0.00%\n(0.00%)\n1×"];
	"AP_Param::find_old_parameter(AP_Param::ConversionInfo const*, AP_Param*)" -> "AP_Param::scan(AP_Param::Param_header const*, unsigned short*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find_var_info(unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::find_var_info(unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const\n0.04%\n(0.01%)\n297×"];
	"AP_Param::find_var_info(unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const" -> "AP_Param::find_var_info_group(AP_Param::GroupInfo const*, unsigned short, unsigned int, unsigned char, long, unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n6942×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find_var_info_group(AP_Param::GroupInfo const*, unsigned short, unsigned int, unsigned char, long, unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::find_var_info_group(AP_Param::GroupInfo const*, unsigned short, unsigned int, unsigned char, long, unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const\n0.10%\n(0.04%)\n11095×"];
	"AP_Param::find_var_info_group(AP_Param::GroupInfo const*, unsigned short, unsigned int, unsigned char, long, unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const" -> "AP_Param::find_var_info_group(AP_Param::GroupInfo const*, unsigned short, unsigned int, unsigned char, long, unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n15961×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find_var_info_group(AP_Param::GroupInfo const*, unsigned short, unsigned int, unsigned char, long, unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const'2" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::find_var_info_group(AP_Param::GroupInfo const*, unsigned short, unsigned int, unsigned char, long, unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const'2\n0.06%\n(0.06%)\n33717×"];
	"AP_Param::find_var_info_group(AP_Param::GroupInfo const*, unsigned short, unsigned int, unsigned char, long, unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const'2" -> "AP_Param::find_var_info_group(AP_Param::GroupInfo const*, unsigned short, unsigned int, unsigned char, long, unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="17756×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::find_var_info_token(AP_Param::ParamToken const&, unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::find_var_info_token(AP_Param::ParamToken const&, unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const\n0.03%\n(0.00%)\n1945×"];
	"AP_Param::find_var_info_token(AP_Param::ParamToken const&, unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const" -> "AP_Param::find_var_info_group(AP_Param::GroupInfo const*, unsigned short, unsigned int, unsigned char, long, unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n1830×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::first(AP_Param::ParamToken*, ap_var_type*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::first(AP_Param::ParamToken*, ap_var_type*)\n0.00%\n(0.00%)\n2×"];
	"AP_Param::flush()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::flush()\n0.04%\n(0.00%)\n12×"];
	"AP_Param::flush()" -> "ByteBuffer::available() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n13×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::flush()" -> "HALSITL::Scheduler::delay(unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::flush()" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n13×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::flush()" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n13×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::load()\n0.00%\n(0.00%)\n47×"];
	"AP_Param::load()" -> "AP_Param::find_var_info(unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n47×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load()" -> "AP_Param::scan(AP_Param::Param_header const*, unsigned short*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n47×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load()" -> "StorageAccess::read_block(void*, unsigned short, unsigned long) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n47×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_all()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::load_all()\n0.03%\n(0.00%)\n1×"];
	"AP_Param::load_all()" -> "AP_Param::find_by_header_group(AP_Param::Param_header, void**, unsigned short, AP_Param::GroupInfo const*, unsigned int, unsigned char, long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n49×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_all()" -> "AP_Param::load_defaults_file(char const*, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_all()" -> "HALSITL::Scheduler::register_io_process(Functor<void>)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_all()" -> "HALSITL::Util::get_custom_defaults_file() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_all()" -> "StorageAccess::read_block(void*, unsigned short, unsigned long) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n103×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_all()" -> "__printf_chk" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_defaults_file(char const*, bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::load_defaults_file(char const*, bool)\n0.05%\n(0.00%)\n2×"];
	"AP_Param::load_defaults_file(char const*, bool)" -> "AP_Param::find(char const*, ap_var_type*, unsigned short*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n158×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_defaults_file(char const*, bool)" -> "AP_Param::read_param_defaults_file(char const*, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_defaults_file(char const*, bool)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_defaults_file(char const*, bool)" -> "fclose@@GLIBC_2.2.5" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_defaults_file(char const*, bool)" -> fgets [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n195×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_defaults_file(char const*, bool)" -> "fopen@@GLIBC_2.2.5" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_defaults_file(char const*, bool)" -> free [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_defaults_file(char const*, bool)" -> "operator delete[](void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_defaults_file(char const*, bool)" -> "operator new[](unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_defaults_file(char const*, bool)" -> strdup [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_defaults_file(char const*, bool)" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n158×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_defaults_file(char const*, bool)" -> strtof [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n158×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_defaults_file(char const*, bool)" -> "strtok_r" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n482×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_object_from_eeprom(void const*, AP_Param::GroupInfo const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::load_object_from_eeprom(void const*, AP_Param::GroupInfo const*)\n0.01%\n(0.00%)\n6×"];
	"AP_Param::load_object_from_eeprom(void const*, AP_Param::GroupInfo const*)" -> "AP_Param::find_key_by_pointer_group(void const*, unsigned short, AP_Param::GroupInfo const*, long, unsigned short&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n80×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_object_from_eeprom(void const*, AP_Param::GroupInfo const*)" -> "AP_Param::load_object_from_eeprom(void const*, AP_Param::GroupInfo const*)'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_object_from_eeprom(void const*, AP_Param::GroupInfo const*)" -> "StorageAccess::read_block(void*, unsigned short, unsigned long) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2704×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_object_from_eeprom(void const*, AP_Param::GroupInfo const*)'2" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::load_object_from_eeprom(void const*, AP_Param::GroupInfo const*)'2\n0.00%\n(0.00%)\n12×"];
	"AP_Param::load_object_from_eeprom(void const*, AP_Param::GroupInfo const*)'2" -> "AP_Param::find_key_by_pointer_group(void const*, unsigned short, AP_Param::GroupInfo const*, long, unsigned short&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n148×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_object_from_eeprom(void const*, AP_Param::GroupInfo const*)'2" -> "AP_Param::load_object_from_eeprom(void const*, AP_Param::GroupInfo const*)'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::load_object_from_eeprom(void const*, AP_Param::GroupInfo const*)'2" -> "StorageAccess::read_block(void*, unsigned short, unsigned long) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3016×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::next(AP_Param::ParamToken*, ap_var_type*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::next(AP_Param::ParamToken*, ap_var_type*)\n0.18%\n(0.00%)\n7923×"];
	"AP_Param::next(AP_Param::ParamToken*, ap_var_type*)" -> "AP_Param::next_group(unsigned short, AP_Param::GroupInfo const*, bool*, unsigned int, unsigned char, long, AP_Param::ParamToken*, ap_var_type*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.17%\n7926×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::next_group(unsigned short, AP_Param::GroupInfo const*, bool*, unsigned int, unsigned char, long, AP_Param::ParamToken*, ap_var_type*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::next_group(unsigned short, AP_Param::GroupInfo const*, bool*, unsigned int, unsigned char, long, AP_Param::ParamToken*, ap_var_type*)\n0.17%\n(0.04%)\n7926×"];
	"AP_Param::next_group(unsigned short, AP_Param::GroupInfo const*, bool*, unsigned int, unsigned char, long, AP_Param::ParamToken*, ap_var_type*)" -> "AP_Param::next_group(unsigned short, AP_Param::GroupInfo const*, bool*, unsigned int, unsigned char, long, AP_Param::ParamToken*, ap_var_type*)'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.13%\n21913×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::next_group(unsigned short, AP_Param::GroupInfo const*, bool*, unsigned int, unsigned char, long, AP_Param::ParamToken*, ap_var_type*)'2" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::next_group(unsigned short, AP_Param::GroupInfo const*, bool*, unsigned int, unsigned char, long, AP_Param::ParamToken*, ap_var_type*)'2\n0.13%\n(0.13%)\n52035×"];
	"AP_Param::next_group(unsigned short, AP_Param::GroupInfo const*, bool*, unsigned int, unsigned char, long, AP_Param::ParamToken*, ap_var_type*)'2" -> "AP_Param::next_group(unsigned short, AP_Param::GroupInfo const*, bool*, unsigned int, unsigned char, long, AP_Param::ParamToken*, ap_var_type*)'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="30122×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::next_scalar(AP_Param::ParamToken*, ap_var_type*)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::next_scalar(AP_Param::ParamToken*, ap_var_type*)\n0.21%\n(0.00%)\n5868×"];
	"AP_Param::next_scalar(AP_Param::ParamToken*, ap_var_type*)" -> "AP_Param::find_var_info_token(AP_Param::ParamToken const&, unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n1945×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::next_scalar(AP_Param::ParamToken*, ap_var_type*)" -> "AP_Param::next(AP_Param::ParamToken*, ap_var_type*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.18%\n7923×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::read_param_defaults_file(char const*, bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::read_param_defaults_file(char const*, bool)\n0.04%\n(0.00%)\n2×"];
	"AP_Param::read_param_defaults_file(char const*, bool)" -> "AP_Param::find(char const*, ap_var_type*, unsigned short*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n158×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::read_param_defaults_file(char const*, bool)" -> "AP_Param::find_var_info(unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n156×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::read_param_defaults_file(char const*, bool)" -> "AP_Param::scan(AP_Param::Param_header const*, unsigned short*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n156×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::read_param_defaults_file(char const*, bool)" -> "AP_Param::set_float(float, ap_var_type)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n134×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::read_param_defaults_file(char const*, bool)" -> "fclose@@GLIBC_2.2.5" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::read_param_defaults_file(char const*, bool)" -> fgets [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n196×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::read_param_defaults_file(char const*, bool)" -> "fopen@@GLIBC_2.2.5" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::read_param_defaults_file(char const*, bool)" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n158×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::read_param_defaults_file(char const*, bool)" -> strtof [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n158×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::read_param_defaults_file(char const*, bool)" -> "strtok_r" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n474×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::reload_defaults_file(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::reload_defaults_file(bool)\n0.03%\n(0.00%)\n1×"];
	"AP_Param::reload_defaults_file(bool)" -> "AP_Param::load_defaults_file(char const*, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::reload_defaults_file(bool)" -> "HALSITL::Util::get_custom_defaults_file() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::reload_defaults_file(bool)" -> "__printf_chk" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::save(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::save(bool)\n0.00%\n(0.00%)\n26×"];
	"AP_Param::save(bool)" -> "ByteBuffer::space() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n26×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::save(bool)" -> "ByteBuffer::write(unsigned char const*, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n26×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::save(bool)" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n26×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::save(bool)" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n26×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::save_sync(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::save_sync(bool)\n0.13%\n(0.00%)\n26×"];
	"AP_Param::save_sync(bool)" -> "AP_Param::copy_name_info(AP_Param::Info const*, AP_Param::GroupInfo const*, AP_Param::GroupNesting const&, unsigned char, char*, unsigned long, bool) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n26×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::save_sync(bool)" -> "AP_Param::find_var_info(unsigned int*, AP_Param::GroupInfo const*&, AP_Param::GroupNesting&, unsigned char*) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n26×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::save_sync(bool)" -> "AP_Param::scan(AP_Param::Param_header const*, unsigned short*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n26×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::save_sync(bool)" -> "AP_Param::send_parameter(char const*, ap_var_type, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n26×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::save_sync(bool)" -> "StorageAccess::write_block(unsigned short, void const*, unsigned long) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n26×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::scan(AP_Param::Param_header const*, unsigned short*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::scan(AP_Param::Param_header const*, unsigned short*)\n0.02%\n(0.01%)\n344×"];
	"AP_Param::scan(AP_Param::Param_header const*, unsigned short*)" -> "StorageAccess::read_block(void*, unsigned short, unsigned long) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n15245×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::send_parameter(char const*, ap_var_type, unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::send_parameter(char const*, ap_var_type, unsigned char) const\n0.12%\n(0.00%)\n26×"];
	"AP_Param::send_parameter(char const*, ap_var_type, unsigned char) const" -> "GCS::send_parameter_value(char const*, ap_var_type, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n32×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::send_parameter(char const*, ap_var_type, unsigned char) const" -> "__strncpy_sse2_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::send_parameter(char const*, ap_var_type, unsigned char) const" -> "gcs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n32×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::send_parameter(char const*, ap_var_type, unsigned char) const" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::set_float(float, ap_var_type)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::set_float(float, ap_var_type)\n0.00%\n(0.00%)\n134×"];
	"AP_Param::set_float(float, ap_var_type)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n78×", labeldistance="0.50", penwidth="0.50"];
	"AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)\n0.00%\n(0.00%)\n147×"];
	"AP_Param::setup_sketch_defaults()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Param::setup_sketch_defaults()\n0.00%\n(0.00%)\n1×"];
	"AP_Param::setup_sketch_defaults()" -> "StorageAccess::read_block(void*, unsigned short, unsigned long) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Proximity::AP_Proximity()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Proximity::AP_Proximity()\n0.00%\n(0.00%)\n1×"];
	"AP_Proximity::AP_Proximity()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Proximity::distance_max() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Proximity::distance_max() const\n0.00%\n(0.00%)\n721×"];
	"AP_Proximity::distance_min() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Proximity::distance_min() const\n0.00%\n(0.00%)\n721×"];
	"AP_Proximity::get_closest_object(float&, float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Proximity::get_closest_object(float&, float&) const\n0.00%\n(0.00%)\n7×"];
	"AP_Proximity::get_status() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Proximity::get_status() const\n0.00%\n(0.00%)\n5704×"];
	"AP_Proximity::get_upward_distance(float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Proximity::get_upward_distance(float&) const\n0.00%\n(0.00%)\n721×"];
	"AP_Proximity::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Proximity::init()\n0.00%\n(0.00%)\n1×"];
	"AP_Proximity::sensor_enabled() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Proximity::sensor_enabled() const\n0.00%\n(0.00%)\n721×"];
	"AP_Proximity::sensor_failed() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Proximity::sensor_failed() const\n0.00%\n(0.00%)\n721×"];
	"AP_Proximity::sensor_present() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Proximity::sensor_present() const\n0.00%\n(0.00%)\n721×"];
	"AP_Proximity::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Proximity::update()\n0.00%\n(0.00%)\n36035×"];
	"AP_RCProtocol::check_added_uart()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RCProtocol::check_added_uart()\n0.01%\n(0.01%)\n326290×"];
	"AP_RCProtocol::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RCProtocol::init()\n0.00%\n(0.00%)\n1×"];
	"AP_RCProtocol::init()" -> "AP_RCProtocol_Backend::AP_RCProtocol_Backend(AP_RCProtocol&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"AP_RCProtocol::init()" -> "AP_RCProtocol_FPort::AP_RCProtocol_FPort(AP_RCProtocol&, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_RCProtocol::init()" -> "AP_RCProtocol_IBUS::AP_RCProtocol_IBUS(AP_RCProtocol&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_RCProtocol::init()" -> "AP_RCProtocol_SBUS::AP_RCProtocol_SBUS(AP_RCProtocol&, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_RCProtocol::init()" -> "SoftSerial::SoftSerial(unsigned int, SoftSerial::serial_config)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_RCProtocol::init()" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9×", labeldistance="0.50", penwidth="0.50"];
	"AP_RCProtocol::new_input()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RCProtocol::new_input()\n0.02%\n(0.01%)\n18018×"];
	"AP_RCProtocol::new_input()" -> "AP_RCProtocol::check_added_uart()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18018×", labeldistance="0.50", penwidth="0.50"];
	"AP_RCProtocol::new_input()" -> "AP_RCProtocol_Backend::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n144144×", labeldistance="0.50", penwidth="0.50"];
	"AP_RCProtocol::new_input()" -> "AP_RCProtocol_DSM::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18018×", labeldistance="0.50", penwidth="0.50"];
	"AP_RCProtocol::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RCProtocol::update()\n0.01%\n(0.00%)\n308272×"];
	"AP_RCProtocol::update()" -> "AP_RCProtocol::check_added_uart()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n308272×", labeldistance="0.50", penwidth="0.50"];
	"AP_RCProtocol_Backend::AP_RCProtocol_Backend(AP_RCProtocol&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RCProtocol_Backend::AP_RCProtocol_Backend(AP_RCProtocol&)\n0.00%\n(0.00%)\n9×"];
	"AP_RCProtocol_Backend::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RCProtocol_Backend::update()\n0.00%\n(0.00%)\n144144×"];
	"AP_RCProtocol_DSM::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RCProtocol_DSM::update()\n0.00%\n(0.00%)\n18018×"];
	"AP_RCProtocol_FPort::AP_RCProtocol_FPort(AP_RCProtocol&, bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RCProtocol_FPort::AP_RCProtocol_FPort(AP_RCProtocol&, bool)\n0.00%\n(0.00%)\n1×"];
	"AP_RCProtocol_FPort::AP_RCProtocol_FPort(AP_RCProtocol&, bool)" -> "AP_RCProtocol_Backend::AP_RCProtocol_Backend(AP_RCProtocol&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_RCProtocol_FPort::AP_RCProtocol_FPort(AP_RCProtocol&, bool)" -> "SoftSerial::SoftSerial(unsigned int, SoftSerial::serial_config)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_RCProtocol_IBUS::AP_RCProtocol_IBUS(AP_RCProtocol&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RCProtocol_IBUS::AP_RCProtocol_IBUS(AP_RCProtocol&)\n0.00%\n(0.00%)\n1×"];
	"AP_RCProtocol_IBUS::AP_RCProtocol_IBUS(AP_RCProtocol&)" -> "AP_RCProtocol_Backend::AP_RCProtocol_Backend(AP_RCProtocol&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_RCProtocol_IBUS::AP_RCProtocol_IBUS(AP_RCProtocol&)" -> "SoftSerial::SoftSerial(unsigned int, SoftSerial::serial_config)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_RCProtocol_SBUS::AP_RCProtocol_SBUS(AP_RCProtocol&, bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RCProtocol_SBUS::AP_RCProtocol_SBUS(AP_RCProtocol&, bool)\n0.00%\n(0.00%)\n2×"];
	"AP_RCProtocol_SBUS::AP_RCProtocol_SBUS(AP_RCProtocol&, bool)" -> "AP_RCProtocol_Backend::AP_RCProtocol_Backend(AP_RCProtocol&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_RCProtocol_SBUS::AP_RCProtocol_SBUS(AP_RCProtocol&, bool)" -> "SoftSerial::SoftSerial(unsigned int, SoftSerial::serial_config)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_RPM::AP_RPM()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RPM::AP_RPM()\n0.00%\n(0.00%)\n1×"];
	"AP_RPM::AP_RPM()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_RPM::enabled(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RPM::enabled(unsigned char) const\n0.00%\n(0.00%)\n15856×"];
	"AP_RPM::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RPM::init()\n0.00%\n(0.00%)\n1×"];
	"AP_RPM::init()" -> "AP_RPM_SITL::AP_RPM_SITL(AP_RPM&, unsigned char, AP_RPM::RPM_State&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_RPM::init()" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_RPM::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RPM::update()\n0.00%\n(0.00%)\n7207×"];
	"AP_RPM_Backend::AP_RPM_Backend(AP_RPM&, unsigned char, AP_RPM::RPM_State&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RPM_Backend::AP_RPM_Backend(AP_RPM&, unsigned char, AP_RPM::RPM_State&)\n0.00%\n(0.00%)\n2×"];
	"AP_RPM_SITL::AP_RPM_SITL(AP_RPM&, unsigned char, AP_RPM::RPM_State&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RPM_SITL::AP_RPM_SITL(AP_RPM&, unsigned char, AP_RPM::RPM_State&)\n0.00%\n(0.00%)\n2×"];
	"AP_RPM_SITL::AP_RPM_SITL(AP_RPM&, unsigned char, AP_RPM::RPM_State&)" -> "AP::sitl()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_RPM_SITL::AP_RPM_SITL(AP_RPM&, unsigned char, AP_RPM::RPM_State&)" -> "AP_RPM_Backend::AP_RPM_Backend(AP_RPM&, unsigned char, AP_RPM::RPM_State&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_RSSI::AP_RSSI()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RSSI::AP_RSSI()\n0.00%\n(0.00%)\n1×"];
	"AP_RSSI::AP_RSSI()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_RSSI::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RSSI::init()\n0.00%\n(0.00%)\n1×"];
	"AP_RSSI::init()" -> "HALSITL::AnalogIn::channel(short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_RSSI::read_receiver_rssi_uint8()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RSSI::read_receiver_rssi_uint8()\n0.00%\n(0.00%)\n721×"];
	"AP_RTC::AP_RTC()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RTC::AP_RTC()\n0.00%\n(0.00%)\n1×"];
	"AP_RTC::AP_RTC()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_RTC::AP_RTC()" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_RTC::get_utc_usec(unsigned long&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RTC::get_utc_usec(unsigned long&) const\n0.00%\n(0.00%)\n721×"];
	"AP_RTC::get_utc_usec(unsigned long&) const" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n720×", labeldistance="0.50", penwidth="0.50"];
	"AP_RTC::set_utc_usec(unsigned long, AP_RTC::source_type)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RTC::set_utc_usec(unsigned long, AP_RTC::source_type)\n0.00%\n(0.00%)\n9004×"];
	"AP_RTC::set_utc_usec(unsigned long, AP_RTC::source_type)" -> "AP_HAL::Util::set_hw_rtc(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_RTC::set_utc_usec(unsigned long, AP_RTC::source_type)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_RTC::set_utc_usec(unsigned long, AP_RTC::source_type)" -> "GCS_MAVLINK::update_signing_timestamp(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_RTC::set_utc_usec(unsigned long, AP_RTC::source_type)" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_RTC::set_utc_usec(unsigned long, AP_RTC::source_type)" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Rally::AP_Rally()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Rally::AP_Rally()\n0.00%\n(0.00%)\n1×"];
	"AP_Rally::AP_Rally()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Rally::calc_best_rally_or_home_location(Location const&, float) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Rally::calc_best_rally_or_home_location(Location const&, float) const\n0.00%\n(0.00%)\n1×"];
	"AP_Rally::calc_best_rally_or_home_location(Location const&, float) const" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Rally::calc_best_rally_or_home_location(Location const&, float) const" -> "AP_Rally::find_nearest_rally_point(Location const&, RallyLocation&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Rally::calc_best_rally_or_home_location(Location const&, float) const" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Rally::find_nearest_rally_point(Location const&, RallyLocation&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Rally::find_nearest_rally_point(Location const&, RallyLocation&) const\n0.00%\n(0.00%)\n1×"];
	"AP_Rally::get_rally_point_with_index(unsigned char, RallyLocation&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Rally::get_rally_point_with_index(unsigned char, RallyLocation&) const\n0.00%\n(0.00%)\n1×"];
	"AP_RangeFinder_Params::AP_RangeFinder_Params()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RangeFinder_Params::AP_RangeFinder_Params()\n0.00%\n(0.00%)\n10×"];
	"AP_RangeFinder_Params::AP_RangeFinder_Params()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10×", labeldistance="0.50", penwidth="0.50"];
	"AP_Relay::AP_Relay()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Relay::AP_Relay()\n0.00%\n(0.00%)\n1×"];
	"AP_Relay::AP_Relay()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Relay::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Relay::init()\n0.00%\n(0.00%)\n1×"];
	"AP_Relay::init()" -> "HALSITL::GPIO::pinMode(unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Relay::init()" -> "HALSITL::GPIO::write(unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_RobotisServo::AP_RobotisServo()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RobotisServo::AP_RobotisServo()\n0.00%\n(0.00%)\n1×"];
	"AP_RobotisServo::AP_RobotisServo()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_RobotisServo::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RobotisServo::update()\n0.02%\n(0.02%)\n72070×"];
	"AP_RobotisServo::update()" -> "AP::serialmanager()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_RobotisServo::update()" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_RobotisServo::update()" -> "AP_SerialManager::find_serial(AP_SerialManager::SerialProtocol, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_RunCam::AP_RunCam()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RunCam::AP_RunCam()\n0.00%\n(0.00%)\n1×"];
	"AP_RunCam::AP_RunCam()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_RunCam::AP_RunCam()" -> "short constrain_value<short>(short, short, short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_RunCam::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RunCam::init()\n0.00%\n(0.00%)\n1×"];
	"AP_RunCam::init()" -> "AP_SerialManager::find_serial(AP_SerialManager::SerialProtocol, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_RunCam::pre_arm_check(char*, unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RunCam::pre_arm_check(char*, unsigned char) const\n0.00%\n(0.00%)\n7×"];
	"AP_RunCam::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_RunCam::update()\n0.00%\n(0.00%)\n9008×"];
	"AP_SBusOut::AP_SBusOut()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_SBusOut::AP_SBusOut()\n0.00%\n(0.00%)\n1×"];
	"AP_SBusOut::AP_SBusOut()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_SBusOut::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_SBusOut::update()\n0.01%\n(0.01%)\n72070×"];
	"AP_SBusOut::update()" -> "AP_SerialManager::find_serial(AP_SerialManager::SerialProtocol, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::AP_Scheduler(Functor<void>)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Scheduler::AP_Scheduler(Functor<void>)\n0.00%\n(0.00%)\n1×"];
	"AP_Scheduler::AP_Scheduler(Functor<void>)" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::AP_Scheduler(Functor<void>)" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::Log_Write_Performance()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Scheduler::Log_Write_Performance()\n0.00%\n(0.00%)\n18×"];
	"AP_Scheduler::Log_Write_Performance()" -> "AP::PerfInfo::get_max_time() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::Log_Write_Performance()" -> "AP::PerfInfo::get_num_long_running() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::Log_Write_Performance()" -> "AP::PerfInfo::get_num_loops() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::Log_Write_Performance()" -> "AP::internalerror()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n36×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::Log_Write_Performance()" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::Log_Write_Performance()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::Log_Write_Performance()" -> "AP_Logger::WriteCriticalBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::Log_Write_Performance()" -> "HALSITL::Util::available_memory()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::init(AP_Scheduler::Task const*, unsigned char, unsigned int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Scheduler::init(AP_Scheduler::Task const*, unsigned char, unsigned int)\n0.00%\n(0.00%)\n1×"];
	"AP_Scheduler::init(AP_Scheduler::Task const*, unsigned char, unsigned int)" -> "AP::PerfInfo::reset()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::init(AP_Scheduler::Task const*, unsigned char, unsigned int)" -> "AP::PerfInfo::set_loop_rate(unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::init(AP_Scheduler::Task const*, unsigned char, unsigned int)" -> "AP::vehicle()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::init(AP_Scheduler::Task const*, unsigned char, unsigned int)" -> "AP_Vehicle::get_common_scheduler_tasks(AP_Scheduler::Task const*&, unsigned char&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::init(AP_Scheduler::Task const*, unsigned char, unsigned int)" -> "HALSITL::Semaphore::take(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::init(AP_Scheduler::Task const*, unsigned char, unsigned int)" -> "operator new[](unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::load_average()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Scheduler::load_average()\n0.00%\n(0.00%)\n721×"];
	"AP_Scheduler::loop()" [color="#f92501", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Scheduler::loop()\n96.35%\n(0.06%)\n72070×"];
	"AP_Scheduler::loop()" -> "AP::PerfInfo::check_loop_time(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n72069×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::loop()" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::loop()" -> "AP::sitl()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::loop()" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n144140×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::loop()" -> "AP_InertialSensor::wait_for_sample()" [arrowsize="0.58", color="#0b9f6b", fontcolor="#0b9f6b", fontsize="10.00", label="33.79%\n72070×", labeldistance="1.35", penwidth="1.35"];
	"AP_Scheduler::loop()" -> "AP_Scheduler::run(unsigned int)" [arrowsize="0.42", color="#0c648a", fontcolor="#0c648a", fontsize="10.00", label="17.55%\n72070×", labeldistance="0.70", penwidth="0.70"];
	"AP_Scheduler::loop()" -> "HALSITL::Scheduler::delay_microseconds(unsigned short)" [arrowsize="0.42", color="#0c6489", fontcolor="#0c6489", fontsize="10.00", label="17.43%\n144140×", labeldistance="0.70", penwidth="0.70"];
	"AP_Scheduler::loop()" -> "HALSITL::Semaphore::give()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::loop()" -> "HALSITL::Semaphore::take(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::loop()" -> "void Functor<void>::method_wrapper<AP_Vehicle, &AP_Vehicle::fast_loop>(void*)" [arrowsize="0.52", color="#0c9789", fontcolor="#0c9789", fontsize="10.00", label="27.39%\n72070×", labeldistance="1.10", penwidth="1.10"];
	"AP_Scheduler::run(unsigned int)" [color="#0c648a", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Scheduler::run(unsigned int)\n17.55%\n(1.48%)\n72070×"];
	"AP_Scheduler::run(unsigned int)" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n924693×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "fill_nanf_stack()" [arrowsize="0.35", color="#0d3e80", fontcolor="#0d3e80", fontsize="10.00", label="10.60%\n852623×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<AC_Fence, &AC_Fence::update>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<AC_Sprayer, &AC_Sprayer::update>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n542×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<AP_Baro, &AP_Baro::accumulate>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<AP_Beacon, &AP_Beacon::update>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<AP_Button, &AP_Button::update>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n901×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<AP_Camera, &AP_Camera::update_trigger>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<AP_Gripper, &AP_Gripper::update>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<AP_GyroFFT, &AP_GyroFFT::sample_gyros>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<AP_GyroFFT, &AP_GyroFFT::update_parameters>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n180×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<AP_InertialSensor, &AP_InertialSensor::periodic>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<AP_Logger, &AP_Logger::periodic_tasks>(void*)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.26%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<AP_Mount, &AP_Mount::update>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<AP_Notify, &AP_Notify::update>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<AP_Proximity, &AP_Proximity::update>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n36035×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<AP_RunCam, &AP_RunCam::update>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<AP_Scheduler, &AP_Scheduler::update_logging>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<AP_ServoRelayEvents, &AP_ServoRelayEvents::update_events>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<AP_Stats, &AP_Stats::update>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n180×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<AP_TempCalibration, &AP_TempCalibration::update>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<AP_Vehicle, &AP_Vehicle::send_watchdog_reset_statustext>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::accel_cal_update>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::arm_motors_check>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::auto_disarm_check>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::auto_trim>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::avoidance_adsb_update>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::check_vibration>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::compass_cal_update>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n18017×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::ekf_check>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::fourhundred_hz_logging>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::gpsglitch_check>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::landinggear_update>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::lost_vehicle_check>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::one_hz_loop>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n180×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::rc_loop>(void*)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.23%\n18017×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::read_rangefinder>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n3603×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::rpm_update>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n7207×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::run_nav_updates>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::standby_update>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18017×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::ten_hz_logging_loop>(void*)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.43%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::terrain_update>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::three_hz_loop>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n542×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::throttle_loop>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::twentyfive_hz_logging>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n4504×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::update_GPS>(void*)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.47%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::update_altitude>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::update_batt_compass>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.09%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::update_precland>(void*)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.69%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<Copter, &Copter::update_throttle_hover>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n18017×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<GCS, &GCS::update_receive>(void*)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.75%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<GCS, &GCS::update_send>(void*)" [arrowsize="0.35", color="#0d1575", fontcolor="#0d1575", fontsize="10.00", label="1.96%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<ModeSmartRTL, &ModeSmartRTL::save_position>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n542×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<OpticalFlow, &OpticalFlow::update>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n36035×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::run(unsigned int)" -> "void Functor<void>::method_wrapper<RC_Channels, &RC_Channels::read_aux_all>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::time_available_usec()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Scheduler::time_available_usec()\n0.06%\n(0.03%)\n256098×"];
	"AP_Scheduler::time_available_usec()" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n256098×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::update_logging()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Scheduler::update_logging()\n0.00%\n(0.00%)\n18×"];
	"AP_Scheduler::update_logging()" -> "AP::PerfInfo::reset()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::update_logging()" -> "AP::PerfInfo::set_loop_rate(unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::update_logging()" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::update_logging()" -> "AP_Logger::should_log(unsigned int) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scheduler::update_logging()" -> "AP_Scheduler::Log_Write_Performance()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scripting::AP_Scripting()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Scripting::AP_Scripting()\n0.00%\n(0.00%)\n1×"];
	"AP_Scripting::AP_Scripting()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Scripting::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Scripting::init()\n0.00%\n(0.00%)\n1×"];
	"AP_SerialManager::AP_SerialManager()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_SerialManager::AP_SerialManager()\n0.00%\n(0.00%)\n1×"];
	"AP_SerialManager::AP_SerialManager()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_SerialManager::find_baudrate(AP_SerialManager::SerialProtocol, unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_SerialManager::find_baudrate(AP_SerialManager::SerialProtocol, unsigned char) const\n0.00%\n(0.00%)\n3×"];
	"AP_SerialManager::find_serial(AP_SerialManager::SerialProtocol, unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_SerialManager::find_serial(AP_SerialManager::SerialProtocol, unsigned char) const\n0.00%\n(0.00%)\n16×"];
	"AP_SerialManager::get_mavlink_channel(AP_SerialManager::SerialProtocol, unsigned char, mavlink_channel_t&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_SerialManager::get_mavlink_channel(AP_SerialManager::SerialProtocol, unsigned char, mavlink_channel_t&) const\n0.00%\n(0.00%)\n3×"];
	"AP_SerialManager::get_mavlink_protocol(mavlink_channel_t) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_SerialManager::get_mavlink_protocol(mavlink_channel_t) const\n0.00%\n(0.00%)\n4×"];
	"AP_SerialManager::get_passthru(AP_HAL::UARTDriver*&, AP_HAL::UARTDriver*&, unsigned char&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_SerialManager::get_passthru(AP_HAL::UARTDriver*&, AP_HAL::UARTDriver*&, unsigned char&) const\n0.00%\n(0.00%)\n72180×"];
	"AP_SerialManager::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_SerialManager::init()\n0.00%\n(0.00%)\n1×"];
	"AP_SerialManager::init()" -> "HALSITL::UARTDriver::begin(unsigned int, unsigned short, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_SerialManager::init_console()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_SerialManager::init_console()\n0.00%\n(0.00%)\n1×"];
	"AP_SerialManager::init_console()" -> "HALSITL::UARTDriver::begin(unsigned int, unsigned short, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_SerialManager::set_blocking_writes_all(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_SerialManager::set_blocking_writes_all(bool)\n0.00%\n(0.00%)\n1×"];
	"AP_SerialManager::set_blocking_writes_all(bool)" -> "HALSITL::UARTDriver::set_blocking_writes(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"AP_ServoRelayEvents::update_events()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_ServoRelayEvents::update_events()\n0.00%\n(0.00%)\n9008×"];
	"AP_SmartRTL::AP_SmartRTL(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_SmartRTL::AP_SmartRTL(bool)\n0.00%\n(0.00%)\n1×"];
	"AP_SmartRTL::AP_SmartRTL(bool)" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::AP_SmartRTL(bool)" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::add_point(Vector3<float> const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_SmartRTL::add_point(Vector3<float> const&)\n0.00%\n(0.00%)\n413×"];
	"AP_SmartRTL::add_point(Vector3<float> const&)" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n207×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::add_point(Vector3<float> const&)" -> "AP_Logger::Write_SRTL(bool, unsigned short, unsigned short, unsigned char, Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n207×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::add_point(Vector3<float> const&)" -> "HALSITL::Semaphore::give()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n413×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::add_point(Vector3<float> const&)" -> "HALSITL::Semaphore::take_nonblocking()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n413×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::detect_loops() [clone .part.4] [clone .constprop.15]" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_SmartRTL::detect_loops() [clone .part.4] [clone .constprop.15]\n0.00%\n(0.00%)\n3×"];
	"AP_SmartRTL::detect_loops() [clone .part.4] [clone .constprop.15]" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n12×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::detect_loops() [clone .part.4] [clone .constprop.15]" -> "AP_SmartRTL::segment_segment_dist(Vector3<float> const&, Vector3<float> const&, Vector3<float> const&, Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::detect_simplifications()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_SmartRTL::detect_simplifications()\n0.00%\n(0.00%)\n5×"];
	"AP_SmartRTL::detect_simplifications()" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::detect_simplifications()" -> "Vector3<float>::distance_to_segment(Vector3<float> const&, Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n242×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_SmartRTL::init()\n0.00%\n(0.00%)\n1×"];
	"AP_SmartRTL::init()" -> "HALSITL::Scheduler::register_io_process(Functor<void>)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::init()" -> calloc [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::init()" -> "short constrain_value<short>(short, short, short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::remove_points_by_simplify_bitmask()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_SmartRTL::remove_points_by_simplify_bitmask()\n0.00%\n(0.00%)\n4×"];
	"AP_SmartRTL::remove_points_by_simplify_bitmask()" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n194×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::remove_points_by_simplify_bitmask()" -> "AP_Logger::Write_SRTL(bool, unsigned short, unsigned short, unsigned char, Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n194×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::remove_points_by_simplify_bitmask()" -> "HALSITL::Semaphore::give()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::remove_points_by_simplify_bitmask()" -> "HALSITL::Semaphore::take_nonblocking()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::routine_cleanup(unsigned short, unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_SmartRTL::routine_cleanup(unsigned short, unsigned short)\n0.06%\n(0.06%)\n231270×"];
	"AP_SmartRTL::routine_cleanup(unsigned short, unsigned short)" -> "AP_SmartRTL::detect_loops() [clone .part.4] [clone .constprop.15]" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::routine_cleanup(unsigned short, unsigned short)" -> "AP_SmartRTL::detect_simplifications()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::routine_cleanup(unsigned short, unsigned short)" -> "AP_SmartRTL::remove_points_by_simplify_bitmask()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::segment_segment_dist(Vector3<float> const&, Vector3<float> const&, Vector3<float> const&, Vector3<float> const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_SmartRTL::segment_segment_dist(Vector3<float> const&, Vector3<float> const&, Vector3<float> const&, Vector3<float> const&)\n0.00%\n(0.00%)\n6×"];
	"AP_SmartRTL::segment_segment_dist(Vector3<float> const&, Vector3<float> const&, Vector3<float> const&, Vector3<float> const&)" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::segment_segment_dist(Vector3<float> const&, Vector3<float> const&, Vector3<float> const&, Vector3<float> const&)" -> "Vector3<float>::operator*(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n30×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::segment_segment_dist(Vector3<float> const&, Vector3<float> const&, Vector3<float> const&, Vector3<float> const&)" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n24×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::segment_segment_dist(Vector3<float> const&, Vector3<float> const&, Vector3<float> const&, Vector3<float> const&)" -> "Vector3<float>::operator+(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n24×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::segment_segment_dist(Vector3<float> const&, Vector3<float> const&, Vector3<float> const&, Vector3<float> const&)" -> "Vector3<float>::operator-(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n24×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::segment_segment_dist(Vector3<float> const&, Vector3<float> const&, Vector3<float> const&, Vector3<float> const&)" -> "Vector3<float>::operator/(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::segment_segment_dist(Vector3<float> const&, Vector3<float> const&, Vector3<float> const&, Vector3<float> const&)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n12×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::set_home(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_SmartRTL::set_home(bool)\n0.00%\n(0.00%)\n3×"];
	"AP_SmartRTL::set_home(bool)" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::set_home(bool)" -> "AP_AHRS_NavEKF::get_relative_position_NED_origin(Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::set_home(bool)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::set_home(bool)" -> "AP_SmartRTL::add_point(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::update(bool, bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_SmartRTL::update(bool, bool)\n0.00%\n(0.00%)\n542×"];
	"AP_SmartRTL::update(bool, bool)" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n412×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::update(bool, bool)" -> "AP_AHRS_NavEKF::get_relative_position_NED_origin(Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n412×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::update(bool, bool)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n412×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::update(bool, bool)" -> "AP_SmartRTL::add_point(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n412×", labeldistance="0.50", penwidth="0.50"];
	"AP_SmartRTL::update(bool, bool)" -> "AP_SmartRTL::set_home(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Stats::AP_Stats()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Stats::AP_Stats()\n0.00%\n(0.00%)\n1×"];
	"AP_Stats::AP_Stats()" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Stats::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Stats::init()\n0.00%\n(0.00%)\n1×"];
	"AP_Stats::init()" -> "AP_Param::save(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Stats::set_flying(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Stats::set_flying(bool)\n0.00%\n(0.00%)\n2×"];
	"AP_Stats::set_flying(bool)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Stats::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Stats::update()\n0.00%\n(0.00%)\n180×"];
	"AP_Stats::update()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n190×", labeldistance="0.50", penwidth="0.50"];
	"AP_Stats::update()" -> "AP_Param::save(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10×", labeldistance="0.50", penwidth="0.50"];
	"AP_Stats::update()" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n185×", labeldistance="0.50", penwidth="0.50"];
	"AP_Stats::update()" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n185×", labeldistance="0.50", penwidth="0.50"];
	"AP_TempCalibration::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_TempCalibration::update()\n0.00%\n(0.00%)\n1802×"];
	"AP_Terrain::AP_Terrain(AP_Mission const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Terrain::AP_Terrain(AP_Mission const&)\n0.00%\n(0.00%)\n1×"];
	"AP_Terrain::AP_Terrain(AP_Mission const&)" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::AP_Terrain(AP_Mission const&)" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::allocate()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Terrain::allocate()\n0.00%\n(0.00%)\n3244×"];
	"AP_Terrain::calculate_grid_info(Location const&, AP_Terrain::grid_info&) const" [color="#0d1676", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Terrain::calculate_grid_info(Location const&, AP_Terrain::grid_info&) const\n2.23%\n(1.08%)\n961437×"];
	"AP_Terrain::calculate_grid_info(Location const&, AP_Terrain::grid_info&) const" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n961437×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::calculate_grid_info(Location const&, AP_Terrain::grid_info&) const" -> "Location::get_distance_NE(Location const&) const" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.59%\n961437×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::calculate_grid_info(Location const&, AP_Terrain::grid_info&) const" -> "Location::offset(float, float)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.53%\n961437×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::check_bitmap(AP_Terrain::grid_block const&, unsigned char, unsigned char)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Terrain::check_bitmap(AP_Terrain::grid_block const&, unsigned char, unsigned char)\n0.25%\n(0.25%)\n3769593×"];
	"AP_Terrain::find_grid_cache(AP_Terrain::grid_info const&)" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Terrain::find_grid_cache(AP_Terrain::grid_info const&)\n0.47%\n(0.30%)\n962157×"];
	"AP_Terrain::find_grid_cache(AP_Terrain::grid_info const&)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.17%\n962157×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::find_io_idx(AP_Terrain::GridCacheState)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Terrain::find_io_idx(AP_Terrain::GridCacheState)\n0.00%\n(0.00%)\n14×"];
	"AP_Terrain::get_block_crc(AP_Terrain::grid_block&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Terrain::get_block_crc(AP_Terrain::grid_block&)\n0.00%\n(0.00%)\n14×"];
	"AP_Terrain::get_block_crc(AP_Terrain::grid_block&)" -> "crc16_ccitt(unsigned char const*, unsigned int, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::get_statistics(unsigned short&, unsigned short&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Terrain::get_statistics(unsigned short&, unsigned short&) const\n0.00%\n(0.00%)\n196×"];
	"AP_Terrain::get_statistics(unsigned short&, unsigned short&) const" -> "__popcountdi2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4480×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::height_above_terrain(float&, bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Terrain::height_above_terrain(float&, bool)\n0.04%\n(0.00%)\n3542×"];
	"AP_Terrain::height_above_terrain(float&, bool)" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7083×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::height_above_terrain(float&, bool)" -> "AP_AHRS_NavEKF::get_position(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n3542×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::height_above_terrain(float&, bool)" -> "AP_AHRS_NavEKF::get_relative_position_D_home(float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n3541×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::height_above_terrain(float&, bool)" -> "AP_Terrain::height_amsl(Location const&, float&, bool) [clone .part.1]" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n7083×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::height_above_terrain(float&, bool)" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3542×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::height_amsl(Location const&, float&, bool)" [color="#0d2078", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Terrain::height_amsl(Location const&, float&, bool)\n4.38%\n(1.44%)\n1562413×"];
	"AP_Terrain::height_amsl(Location const&, float&, bool)" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n1562413×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::height_amsl(Location const&, float&, bool)" -> "AP_Terrain::calculate_grid_info(Location const&, AP_Terrain::grid_info&) const" [arrowsize="0.35", color="#0d1676", fontcolor="#0d1676", fontsize="10.00", label="2.20%\n950536×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::height_amsl(Location const&, float&, bool)" -> "AP_Terrain::check_bitmap(AP_Terrain::grid_block const&, unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.25%\n3754789×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::height_amsl(Location const&, float&, bool)" -> "AP_Terrain::find_grid_cache(AP_Terrain::grid_info const&)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.46%\n950536×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::height_amsl(Location const&, float&, bool)" -> calloc [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::height_amsl(Location const&, float&, bool) [clone .part.1]" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Terrain::height_amsl(Location const&, float&, bool) [clone .part.1]\n0.02%\n(0.01%)\n9233×"];
	"AP_Terrain::height_amsl(Location const&, float&, bool) [clone .part.1]" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9233×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::height_amsl(Location const&, float&, bool) [clone .part.1]" -> "AP_Terrain::calculate_grid_info(Location const&, AP_Terrain::grid_info&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n3701×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::height_amsl(Location const&, float&, bool) [clone .part.1]" -> "AP_Terrain::check_bitmap(AP_Terrain::grid_block const&, unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14804×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::height_amsl(Location const&, float&, bool) [clone .part.1]" -> "AP_Terrain::find_grid_cache(AP_Terrain::grid_info const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3701×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::height_terrain_difference_home(float&, bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Terrain::height_terrain_difference_home(float&, bool)\n0.00%\n(0.00%)\n174×"];
	"AP_Terrain::height_terrain_difference_home(float&, bool)" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n174×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::height_terrain_difference_home(float&, bool)" -> "AP_AHRS_NavEKF::get_position(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n174×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::height_terrain_difference_home(float&, bool)" -> "AP_Terrain::height_amsl(Location const&, float&, bool) [clone .part.1]" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n348×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::height_terrain_difference_home(float&, bool)" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n174×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::log_terrain_data()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Terrain::log_terrain_data()\n0.01%\n(0.00%)\n174×"];
	"AP_Terrain::log_terrain_data()" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n348×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::log_terrain_data()" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n174×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::log_terrain_data()" -> "AP_AHRS_NavEKF::get_position(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n174×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::log_terrain_data()" -> "AP_AHRS_NavEKF::get_relative_position_D_home(float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n174×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::log_terrain_data()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n174×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::log_terrain_data()" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n174×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::log_terrain_data()" -> "AP_Terrain::get_statistics(unsigned short&, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n174×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::log_terrain_data()" -> "AP_Terrain::height_amsl(Location const&, float&, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n174×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::log_terrain_data()" -> "AP_Terrain::height_terrain_difference_home(float&, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n174×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::log_terrain_data()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n174×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::open_file()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Terrain::open_file()\n0.00%\n(0.00%)\n14×"];
	"AP_Terrain::open_file()" -> "AP::FS()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::open_file()" -> "AP_Filesystem::close(int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::open_file()" -> "AP_Filesystem::mkdir(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::open_file()" -> "AP_Filesystem::open(char const*, int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::open_file()" -> "__asprintf_chk" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::open_file()" -> "__errno_location" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::open_file()" -> "__snprintf_chk" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::open_file()" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::read_block()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Terrain::read_block()\n0.00%\n(0.00%)\n14×"];
	"AP_Terrain::read_block()" -> "AP::FS()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n28×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::read_block()" -> "AP_Filesystem::lseek(int, long, int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::read_block()" -> "AP_Filesystem::read(int, void*, unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::read_block()" -> "AP_Terrain::get_block_crc(AP_Terrain::grid_block&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::read_block()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n28×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::read_block()" -> "Location::get_distance_NE(Location const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::read_block()" -> "Location::offset(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::schedule_disk_io()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Terrain::schedule_disk_io()\n0.01%\n(0.00%)\n2523×"];
	"AP_Terrain::schedule_disk_io()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::schedule_disk_io()" -> "AP_Terrain::allocate()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2523×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::schedule_disk_io()" -> "AP_Terrain::find_io_idx(AP_Terrain::GridCacheState)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::schedule_disk_io()" -> "HALSITL::Scheduler::register_io_process(Functor<void>)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::send_request(mavlink_channel_t)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Terrain::send_request(mavlink_channel_t)\n0.06%\n(0.00%)\n721×"];
	"AP_Terrain::send_request(mavlink_channel_t)" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::send_request(mavlink_channel_t)" -> "AP_AHRS_NavEKF::get_position(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::send_request(mavlink_channel_t)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n720×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::send_request(mavlink_channel_t)" -> "AP_Terrain::allocate()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::send_request(mavlink_channel_t)" -> "AP_Terrain::calculate_grid_info(Location const&, AP_Terrain::grid_info&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n7200×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::send_request(mavlink_channel_t)" -> "AP_Terrain::find_grid_cache(AP_Terrain::grid_info const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n7920×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::send_request(mavlink_channel_t)" -> "AP_Terrain::schedule_disk_io()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::send_request(mavlink_channel_t)" -> "AP_Terrain::send_terrain_report(mavlink_channel_t, Location const&, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n720×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::send_request(mavlink_channel_t)" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::send_request(mavlink_channel_t)" -> "Location::offset(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6480×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::send_terrain_report(mavlink_channel_t, Location const&, bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Terrain::send_terrain_report(mavlink_channel_t, Location const&, bool)\n0.02%\n(0.00%)\n720×"];
	"AP_Terrain::send_terrain_report(mavlink_channel_t, Location const&, bool)" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n720×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::send_terrain_report(mavlink_channel_t, Location const&, bool)" -> "AP_AHRS_NavEKF::get_position(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n720×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::send_terrain_report(mavlink_channel_t, Location const&, bool)" -> "AP_Terrain::height_amsl(Location const&, float&, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1440×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::send_terrain_report(mavlink_channel_t, Location const&, bool)" -> "GCS_MAVLINK::packet_overhead_chan(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n720×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::send_terrain_report(mavlink_channel_t, Location const&, bool)" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n720×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::send_terrain_report(mavlink_channel_t, Location const&, bool)" -> "__popcountdi2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n17212×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::send_terrain_report(mavlink_channel_t, Location const&, bool)" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n720×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::send_terrain_report(mavlink_channel_t, Location const&, bool)" -> "comm_get_txspace(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n720×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Terrain::update()\n0.02%\n(0.00%)\n1802×"];
	"AP_Terrain::update()" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::update()" -> "AP_AHRS_NavEKF::get_position(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::update()" -> "AP_Terrain::height_amsl(Location const&, float&, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1801×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::update()" -> "AP_Terrain::height_amsl(Location const&, float&, bool) [clone .part.1]" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::update()" -> "AP_Terrain::schedule_disk_io()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::update()" -> "AP_Terrain::update_mission_data()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::update()" -> "AP_Terrain::update_rally_data()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::update()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::update_mission_data()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Terrain::update_mission_data()\n0.00%\n(0.00%)\n1802×"];
	"AP_Terrain::update_mission_data()" -> "AP::gps()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::update_mission_data()" -> "AP_Mission::read_cmd_from_storage(unsigned short, AP_Mission::Mission_Command&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n11×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::update_mission_data()" -> "AP_Terrain::get_statistics(unsigned short&, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n21×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::update_mission_data()" -> "AP_Terrain::height_amsl(Location const&, float&, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::update_mission_data()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n11×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::update_mission_data()" -> "Location::offset_bearing(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::update_rally_data()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Terrain::update_rally_data()\n0.00%\n(0.00%)\n1802×"];
	"AP_Terrain::update_rally_data()" -> "AP::gps()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::update_rally_data()" -> "AP::rally()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::update_rally_data()" -> "AP_Rally::get_rally_point_with_index(unsigned char, RallyLocation&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Terrain::update_rally_data()" -> "AP_Terrain::get_statistics(unsigned short&, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_ToneAlarm::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_ToneAlarm::init()\n0.00%\n(0.00%)\n1×"];
	"AP_ToneAlarm::~AP_ToneAlarm()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_ToneAlarm::~AP_ToneAlarm()\n0.00%\n(0.00%)\n1×"];
	"AP_ToneAlarm::~AP_ToneAlarm()" -> "operator delete(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::get_common_scheduler_tasks(AP_Scheduler::Task const*&, unsigned char&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Vehicle::get_common_scheduler_tasks(AP_Scheduler::Task const*&, unsigned char&)\n0.00%\n(0.00%)\n1×"];
	"AP_Vehicle::loop()" [color="#f92501", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Vehicle::loop()\n96.36%\n(0.01%)\n72070×"];
	"AP_Vehicle::loop()" -> "AP_Scheduler::loop()" [arrowsize="0.98", color="#f92501", fontcolor="#f92501", fontsize="10.00", label="96.35%\n72070×", labeldistance="3.85", penwidth="3.85"];
	"AP_Vehicle::scheduler_delay_callback()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Vehicle::scheduler_delay_callback()\n0.09%\n(0.00%)\n1133×"];
	"AP_Vehicle::scheduler_delay_callback()" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1133×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::scheduler_delay_callback()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1133×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::scheduler_delay_callback()" -> "AP_Notify::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n110×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::scheduler_delay_callback()" -> "GCS::send_message(ap_message)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::scheduler_delay_callback()" -> "GCS::update_receive()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n110×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::scheduler_delay_callback()" -> "GCS::update_send()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n110×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::scheduler_delay_callback()" -> "gcs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n224×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::setup()" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Vehicle::setup()\n0.80%\n(0.00%)\n1×"];
	"AP_Vehicle::setup()" -> "AP::fwversion()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::setup()" -> "AP::scheduler()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::setup()" -> "AP_GyroFFT::init(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::setup()" -> "AP_HAL::BetterStream::printf(char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::setup()" -> "AP_HAL::Scheduler::register_delay_callback(void (*)(), unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::setup()" -> "AP_Hott_Telem::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::setup()" -> "AP_Param::setup_sketch_defaults()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::setup()" -> "AP_RunCam::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::setup()" -> "AP_Scheduler::init(AP_Scheduler::Task const*, unsigned char, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::setup()" -> "AP_SerialManager::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::setup()" -> "AP_SerialManager::init_console()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::setup()" -> "AP_VisualOdom::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::setup()" -> "Copter::get_scheduler_tasks(AP_Scheduler::Task const*&, unsigned char&, unsigned int&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::setup()" -> "Copter::init_ardupilot()" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.73%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::setup()" -> "Copter::load_parameters()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::setup()" -> "GCS::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::setup()" -> "GCS::setup_console()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::setup()" -> "HALSITL::Util::available_memory()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Vehicle::setup()" -> "gcs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"AP_VisualOdom::AP_VisualOdom()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_VisualOdom::AP_VisualOdom()\n0.00%\n(0.00%)\n1×"];
	"AP_VisualOdom::AP_VisualOdom()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_VisualOdom::enabled() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_VisualOdom::enabled() const\n0.00%\n(0.00%)\n6746×"];
	"AP_VisualOdom::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_VisualOdom::init()\n0.00%\n(0.00%)\n1×"];
	"AP_VisualOdom::pre_arm_check(char*, unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_VisualOdom::pre_arm_check(char*, unsigned char) const\n0.00%\n(0.00%)\n7×"];
	"AP_Volz_Protocol::AP_Volz_Protocol()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Volz_Protocol::AP_Volz_Protocol()\n0.00%\n(0.00%)\n1×"];
	"AP_Volz_Protocol::AP_Volz_Protocol()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Volz_Protocol::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nAP_Volz_Protocol::update()\n0.01%\n(0.01%)\n72070×"];
	"AP_Volz_Protocol::update()" -> "AP::serialmanager()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"AP_Volz_Protocol::update()" -> "AP_SerialManager::find_serial(AP_SerialManager::SerialProtocol, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"BufferPrinter::write(unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nBufferPrinter::write(unsigned char)\n0.00%\n(0.00%)\n849×"];
	"Buzzer::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nBuzzer::init()\n0.00%\n(0.00%)\n1×"];
	"Buzzer::~Buzzer()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nBuzzer::~Buzzer()\n0.00%\n(0.00%)\n1×"];
	"Buzzer::~Buzzer()" -> "operator delete(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ByteBuffer::ByteBuffer(unsigned int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nByteBuffer::ByteBuffer(unsigned int)\n0.00%\n(0.00%)\n22×"];
	"ByteBuffer::ByteBuffer(unsigned int)" -> calloc [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n22×", labeldistance="0.50", penwidth="0.50"];
	"ByteBuffer::advance(unsigned int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nByteBuffer::advance(unsigned int)\n0.00%\n(0.00%)\n1688×"];
	"ByteBuffer::available() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nByteBuffer::available() const\n0.06%\n(0.06%)\n953118×"];
	"ByteBuffer::clear()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nByteBuffer::clear()\n0.00%\n(0.00%)\n19×"];
	"ByteBuffer::peekbytes(unsigned char*, unsigned int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nByteBuffer::peekbytes(unsigned char*, unsigned int)\n0.00%\n(0.00%)\n1826×"];
	"ByteBuffer::read(unsigned char*, unsigned int)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nByteBuffer::read(unsigned char*, unsigned int)\n0.24%\n(0.21%)\n268208×"];
	"ByteBuffer::read(unsigned char*, unsigned int)" -> "__memcpy_avx_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n268208×", labeldistance="0.50", penwidth="0.50"];
	"ByteBuffer::readptr(unsigned int&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nByteBuffer::readptr(unsigned int&)\n0.11%\n(0.11%)\n925475×"];
	"ByteBuffer::set_size(unsigned int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nByteBuffer::set_size(unsigned int)\n0.00%\n(0.00%)\n1×"];
	"ByteBuffer::set_size(unsigned int)" -> calloc [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ByteBuffer::set_size(unsigned int)" -> free [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ByteBuffer::space() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nByteBuffer::space() const\n0.13%\n(0.13%)\n1169888×"];
	"ByteBuffer::write(unsigned char const*, unsigned int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nByteBuffer::write(unsigned char const*, unsigned int)\n0.13%\n(0.11%)\n129631×"];
	"ByteBuffer::write(unsigned char const*, unsigned int)" -> "__memcpy_avx_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n129737×", labeldistance="0.50", penwidth="0.50"];
	"ByteBuffer::write(unsigned char const*, unsigned int)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ByteBuffer::~ByteBuffer()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nByteBuffer::~ByteBuffer()\n0.00%\n(0.00%)\n1×"];
	"ByteBuffer::~ByteBuffer()" -> free [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Compass::Compass()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompass::Compass()\n0.00%\n(0.00%)\n1×"];
	"Compass::Compass()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Compass::Compass()" -> "CompassCalibrator::CompassCalibrator()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"Compass::Compass()" -> "Compass_PerMotor::Compass_PerMotor(Compass&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Compass::_get_state_id(typesafe_index<unsigned char, TAG_Priority>) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompass::_get_state_id(typesafe_index<unsigned char, TAG_Priority>) const\n0.01%\n(0.01%)\n223034×"];
	"Compass::_reorder_compass_params()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompass::_reorder_compass_params()\n0.00%\n(0.00%)\n1×"];
	"Compass::_setup_earth_field()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompass::_setup_earth_field()\n0.00%\n(0.00%)\n1×"];
	"Compass::_setup_earth_field()" -> "Matrix3<float>::from_euler(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Compass::_setup_earth_field()" -> "Matrix3<float>::operator*(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Compass::cal_update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompass::cal_update()\n0.01%\n(0.00%)\n18017×"];
	"Compass::cal_update()" -> "CompassCalibrator::check_for_timeout()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1860×", labeldistance="0.50", penwidth="0.50"];
	"Compass::cal_update()" -> "CompassCalibrator::running() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1860×", labeldistance="0.50", penwidth="0.50"];
	"Compass::cal_update()" -> "CompassCalibrator::update(bool&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1860×", labeldistance="0.50", penwidth="0.50"];
	"Compass::calculate_heading(Matrix3<float> const&, unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompass::calculate_heading(Matrix3<float> const&, unsigned char) const\n0.00%\n(0.00%)\n1×"];
	"Compass::calculate_heading(Matrix3<float> const&, unsigned char) const" -> atan2f [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Compass::calculate_heading(Matrix3<float> const&, unsigned char) const" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Compass::configured(char*, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompass::configured(char*, unsigned char)\n0.00%\n(0.00%)\n14×"];
	"Compass::configured(char*, unsigned char)" -> "AP_Param::load()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n42×", labeldistance="0.50", penwidth="0.50"];
	"Compass::configured(char*, unsigned char)" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n42×", labeldistance="0.50", penwidth="0.50"];
	"Compass::consistent() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompass::consistent() const\n0.03%\n(0.01%)\n3591×"];
	"Compass::consistent() const" -> "Vector2<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10773×", labeldistance="0.50", penwidth="0.50"];
	"Compass::consistent() const" -> "Vector2<float>::normalize()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10773×", labeldistance="0.50", penwidth="0.50"];
	"Compass::consistent() const" -> "Vector2<float>::normalized() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3591×", labeldistance="0.50", penwidth="0.50"];
	"Compass::consistent() const" -> "Vector2<float>::operator*(Vector2<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10773×", labeldistance="0.50", penwidth="0.50"];
	"Compass::consistent() const" -> "Vector2<float>::operator-(Vector2<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10773×", labeldistance="0.50", penwidth="0.50"];
	"Compass::consistent() const" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14364×", labeldistance="0.50", penwidth="0.50"];
	"Compass::consistent() const" -> "Vector3<float>::operator*(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10773×", labeldistance="0.50", penwidth="0.50"];
	"Compass::consistent() const" -> "Vector3<float>::operator/(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3591×", labeldistance="0.50", penwidth="0.50"];
	"Compass::consistent() const" -> "Vector3<float>::operator/=(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10773×", labeldistance="0.50", penwidth="0.50"];
	"Compass::consistent() const" -> acosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n21546×", labeldistance="0.50", penwidth="0.50"];
	"Compass::consistent() const" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n21546×", labeldistance="0.50", penwidth="0.50"];
	"Compass::get_declination() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompass::get_declination() const\n0.00%\n(0.00%)\n2699×"];
	"Compass::have_scale_factor(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompass::have_scale_factor(unsigned char) const\n0.01%\n(0.01%)\n56490×"];
	"Compass::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompass::init()\n0.06%\n(0.00%)\n1×"];
	"Compass::init()" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Compass::init()" -> "AP_AHRS::update_orientation()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Compass::init()" -> "AP_Compass_SITL::AP_Compass_SITL()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Compass::init()" -> "Compass::_reorder_compass_params()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Compass::init()" -> "Compass::read()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Compass::init()" -> "HALSITL::Scheduler::delay(unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Compass::init()" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Compass::is_calibrating() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompass::is_calibrating() const\n0.01%\n(0.01%)\n72697×"];
	"Compass::read()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompass::read()\n0.06%\n(0.00%)\n1804×"];
	"Compass::read()" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1744×", labeldistance="0.50", penwidth="0.50"];
	"Compass::read()" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3544×", labeldistance="0.50", penwidth="0.50"];
	"Compass::read()" -> "AP_AHRS_NavEKF::get_position(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"Compass::read()" -> "AP_AHRS_NavEKF::have_ekf_logging() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Compass::read()" -> "AP_Compass_SITL::read()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1804×", labeldistance="0.50", penwidth="0.50"];
	"Compass::read()" -> "AP_Declination::get_declination(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Compass::read()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1804×", labeldistance="0.50", penwidth="0.50"];
	"Compass::read()" -> "AP_Logger::Write_Compass(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Compass::read()" -> "AP_Logger::should_log(unsigned int) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1804×", labeldistance="0.50", penwidth="0.50"];
	"Compass::read()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"Compass::register_compass(int, unsigned char&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompass::register_compass(int, unsigned char&)\n0.00%\n(0.00%)\n6×"];
	"Compass::send_mag_cal_progress(GCS_MAVLINK const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompass::send_mag_cal_progress(GCS_MAVLINK const&)\n0.00%\n(0.00%)\n721×"];
	"Compass::send_mag_cal_progress(GCS_MAVLINK const&)" -> "GCS_MAVLINK::packet_overhead_chan(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2163×", labeldistance="0.50", penwidth="0.50"];
	"Compass::send_mag_cal_progress(GCS_MAVLINK const&)" -> "comm_get_txspace(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2163×", labeldistance="0.50", penwidth="0.50"];
	"Compass::send_mag_cal_report(GCS_MAVLINK const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompass::send_mag_cal_report(GCS_MAVLINK const&)\n0.00%\n(0.00%)\n721×"];
	"Compass::send_mag_cal_report(GCS_MAVLINK const&)" -> "GCS_MAVLINK::packet_overhead_chan(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2163×", labeldistance="0.50", penwidth="0.50"];
	"Compass::send_mag_cal_report(GCS_MAVLINK const&)" -> "comm_get_txspace(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2163×", labeldistance="0.50", penwidth="0.50"];
	"Compass::use_for_yaw() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompass::use_for_yaw() const\n0.01%\n(0.01%)\n72983×"];
	"Compass::use_for_yaw(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompass::use_for_yaw(unsigned char) const\n0.02%\n(0.02%)\n256107×"];
	"CompassCalibrator::CompassCalibrator()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompassCalibrator::CompassCalibrator()\n0.00%\n(0.00%)\n3×"];
	"CompassCalibrator::check_for_timeout()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompassCalibrator::check_for_timeout()\n0.00%\n(0.00%)\n1860×"];
	"CompassCalibrator::check_for_timeout()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1860×", labeldistance="0.50", penwidth="0.50"];
	"CompassCalibrator::new_sample(Vector3<float> const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompassCalibrator::new_sample(Vector3<float> const&)\n0.02%\n(0.01%)\n54798×"];
	"CompassCalibrator::new_sample(Vector3<float> const&)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n54798×", labeldistance="0.50", penwidth="0.50"];
	"CompassCalibrator::running() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompassCalibrator::running() const\n0.00%\n(0.00%)\n1860×"];
	"CompassCalibrator::update(bool&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompassCalibrator::update(bool&)\n0.00%\n(0.00%)\n1860×"];
	"Compass_PerMotor::Compass_PerMotor(Compass&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCompass_PerMotor::Compass_PerMotor(Compass&)\n0.00%\n(0.00%)\n1×"];
	"Compass_PerMotor::Compass_PerMotor(Compass&)" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::Copter()\n0.00%\n(0.00%)\n1×"];
	"Copter::Copter()" -> "AC_AutoTune::AC_AutoTune()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AC_Avoid::AC_Avoid()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AC_Fence::AC_Fence()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AC_PrecLand::AC_PrecLand()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AC_Sprayer::AC_Sprayer()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_ADSB::AP_ADSB()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_AHRS_NavEKF::AP_AHRS_NavEKF(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_Arming::AP_Arming()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_Avoidance::AP_Avoidance(AP_ADSB&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_Baro::AP_Baro()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_BattMonitor::AP_BattMonitor(unsigned int, Functor<void, char const*, signed char const>, signed char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_Button::AP_Button()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_ESC_Telem::AP_ESC_Telem()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_GPS::AP_GPS()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_GyroFFT::AP_GyroFFT()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_Hott_Telem::AP_Hott_Telem()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_InertialSensor::AP_InertialSensor()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_Logger::AP_Logger(AP_ParamT<int, (ap_var_type)3> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_Mount::AP_Mount()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_Notify::AP_Notify()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_Param::configured() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_RPM::AP_RPM()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_RSSI::AP_RSSI()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_RTC::AP_RTC()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_Rally::AP_Rally()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_Relay::AP_Relay()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_RunCam::AP_RunCam()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_Scheduler::AP_Scheduler(Functor<void>)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_SerialManager::AP_SerialManager()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_Terrain::AP_Terrain(AP_Mission const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "AP_VisualOdom::AP_VisualOdom()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "Compass::Compass()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "GCS_MAVLINK_Parameters::GCS_MAVLINK_Parameters()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "LowPassFilter<Vector3<float> >::LowPassFilter(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "LowPassFilter<float>::LowPassFilter()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "LowPassFilter<float>::LowPassFilter(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "Mode::Mode()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n21×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "ModeFlowHold::ModeFlowHold()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "ModeSystemId::ModeSystemId()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "OpticalFlow::OpticalFlow()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "ParametersG2::ParametersG2()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "RCMapper::RCMapper()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "RangeFinder::RangeFinder()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "SITL::Buzzer::Buzzer()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "SocketAPM::SocketAPM(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Copter()" -> "operator new[](unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Sensor_Health()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::Log_Sensor_Health()\n0.03%\n(0.03%)\n69588×"];
	"Copter::Log_Sensor_Health()" -> "Compass::_get_state_id(typesafe_index<unsigned char, TAG_Priority>) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n69588×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Attitude()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::Log_Write_Attitude()\n0.04%\n(0.00%)\n1740×"];
	"Copter::Log_Write_Attitude()" -> "AP_Logger::Write_Attitude(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Attitude()" -> "AP_Logger::Write_Rate(AP_AHRS_View const*, AP_Motors const&, AC_AttitudeControl const&, AC_PosControl const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Attitude()" -> "Copter::should_log(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Attitude()" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Attitude()" -> "wrap_360_cd(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Control_Tuning()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::Log_Write_Control_Tuning()\n0.04%\n(0.00%)\n1740×"];
	"Copter::Log_Write_Control_Tuning()" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Control_Tuning()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Control_Tuning()" -> "AP_InertialNav_NavEKF::get_altitude() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Control_Tuning()" -> "AP_InertialNav_NavEKF::get_velocity_z() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Control_Tuning()" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Control_Tuning()" -> "AP_Terrain::height_above_terrain(float&, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Control_Tuning()" -> "Copter::SurfaceTracking::get_dist_for_logging() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Control_Tuning()" -> "Copter::SurfaceTracking::get_target_dist_for_logging(float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Control_Tuning()" -> "LowPassFilter<float>::get() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Control_Tuning()" -> "ModeRTL::has_manual_throttle() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1235×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Control_Tuning()" -> "ModeStabilize::has_manual_throttle() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n505×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Control_Tuning()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Data(LogDataID, int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::Log_Write_Data(LogDataID, int)\n0.00%\n(0.00%)\n1×"];
	"Copter::Log_Write_Data(LogDataID, int)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Data(LogDataID, int)" -> "AP_Logger::WriteCriticalBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Data(LogDataID, int)" -> "Copter::should_log(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Data(LogDataID, unsigned int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::Log_Write_Data(LogDataID, unsigned int)\n0.00%\n(0.00%)\n174×"];
	"Copter::Log_Write_Data(LogDataID, unsigned int)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n174×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Data(LogDataID, unsigned int)" -> "AP_Logger::WriteCriticalBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n174×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Data(LogDataID, unsigned int)" -> "Copter::should_log(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n174×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_EKF_POS()" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::Log_Write_EKF_POS()\n0.25%\n(0.00%)\n1740×"];
	"Copter::Log_Write_EKF_POS()" -> "AP::ahrs_navekf()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_EKF_POS()" -> "AP_AHRS_NavEKF::Log_Write()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.19%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_EKF_POS()" -> "AP_Logger::Write_AHRS2()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_EKF_POS()" -> "AP_Logger::Write_POS()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_EKF_POS()" -> "SITL::SITL::Log_Write_SIMSTATE()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_MotBatt()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::Log_Write_MotBatt()\n0.02%\n(0.00%)\n1740×"];
	"Copter::Log_Write_MotBatt()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_MotBatt()" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_MotBatt()" -> "LowPassFilter<float>::get() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Precland()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::Log_Write_Precland()\n0.06%\n(0.00%)\n4504×"];
	"Copter::Log_Write_Precland()" -> "AC_PrecLand::get_target_position_measurement_cm(Vector3<float>&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4504×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Precland()" -> "AC_PrecLand::get_target_position_relative_cm(Vector2<float>&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4504×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Precland()" -> "AC_PrecLand::get_target_velocity_relative_cms(Vector2<float>&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4504×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Precland()" -> "AC_PrecLand::target_acquired()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4504×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Precland()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4504×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Precland()" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n4504×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Vehicle_Startup_Messages()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::Log_Write_Vehicle_Startup_Messages()\n0.00%\n(0.00%)\n1×"];
	"Copter::Log_Write_Vehicle_Startup_Messages()" -> "AP_AHRS::Log_Write_Home_And_Origin()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Vehicle_Startup_Messages()" -> "AP_GPS::Write_AP_Logger_Log_Startup_messages()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Vehicle_Startup_Messages()" -> "AP_Logger::Write_MessageF(char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Vehicle_Startup_Messages()" -> "AP_Logger::Write_Mode(unsigned char, ModeReason)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::Log_Write_Vehicle_Startup_Messages()" -> "Copter::get_frame_string()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::SurfaceTracking::get_dist_for_logging() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::SurfaceTracking::get_dist_for_logging() const\n0.00%\n(0.00%)\n1740×"];
	"Copter::SurfaceTracking::get_target_dist_for_logging(float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::SurfaceTracking::get_target_dist_for_logging(float&) const\n0.00%\n(0.00%)\n1740×"];
	"Copter::accel_cal_update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::accel_cal_update()\n0.00%\n(0.00%)\n1802×"];
	"Copter::accel_cal_update()" -> "AP_InertialSensor::acal_update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n62×", labeldistance="0.50", penwidth="0.50"];
	"Copter::accel_cal_update()" -> "AP_InertialSensor::get_new_trim(float&, float&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n62×", labeldistance="0.50", penwidth="0.50"];
	"Copter::allocate_motors()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::allocate_motors()\n0.05%\n(0.00%)\n1×"];
	"Copter::allocate_motors()" -> "AC_AttitudeControl_Multi::AC_AttitudeControl_Multi(AP_AHRS_View&, AP_Vehicle::MultiCopter const&, AP_MotorsMulticopter&, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::allocate_motors()" -> "AC_Circle::AC_Circle(AP_InertialNav const&, AP_AHRS_View const&, AC_PosControl&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::allocate_motors()" -> "AC_Loiter::AC_Loiter(AP_InertialNav const&, AP_AHRS_View const&, AC_PosControl&, AC_AttitudeControl const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::allocate_motors()" -> "AC_PosControl::AC_PosControl(AP_AHRS_View&, AP_InertialNav const&, AP_Motors const&, AC_AttitudeControl&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::allocate_motors()" -> "AC_WPNav_OA::AC_WPNav_OA(AP_InertialNav const&, AP_AHRS_View const&, AC_PosControl&, AC_AttitudeControl const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::allocate_motors()" -> "AP_AHRS::create_view(Rotation, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::allocate_motors()" -> "AP_MotorsMulticopter::AP_MotorsMulticopter(unsigned short, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::allocate_motors()" -> "AP_Param::load_object_from_eeprom(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n6×", labeldistance="0.50", penwidth="0.50"];
	"Copter::allocate_motors()" -> "AP_Param::reload_defaults_file(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::allocate_motors()" -> "Copter::convert_pid_parameters()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::allocate_motors()" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"Copter::arm_motors_check()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::arm_motors_check()\n0.00%\n(0.00%)\n1802×"];
	"Copter::auto_disarm_check()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::auto_disarm_check()\n0.00%\n(0.00%)\n1802×"];
	"Copter::auto_disarm_check()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"Copter::auto_disarm_check()" -> "ModeStabilize::has_manual_throttle() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n45×", labeldistance="0.50", penwidth="0.50"];
	"Copter::auto_disarm_check()" -> "short constrain_value<short>(short, short, short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"Copter::auto_trim()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::auto_trim()\n0.00%\n(0.00%)\n1802×"];
	"Copter::avoidance_adsb_update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::avoidance_adsb_update()\n0.01%\n(0.00%)\n1802×"];
	"Copter::avoidance_adsb_update()" -> "AP_ADSB::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"Copter::avoidance_adsb_update()" -> "AP_Avoidance::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"Copter::check_ekf_reset()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::check_ekf_reset()\n0.09%\n(0.02%)\n72070×"];
	"Copter::check_ekf_reset()" -> "AC_AttitudeControl::inertial_frame_reset()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"Copter::check_ekf_reset()" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"Copter::check_ekf_reset()" -> "AP_AHRS_NavEKF::getLastYawResetAngle(float&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::check_ekf_reset()" -> "AP_Logger::Write_Error(LogErrorSubsystem, LogErrorCode)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::check_ekf_reset()" -> "AP_Logger::Write_Event(LogEvent)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"Copter::check_ekf_reset()" -> "GCS::send_text(MAV_SEVERITY, char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::check_ekf_reset()" -> "NavEKF2::getPrimaryCoreIndex() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72472×", labeldistance="0.50", penwidth="0.50"];
	"Copter::check_vibration()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::check_vibration()\n0.00%\n(0.00%)\n1802×"];
	"Copter::check_vibration()" -> "AP_AHRS_NavEKF::get_innovations(Vector3<float>&, Vector3<float>&, Vector3<float>&, float&, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"Copter::check_vibration()" -> "AP_AHRS_NavEKF::get_variances(float&, float&, float&, Vector3<float>&, float&, Vector2<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"Copter::check_vibration()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"Copter::compass_cal_update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::compass_cal_update()\n0.01%\n(0.00%)\n18017×"];
	"Copter::compass_cal_update()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n620×", labeldistance="0.50", penwidth="0.50"];
	"Copter::compass_cal_update()" -> "Compass::cal_update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n18017×", labeldistance="0.50", penwidth="0.50"];
	"Copter::compass_cal_update()" -> "Compass::is_calibrating() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n620×", labeldistance="0.50", penwidth="0.50"];
	"Copter::convert_lgr_parameters()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::convert_lgr_parameters()\n0.00%\n(0.00%)\n1×"];
	"Copter::convert_lgr_parameters()" -> "SRV_Channels::find_channel(SRV_Channel::Aux_servo_function_t, unsigned char&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::convert_pid_parameters()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::convert_pid_parameters()\n0.01%\n(0.00%)\n1×"];
	"Copter::convert_pid_parameters()" -> "AP_Param::convert_old_parameter(AP_Param::ConversionInfo const*, float, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n36×", labeldistance="0.50", penwidth="0.50"];
	"Copter::convert_pid_parameters()" -> "AP_Param::convert_old_parameters(AP_Param::ConversionInfo const*, unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n11×", labeldistance="0.50", penwidth="0.50"];
	"Copter::convert_pid_parameters()" -> "AP_Param::find_old_parameter(AP_Param::ConversionInfo const*, AP_Param*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::convert_pid_parameters()" -> "SRV_Channels::upgrade_parameters()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::crash_check()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::crash_check()\n0.03%\n(0.02%)\n72070×"];
	"Copter::crash_check()" -> "LowPassFilter<Vector3<float> >::get() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n67837×", labeldistance="0.50", penwidth="0.50"];
	"Copter::crash_check()" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n67837×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ekf_check()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::ekf_check()\n0.01%\n(0.00%)\n1802×"];
	"Copter::ekf_check()" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ekf_check()" -> "AP_AHRS_NavEKF::check_lane_switch()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ekf_check()" -> "AP_AHRS_NavEKF::get_origin(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ekf_check()" -> "AP_AHRS_NavEKF::get_variances(float&, float&, float&, Vector3<float>&, float&, Vector2<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1691×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ekf_check()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ekf_check()" -> "AP_Logger::Write_Error(LogErrorSubsystem, LogErrorCode)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ekf_check()" -> "Copter::ekf_position_ok() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1691×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ekf_check()" -> "Copter::failsafe_ekf_event()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ekf_check()" -> "Copter::optflow_position_ok() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1691×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ekf_check()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ekf_check()" -> fmaxf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3382×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ekf_position_ok() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::ekf_position_ok() const\n0.00%\n(0.00%)\n1691×"];
	"Copter::ekf_position_ok() const" -> "AP_AHRS_NavEKF::have_inertial_nav() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1691×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ekf_position_ok() const" -> "AP_InertialNav_NavEKF::get_filter_status() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1691×", labeldistance="0.50", penwidth="0.50"];
	"Copter::enable_motor_output()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::enable_motor_output()\n0.00%\n(0.00%)\n2×"];
	"Copter::enable_motor_output()" -> "AP_MotorsMulticopter::output_min()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Copter::esc_calibration_startup_check()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::esc_calibration_startup_check()\n0.00%\n(0.00%)\n1×"];
	"Copter::esc_calibration_startup_check()" -> "AP_Arming_Copter::rc_calibration_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::esc_calibration_startup_check()" -> "AP_Param::save(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::esc_calibration_startup_check()" -> "Copter::read_radio()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::esc_calibration_startup_check()" -> "HALSITL::Scheduler::delay(unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::exit_mode(Mode*&, Mode*&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::exit_mode(Mode*&, Mode*&)\n0.00%\n(0.00%)\n1×"];
	"Copter::exit_mode(Mode*&, Mode*&)" -> "Copter::set_accel_throttle_I_from_pilot_throttle()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::exit_mode(Mode*&, Mode*&)" -> "Mode::_TakeOff::stop()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::exit_mode(Mode*&, Mode*&)" -> "ModeRTL::has_manual_throttle() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::exit_mode(Mode*&, Mode*&)" -> "ModeStabilize::has_manual_throttle() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::failsafe_check()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::failsafe_check()\n0.07%\n(0.04%)\n219270×"];
	"Copter::failsafe_check()" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n219270×", labeldistance="0.50", penwidth="0.50"];
	"Copter::failsafe_disable()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::failsafe_disable()\n0.00%\n(0.00%)\n1×"];
	"Copter::failsafe_ekf_event()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::failsafe_ekf_event()\n0.00%\n(0.00%)\n1×"];
	"Copter::failsafe_ekf_event()" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::failsafe_ekf_event()" -> "AP_Logger::Write_Error(LogErrorSubsystem, LogErrorCode)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::failsafe_ekf_event()" -> "ModeStabilize::requires_GPS() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::failsafe_enable()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::failsafe_enable()\n0.00%\n(0.00%)\n2×"];
	"Copter::failsafe_enable()" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Copter::failsafe_gcs_check()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::failsafe_gcs_check()\n0.00%\n(0.00%)\n542×"];
	"Copter::failsafe_terrain_check()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::failsafe_terrain_check()\n0.00%\n(0.00%)\n542×"];
	"Copter::failsafe_terrain_set_status(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::failsafe_terrain_set_status(bool)\n0.02%\n(0.01%)\n46135×"];
	"Copter::failsafe_terrain_set_status(bool)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n46135×", labeldistance="0.50", penwidth="0.50"];
	"Copter::fast_loop()" [color="#0c9789", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::fast_loop()\n27.39%\n(0.02%)\n72070×"];
	"Copter::fast_loop()" -> "AC_AttitudeControl_Multi::rate_controller_run()" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.53%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::fast_loop()" -> "AP_AHRS_NavEKF::update(bool)" [arrowsize="0.42", color="#0c678a", fontcolor="#0c678a", fontsize="10.00", label="18.00%\n72070×", labeldistance="0.72", penwidth="0.72"];
	"Copter::fast_loop()" -> "AP_InertialSensor::update()" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.45%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::fast_loop()" -> "AP_Mount::update_fast()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::fast_loop()" -> "Copter::Log_Sensor_Health()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n69588×", labeldistance="0.50", penwidth="0.50"];
	"Copter::fast_loop()" -> "Copter::check_ekf_reset()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.09%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::fast_loop()" -> "Copter::motors_output()" [arrowsize="0.35", color="#0d1676", fontcolor="#0d1676", fontsize="10.00", label="2.29%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::fast_loop()" -> "Copter::read_inertia()" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.71%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::fast_loop()" -> "Copter::should_log(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::fast_loop()" -> "Copter::update_flight_mode()" [arrowsize="0.35", color="#0d1e78", fontcolor="#0d1e78", fontsize="10.00", label="3.96%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::fast_loop()" -> "Copter::update_home_from_EKF()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::fast_loop()" -> "Copter::update_land_and_crash_detectors()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.26%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::fence_check()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::fence_check()\n0.00%\n(0.00%)\n542×"];
	"Copter::fence_check()" -> "AC_Fence::check()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n542×", labeldistance="0.50", penwidth="0.50"];
	"Copter::get_frame_mav_type()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::get_frame_mav_type()\n0.00%\n(0.00%)\n185×"];
	"Copter::get_frame_string()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::get_frame_string()\n0.00%\n(0.00%)\n2×"];
	"Copter::get_non_takeoff_throttle()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::get_non_takeoff_throttle()\n0.00%\n(0.00%)\n1752×"];
	"Copter::get_pilot_desired_climb_rate(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::get_pilot_desired_climb_rate(float)\n0.00%\n(0.00%)\n1×"];
	"Copter::get_pilot_desired_climb_rate(float)" -> "Copter::get_throttle_mid()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::get_pilot_desired_climb_rate(float)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::get_pilot_desired_climb_rate(float)" -> "short constrain_value<short>(short, short, short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::get_pilot_desired_yaw_rate(short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::get_pilot_desired_yaw_rate(short)\n0.02%\n(0.02%)\n72070×"];
	"Copter::get_pilot_desired_yaw_rate(short)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::get_rangefinder_height_interpolated_cm(int&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::get_rangefinder_height_interpolated_cm(int&)\n0.00%\n(0.00%)\n3236×"];
	"Copter::get_scheduler_tasks(AP_Scheduler::Task const*&, unsigned char&, unsigned int&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::get_scheduler_tasks(AP_Scheduler::Task const*&, unsigned char&, unsigned int&)\n0.00%\n(0.00%)\n1×"];
	"Copter::get_throttle_mid()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::get_throttle_mid()\n0.01%\n(0.00%)\n22700×"];
	"Copter::get_throttle_mid()" -> "RC_Channel::get_control_mid() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n22700×", labeldistance="0.50", penwidth="0.50"];
	"Copter::gpsglitch_check()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::gpsglitch_check()\n0.00%\n(0.00%)\n1802×"];
	"Copter::gpsglitch_check()" -> "AP_InertialNav_NavEKF::get_filter_status() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::init_ardupilot()\n0.73%\n(0.00%)\n1×"];
	"Copter::init_ardupilot()" -> "AC_AttitudeControl_Multi::parameter_sanity_check()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AC_PolyFence_loader::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AC_PosControl::set_dt(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP::compass()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_AHRS_NavEKF::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_AHRS_NavEKF::reset(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_Arming_Copter::rc_calibration_checks(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_Baro::calibrate(bool)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.34%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_Baro::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_BattMonitor::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_Beacon::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_BoardConfig::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_BoardConfig::init_safety()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_GPS::init(AP_SerialManager const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_Gripper::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_HAL::BetterStream::printf(char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_InertialSensor::init(unsigned short)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.22%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_LandingGear::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_Logger::setVehicle_Startup_Writer(Functor<void>)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_Mission::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_Mount::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_Notify::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_OAPathPlanner::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_RPM::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_RSSI::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_Relay::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_Scripting::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_SerialManager::set_blocking_writes_all(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_SmartRTL::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "AP_Stats::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "Compass::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "Copter::allocate_motors()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "Copter::enable_motor_output()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "Copter::esc_calibration_startup_check()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "Copter::failsafe_enable()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "Copter::init_optflow()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "Copter::init_precland()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "Copter::init_proximity()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "Copter::init_rangefinder()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "Copter::init_rc_in()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "Copter::init_rc_out()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "Copter::log_init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "Copter::notify_flight_mode()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "Copter::set_land_complete(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "Copter::set_land_complete_maybe(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "Copter::update_using_interlock()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "Copter::winch_init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "GCS::setup_uarts()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "HALSITL::Scheduler::register_timer_failsafe(void (*)(), unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "RC_Channels::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_ardupilot()" -> "rc()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_optflow()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::init_optflow()\n0.00%\n(0.00%)\n1×"];
	"Copter::init_optflow()" -> "OpticalFlow::init(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_precland()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::init_precland()\n0.00%\n(0.00%)\n1×"];
	"Copter::init_precland()" -> "AC_PrecLand::init(unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_proximity()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::init_proximity()\n0.00%\n(0.00%)\n1×"];
	"Copter::init_proximity()" -> "AP_Proximity::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_rangefinder()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::init_rangefinder()\n0.01%\n(0.00%)\n1×"];
	"Copter::init_rangefinder()" -> "LowPassFilter<float>::set_cutoff_frequency(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_rangefinder()" -> "RangeFinder::has_orientation(Rotation) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_rangefinder()" -> "RangeFinder::init(Rotation)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_rc_in()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::init_rc_in()\n0.00%\n(0.00%)\n1×"];
	"Copter::init_rc_in()" -> "RC_Channel::set_angle(unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_rc_in()" -> "RC_Channel::set_default_dead_zone(short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_rc_in()" -> "RC_Channel::set_range(unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_rc_in()" -> "rc()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_rc_out()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::init_rc_out()\n0.00%\n(0.00%)\n1×"];
	"Copter::init_rc_out()" -> "AP_BoardConfig::set_default_safety_ignore_mask(unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_rc_out()" -> "AP_MotorsMatrix::get_motor_mask()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_rc_out()" -> "AP_MotorsMatrix::init(AP_Motors::motor_frame_class, AP_Motors::motor_frame_type)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_rc_out()" -> "AP_MotorsMatrix::set_update_rate(unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_rc_out()" -> "AP_MotorsMulticopter::set_throttle_range(short, short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_rc_out()" -> "SRV_Channels::enable_aux_servos()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_rc_out()" -> "SRV_Channels::update_aux_servo_function()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_simple_bearing()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::init_simple_bearing()\n0.00%\n(0.00%)\n1×"];
	"Copter::init_simple_bearing()" -> "Copter::Log_Write_Data(LogDataID, int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_simple_bearing()" -> "Copter::should_log(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::init_simple_bearing()" -> "wrap_360_cd(int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::landing_with_GPS()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::landing_with_GPS()\n0.00%\n(0.00%)\n505×"];
	"Copter::landinggear_update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::landinggear_update()\n0.00%\n(0.00%)\n1802×"];
	"Copter::landinggear_update()" -> "SRV_Channels::function_assigned(SRV_Channel::Aux_servo_function_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"Copter::load_parameters()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::load_parameters()\n0.07%\n(0.00%)\n1×"];
	"Copter::load_parameters()" -> "AP_HAL::BetterStream::printf(char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::load_parameters()" -> "AP_HAL::Util::set_soft_armed(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::load_parameters()" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Copter::load_parameters()" -> "AP_Param::check_var_info()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::load_parameters()" -> "AP_Param::configured_in_storage() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::load_parameters()" -> "AP_Param::convert_old_parameters(AP_Param::ConversionInfo const*, unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::load_parameters()" -> "AP_Param::find(char const*, ap_var_type*, unsigned short*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::load_parameters()" -> "AP_Param::load()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::load_parameters()" -> "AP_Param::load_all()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::load_parameters()" -> "Copter::convert_lgr_parameters()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::log_init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::log_init()\n0.00%\n(0.00%)\n1×"];
	"Copter::log_init()" -> "AP_Logger::Init(LogStructure const*, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::lost_vehicle_check()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::lost_vehicle_check()\n0.01%\n(0.00%)\n1802×"];
	"Copter::lost_vehicle_check()" -> "RC_Channels::find_channel_for_option(RC_Channel::AUX_FUNC)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"Copter::lost_vehicle_check()" -> "rc()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"Copter::motors_output()" [color="#0d1676", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::motors_output()\n2.29%\n(0.02%)\n72070×"];
	"Copter::motors_output()" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::motors_output()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n801×", labeldistance="0.50", penwidth="0.50"];
	"Copter::motors_output()" -> "AP_Logger::Write_Event(LogEvent)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::motors_output()" -> "AP_MotorsMulticopter::output()" [arrowsize="0.35", color="#0d1475", fontcolor="#0d1475", fontsize="10.00", label="1.70%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::motors_output()" -> "SRV_Channels::calc_pwm()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.14%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::motors_output()" -> "SRV_Channels::cork()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::motors_output()" -> "SRV_Channels::output_ch_all()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.36%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::motors_output()" -> "SRV_Channels::push()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::notify_flight_mode()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::notify_flight_mode()\n0.00%\n(0.00%)\n1×"];
	"Copter::notify_flight_mode()" -> "AP_Notify::set_flight_mode_str(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::notify_flight_mode()" -> "ModeStabilize::is_autopilot() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::notify_flight_mode()" -> "ModeStabilize::name4() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::optflow_position_ok() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::optflow_position_ok() const\n0.01%\n(0.00%)\n5401×"];
	"Copter::optflow_position_ok() const" -> "AP_AHRS_NavEKF::have_inertial_nav() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n5401×", labeldistance="0.50", penwidth="0.50"];
	"Copter::optflow_position_ok() const" -> "AP_VisualOdom::enabled() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5401×", labeldistance="0.50", penwidth="0.50"];
	"Copter::parachute_check()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::parachute_check()\n0.00%\n(0.00%)\n72070×"];
	"Copter::position_ok() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::position_ok() const\n0.03%\n(0.01%)\n17942×"];
	"Copter::position_ok() const" -> "AP_AHRS_NavEKF::have_inertial_nav() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n15355×", labeldistance="0.50", penwidth="0.50"];
	"Copter::position_ok() const" -> "AP_InertialNav_NavEKF::get_filter_status() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n14723×", labeldistance="0.50", penwidth="0.50"];
	"Copter::position_ok() const" -> "AP_VisualOdom::enabled() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n624×", labeldistance="0.50", penwidth="0.50"];
	"Copter::rangefinder_alt_ok()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::rangefinder_alt_ok()\n0.01%\n(0.01%)\n211976×"];
	"Copter::read_barometer()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::read_barometer()\n0.03%\n(0.00%)\n1802×"];
	"Copter::read_barometer()" -> "AP_Baro::get_air_density_ratio()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_barometer()" -> "AP_Baro::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_inertia()" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::read_inertia()\n0.71%\n(0.03%)\n72070×"];
	"Copter::read_inertia()" -> "AP_AHRS_NavEKF::get_position(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.18%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_inertia()" -> "AP_InertialNav_NavEKF::get_altitude() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n71040×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_inertia()" -> "AP_InertialNav_NavEKF::get_filter_status() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_inertia()" -> "AP_InertialNav_NavEKF::update(bool)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.38%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_inertia()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_inertia()" -> "Location::change_alt_frame(Location::AltFrame)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n67627×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_inertia()" -> "Location::set_alt_cm(int, Location::AltFrame)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n74453×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_radio()" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::read_radio()\n0.21%\n(0.01%)\n18018×"];
	"Copter::read_radio()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n27028×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_radio()" -> "AP_Motors::set_radio_passthrough(float, float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9010×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_radio()" -> "LowPassFilter<float>::apply(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9010×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_radio()" -> "RC_Channel::get_control_in_zero_dz() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9010×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_radio()" -> "RC_Channel::norm_input() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n27030×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_radio()" -> "RC_Channels::has_active_overrides()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_radio()" -> "RC_Channels::read_input()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.16%\n18018×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_radio()" -> "rc()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18018×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_rangefinder()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::read_rangefinder()\n0.02%\n(0.01%)\n3603×"];
	"Copter::read_rangefinder()" -> "AP_AHRS_NavEKF::get_rotation_body_to_ned() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3603×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_rangefinder()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7206×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_rangefinder()" -> "AP_InertialNav_NavEKF::get_altitude() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7206×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_rangefinder()" -> "LowPassFilter<float>::get() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3603×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_rangefinder()" -> "RangeFinder::distance_cm_orient(Rotation) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7206×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_rangefinder()" -> "RangeFinder::status_orient(Rotation) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7206×", labeldistance="0.50", penwidth="0.50"];
	"Copter::read_rangefinder()" -> "RangeFinder::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3603×", labeldistance="0.50", penwidth="0.50"];
	"Copter::rpm_update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::rpm_update()\n0.01%\n(0.00%)\n7207×"];
	"Copter::rpm_update()" -> "AP_RPM::enabled(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14414×", labeldistance="0.50", penwidth="0.50"];
	"Copter::rpm_update()" -> "AP_RPM::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7207×", labeldistance="0.50", penwidth="0.50"];
	"Copter::run_nav_updates()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::run_nav_updates()\n0.00%\n(0.00%)\n9008×"];
	"Copter::run_nav_updates()" -> "Copter::update_super_simple_bearing(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"Copter::run_nav_updates()" -> "Mode::update_navigation()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_accel_throttle_I_from_pilot_throttle()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::set_accel_throttle_I_from_pilot_throttle()\n0.00%\n(0.00%)\n1×"];
	"Copter::set_accel_throttle_I_from_pilot_throttle()" -> "AC_PID::set_integrator(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_accel_throttle_I_from_pilot_throttle()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_auto_armed(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::set_auto_armed(bool)\n0.00%\n(0.00%)\n1×"];
	"Copter::set_auto_armed(bool)" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_auto_armed(bool)" -> "AP_Logger::Write_Event(LogEvent)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_home(Location const&, bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::set_home(Location const&, bool)\n0.00%\n(0.00%)\n1×"];
	"Copter::set_home(Location const&, bool)" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_home(Location const&, bool)" -> "AP_AHRS_DCM::set_home(Location const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_home(Location const&, bool)" -> "AP_AHRS_NavEKF::get_origin(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_home(Location const&, bool)" -> "AP_Logger::Write_Event(LogEvent)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_home(Location const&, bool)" -> "AP_Logger::Write_Mission_Cmd(AP_Mission const&, AP_Mission::Mission_Command const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_home(Location const&, bool)" -> "AP_Mission::read_cmd_from_storage(unsigned short, AP_Mission::Mission_Command&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_home(Location const&, bool)" -> "Copter::should_log(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_home(Location const&, bool)" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_home(Location const&, bool)" -> "Location::get_distance(Location const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_land_complete(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::set_land_complete(bool)\n0.00%\n(0.00%)\n20745×"];
	"Copter::set_land_complete(bool)" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_land_complete(bool)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_land_complete(bool)" -> "AP_Logger::Write_Event(LogEvent)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_land_complete(bool)" -> "AP_Stats::set_flying(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_land_complete(bool)" -> "ModeStabilize::allows_arming(bool) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_land_complete(bool)" -> "ModeStabilize::has_manual_throttle() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_land_complete_maybe(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::set_land_complete_maybe(bool)\n0.00%\n(0.00%)\n1×"];
	"Copter::set_land_complete_maybe(bool)" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_land_complete_maybe(bool)" -> "AP_Logger::Write_Event(LogEvent)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_mode(Mode::Number, ModeReason)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::set_mode(Mode::Number, ModeReason)\n0.00%\n(0.00%)\n1×"];
	"Copter::set_mode(unsigned char, ModeReason)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::set_mode(unsigned char, ModeReason)\n0.00%\n(0.00%)\n4×"];
	"Copter::set_mode(unsigned char, ModeReason)" -> "AC_Fence::manual_recovery_start()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_mode(unsigned char, ModeReason)" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_mode(unsigned char, ModeReason)" -> "AP_Logger::Write_Error(LogErrorSubsystem, LogErrorCode)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_mode(unsigned char, ModeReason)" -> "AP_Logger::Write_Mode(unsigned char, ModeReason)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_mode(unsigned char, ModeReason)" -> "AP_Notify::set_flight_mode_str(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_mode(unsigned char, ModeReason)" -> "Copter::exit_mode(Mode*&, Mode*&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_mode(unsigned char, ModeReason)" -> "Copter::position_ok() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_mode(unsigned char, ModeReason)" -> "GCS::send_message(ap_message)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_mode(unsigned char, ModeReason)" -> "GCS::send_text(MAV_SEVERITY, char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_mode(unsigned char, ModeReason)" -> "ModeLoiter::has_manual_throttle() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_mode(unsigned char, ModeReason)" -> "ModeLoiter::name() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_mode(unsigned char, ModeReason)" -> "ModeLoiter::requires_GPS() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_mode(unsigned char, ModeReason)" -> "ModeRTL::has_manual_throttle() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_mode(unsigned char, ModeReason)" -> "ModeRTL::init(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_mode(unsigned char, ModeReason)" -> "ModeRTL::is_autopilot() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_mode(unsigned char, ModeReason)" -> "ModeRTL::name() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_mode(unsigned char, ModeReason)" -> "ModeRTL::name4() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_mode(unsigned char, ModeReason)" -> "ModeRTL::requires_GPS() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Copter::set_simple_mode(unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::set_simple_mode(unsigned char)\n0.00%\n(0.00%)\n1×"];
	"Copter::should_log(unsigned int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::should_log(unsigned int)\n0.08%\n(0.03%)\n173569×"];
	"Copter::should_log(unsigned int)" -> "AP_Logger::logging_started()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n173569×", labeldistance="0.50", penwidth="0.50"];
	"Copter::should_log(unsigned int)" -> "AP_Logger::should_log(unsigned int) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n173569×", labeldistance="0.50", penwidth="0.50"];
	"Copter::standby_update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::standby_update()\n0.00%\n(0.00%)\n18017×"];
	"Copter::ten_hz_logging_loop()" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::ten_hz_logging_loop()\n0.43%\n(0.00%)\n1802×"];
	"Copter::ten_hz_logging_loop()" -> "AC_AttitudeControl::control_monitor_log()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ten_hz_logging_loop()" -> "AC_PosControl::write_log()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n1235×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ten_hz_logging_loop()" -> "AP_Logger::Write_Beacon(AP_Beacon&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ten_hz_logging_loop()" -> "AP_Logger::Write_Proximity(AP_Proximity&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ten_hz_logging_loop()" -> "AP_Logger::Write_RCIN()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ten_hz_logging_loop()" -> "AP_Logger::Write_RCOUT()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ten_hz_logging_loop()" -> "AP_Logger::Write_Vibration()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ten_hz_logging_loop()" -> "Copter::Log_Write_Attitude()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ten_hz_logging_loop()" -> "Copter::Log_Write_EKF_POS()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.25%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ten_hz_logging_loop()" -> "Copter::Log_Write_MotBatt()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ten_hz_logging_loop()" -> "Copter::landing_with_GPS()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n505×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ten_hz_logging_loop()" -> "Copter::should_log(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n16342×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ten_hz_logging_loop()" -> "ModeRTL::requires_GPS() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1235×", labeldistance="0.50", penwidth="0.50"];
	"Copter::ten_hz_logging_loop()" -> "ModeStabilize::requires_GPS() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n505×", labeldistance="0.50", penwidth="0.50"];
	"Copter::terrain_logging()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::terrain_logging()\n0.01%\n(0.00%)\n180×"];
	"Copter::terrain_logging()" -> "AP_Terrain::log_terrain_data()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n174×", labeldistance="0.50", penwidth="0.50"];
	"Copter::terrain_logging()" -> "Copter::should_log(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n180×", labeldistance="0.50", penwidth="0.50"];
	"Copter::terrain_update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::terrain_update()\n0.04%\n(0.00%)\n1802×"];
	"Copter::terrain_update()" -> "AP_Terrain::height_above_terrain(float&, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"Copter::terrain_update()" -> "AP_Terrain::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"Copter::thrust_loss_check()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::thrust_loss_check()\n0.03%\n(0.02%)\n72070×"];
	"Copter::thrust_loss_check()" -> "AP_InertialNav_NavEKF::get_velocity_z() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n205×", labeldistance="0.50", penwidth="0.50"];
	"Copter::thrust_loss_check()" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n67837×", labeldistance="0.50", penwidth="0.50"];
	"Copter::tuning()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::tuning()\n0.00%\n(0.00%)\n542×"];
	"Copter::tuning()" -> "rc()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n542×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_auto_armed()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::update_auto_armed()\n0.00%\n(0.00%)\n9008×"];
	"Copter::update_auto_armed()" -> "Copter::set_auto_armed(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_auto_armed()" -> "ModeRTL::has_manual_throttle() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6171×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_auto_armed()" -> "ModeStabilize::has_manual_throttle() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2308×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_dynamic_notch()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::update_dynamic_notch()\n0.00%\n(0.00%)\n9008×"];
	"Copter::update_flight_mode()" [color="#0d1e78", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::update_flight_mode()\n3.96%\n(0.00%)\n72070×"];
	"Copter::update_flight_mode()" -> "ModeRTL::run()" [arrowsize="0.35", color="#0d1a77", fontcolor="#0d1a77", fontsize="10.00", label="3.12%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_flight_mode()" -> "ModeStabilize::run()" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.83%\n22699×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_ground_effect_detector()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::update_ground_effect_detector()\n0.07%\n(0.01%)\n9008×"];
	"Copter::update_ground_effect_detector()" -> "AC_PosControl::is_active_xy() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n17444×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_ground_effect_detector()" -> "AC_PosControl::is_active_z() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8698×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_ground_effect_detector()" -> "AP_AHRS_NavEKF::setTakeoffExpected(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_ground_effect_detector()" -> "AP_AHRS_NavEKF::setTouchdownExpected(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_ground_effect_detector()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8698×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_ground_effect_detector()" -> "AP_InertialNav_NavEKF::get_altitude() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n485×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_ground_effect_detector()" -> "AP_InertialNav_NavEKF::get_velocity() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6843×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_ground_effect_detector()" -> "AP_InertialNav_NavEKF::get_velocity_z() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8698×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_ground_effect_detector()" -> "Copter::optflow_position_ok() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n3710×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_ground_effect_detector()" -> "Copter::position_ok() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n17396×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_ground_effect_detector()" -> "ModeRTL::has_manual_throttle() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6171×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_ground_effect_detector()" -> "ModeStabilize::has_manual_throttle() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2527×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_ground_effect_detector()" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n13014×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_ground_effect_detector()" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n17396×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_ground_effect_detector()" -> cosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n17396×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_home_from_EKF()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::update_home_from_EKF()\n0.01%\n(0.01%)\n72070×"];
	"Copter::update_home_from_EKF()" -> "AP_AHRS_NavEKF::get_location(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4443×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_home_from_EKF()" -> "AP_AHRS_NavEKF::get_origin(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_home_from_EKF()" -> "AP_SmartRTL::set_home(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_home_from_EKF()" -> "Copter::set_home(Location const&, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_home_from_EKF()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6404×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_land_and_crash_detectors()" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::update_land_and_crash_detectors()\n0.26%\n(0.02%)\n72070×"];
	"Copter::update_land_and_crash_detectors()" -> "AP_AHRS_NavEKF::get_accel_ef_blended() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_land_and_crash_detectors()" -> "Copter::crash_check()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_land_and_crash_detectors()" -> "Copter::parachute_check()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_land_and_crash_detectors()" -> "Copter::thrust_loss_check()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_land_and_crash_detectors()" -> "Copter::update_land_detector()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_land_and_crash_detectors()" -> "LowPassFilter<Vector3<float> >::apply(Vector3<float>, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_land_detector()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::update_land_detector()\n0.04%\n(0.03%)\n72070×"];
	"Copter::update_land_detector()" -> "AP_InertialNav_NavEKF::get_velocity_z() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n67836×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_land_detector()" -> "Copter::get_non_takeoff_throttle()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1752×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_land_detector()" -> "Copter::rangefinder_alt_ok()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n67836×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_land_detector()" -> "Copter::set_land_complete(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2483×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_land_detector()" -> "LowPassFilter<Vector3<float> >::get() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n67836×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_land_detector()" -> "LowPassFilter<float>::get() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1752×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_land_detector()" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n67836×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_land_detector()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1752×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_precland()" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::update_precland()\n0.69%\n(0.01%)\n72070×"];
	"Copter::update_precland()" -> "AC_PrecLand::update(float, bool)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.67%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_precland()" -> "Copter::rangefinder_alt_ok()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n144140×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_simple_mode()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::update_simple_mode()\n0.00%\n(0.00%)\n25935×"];
	"Copter::update_super_simple_bearing(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::update_super_simple_bearing(bool)\n0.00%\n(0.00%)\n9009×"];
	"Copter::update_throttle_hover()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::update_throttle_hover()\n0.01%\n(0.01%)\n18017×"];
	"Copter::update_throttle_hover()" -> "AP_GyroFFT::update_freq_hover(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_throttle_hover()" -> "AP_InertialNav_NavEKF::get_velocity_z() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n11534×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_throttle_hover()" -> "AP_MotorsMulticopter::update_throttle_hover(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_throttle_hover()" -> "LowPassFilter<float>::get() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n11534×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_throttle_hover()" -> "ModeRTL::has_manual_throttle() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n12343×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_throttle_hover()" -> "ModeStabilize::has_manual_throttle() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4616×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_throttle_hover()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n11534×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_throttle_mix()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::update_throttle_mix()\n0.01%\n(0.00%)\n9008×"];
	"Copter::update_throttle_mix()" -> "AC_AttitudeControl_Multi::set_throttle_mix_max(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6171×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_throttle_mix()" -> "LowPassFilter<Vector3<float> >::get() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6171×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_throttle_mix()" -> "ModeRTL::has_manual_throttle() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6171×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_throttle_mix()" -> "ModeStabilize::has_manual_throttle() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2308×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_throttle_mix()" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6171×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_throttle_mix()" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6171×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_throttle_mix()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6171×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_using_interlock()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::update_using_interlock()\n0.00%\n(0.00%)\n7×"];
	"Copter::update_using_interlock()" -> "RC_Channels::find_channel_for_option(RC_Channel::AUX_FUNC)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"Copter::update_using_interlock()" -> "rc()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"Copter::winch_init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nCopter::winch_init()\n0.00%\n(0.00%)\n1×"];
	"DerivativeFilter<float, (unsigned char)7>::slope()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nDerivativeFilter<float, (unsigned char)7>::slope()\n0.00%\n(0.00%)\n1740×"];
	"DerivativeFilter<float, (unsigned char)7>::update(float, unsigned int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nDerivativeFilter<float, (unsigned char)7>::update(float, unsigned int)\n0.00%\n(0.00%)\n1817×"];
	"Display::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nDisplay::init()\n0.00%\n(0.00%)\n1×"];
	"Display::~Display()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nDisplay::~Display()\n0.00%\n(0.00%)\n1×"];
	"Display::~Display()" -> "operator delete(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Empty::I2CDeviceManager::get_device(unsigned char, unsigned char, unsigned int, bool, unsigned int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nEmpty::I2CDeviceManager::get_device(unsigned char, unsigned char, unsigned int, bool, unsigned int)\n0.00%\n(0.00%)\n12×"];
	"Empty::OpticalFlow::push_gyro(float, float, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nEmpty::OpticalFlow::push_gyro(float, float, float)\n0.00%\n(0.00%)\n318556×"];
	"Empty::OpticalFlow::push_gyro_bias(float, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nEmpty::OpticalFlow::push_gyro_bias(float, float)\n0.00%\n(0.00%)\n72070×"];
	"ExpectDelay::ExpectDelay(unsigned int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nExpectDelay::ExpectDelay(unsigned int)\n0.00%\n(0.00%)\n10×"];
	"ExpectDelay::~ExpectDelay()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nExpectDelay::~ExpectDelay()\n0.00%\n(0.00%)\n10×"];
	"GCS::get_sensor_status_flags(unsigned int&, unsigned int&, unsigned int&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS::get_sensor_status_flags(unsigned int&, unsigned int&, unsigned int&)\n0.01%\n(0.00%)\n721×"];
	"GCS::get_sensor_status_flags(unsigned int&, unsigned int&, unsigned int&)" -> "GCS::update_sensor_status_flags()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS::init()\n0.00%\n(0.00%)\n1×"];
	"GCS::init()" -> "GCS_Copter::sysid_this_mav() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS::out_of_time() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS::out_of_time() const\n0.15%\n(0.08%)\n252631×"];
	"GCS::out_of_time() const" -> "AP::scheduler()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n252082×", labeldistance="0.50", penwidth="0.50"];
	"GCS::out_of_time() const" -> "AP_Scheduler::time_available_usec()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n252082×", labeldistance="0.50", penwidth="0.50"];
	"GCS::out_of_time() const" -> "GCS_Copter::min_loop_time_remaining_for_message_send_us() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n252082×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_message(ap_message)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS::send_message(ap_message)\n0.00%\n(0.00%)\n7×"];
	"GCS::send_message(ap_message)" -> "GCS_Copter::chan(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n21×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_message(ap_message)" -> "GCS_MAVLINK::save_signing_timestamp(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_parameter_value(char const*, ap_var_type, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS::send_parameter_value(char const*, ap_var_type, float)\n0.12%\n(0.00%)\n32×"];
	"GCS::send_parameter_value(char const*, ap_var_type, float)" -> "AP_Logger::Write_Parameter(char const*, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n32×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_parameter_value(char const*, ap_var_type, float)" -> "AP_Param::count_parameters()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n32×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_parameter_value(char const*, ap_var_type, float)" -> "GCS::send_to_active_channels(unsigned int, char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n32×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_parameter_value(char const*, ap_var_type, float)" -> "GCS_MAVLINK::mav_param_type(ap_var_type)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n32×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_parameter_value(char const*, ap_var_type, float)" -> "__memcpy_chk_avx_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n31×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_parameter_value(char const*, ap_var_type, float)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_parameter_value(char const*, ap_var_type, float)" -> "gcs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n32×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_parameter_value(char const*, ap_var_type, float)" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n32×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_text(MAV_SEVERITY, char const*, ...)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS::send_text(MAV_SEVERITY, char const*, ...)\n0.00%\n(0.00%)\n18×"];
	"GCS::send_text(MAV_SEVERITY, char const*, ...)" -> "GCS::send_textv(MAV_SEVERITY, char const*, __va_list_tag*, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_textv(MAV_SEVERITY, char const*, __va_list_tag*, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS::send_textv(MAV_SEVERITY, char const*, __va_list_tag*, unsigned char)\n0.00%\n(0.00%)\n21×"];
	"GCS::send_textv(MAV_SEVERITY, char const*, __va_list_tag*, unsigned char)" -> "AP::frsky_telem()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n21×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_textv(MAV_SEVERITY, char const*, __va_list_tag*, unsigned char)" -> "AP_HAL::Util::vsnprintf(char*, unsigned long, char const*, __va_list_tag*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n21×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_textv(MAV_SEVERITY, char const*, __va_list_tag*, unsigned char)" -> "AP_Logger::Write_Message(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n21×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_textv(MAV_SEVERITY, char const*, __va_list_tag*, unsigned char)" -> "AP_Notify::send_text(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n21×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_textv(MAV_SEVERITY, char const*, __va_list_tag*, unsigned char)" -> "GCS::service_statustext() [clone .part.63] [clone .constprop.66]" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n20×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_textv(MAV_SEVERITY, char const*, __va_list_tag*, unsigned char)" -> "HALSITL::Scheduler::in_main_thread() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n20×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_textv(MAV_SEVERITY, char const*, __va_list_tag*, unsigned char)" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n21×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_textv(MAV_SEVERITY, char const*, __va_list_tag*, unsigned char)" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n21×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_textv(MAV_SEVERITY, char const*, __va_list_tag*, unsigned char)" -> "__memcpy_chk_avx_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n20×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_textv(MAV_SEVERITY, char const*, __va_list_tag*, unsigned char)" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n40×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_to_active_channels(unsigned int, char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS::send_to_active_channels(unsigned int, char const*)\n0.00%\n(0.00%)\n32×"];
	"GCS::send_to_active_channels(unsigned int, char const*)" -> "GCS_Copter::chan(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n91×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_to_active_channels(unsigned int, char const*)" -> "GCS_MAVLINK::packet_overhead_chan(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n25×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_to_active_channels(unsigned int, char const*)" -> "HALSITL::UARTDriver::txspace()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n25×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_to_active_channels(unsigned int, char const*)" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n25×", labeldistance="0.50", penwidth="0.50"];
	"GCS::send_to_active_channels(unsigned int, char const*)" -> "mavlink_get_msg_entry" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n32×", labeldistance="0.50", penwidth="0.50"];
	"GCS::service_statustext() [clone .part.63] [clone .constprop.66]" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS::service_statustext() [clone .part.63] [clone .constprop.66]\n0.00%\n(0.00%)\n20×"];
	"GCS::service_statustext() [clone .part.63] [clone .constprop.66]" -> "GCS_MAVLINK::packet_overhead_chan(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n20×", labeldistance="0.50", penwidth="0.50"];
	"GCS::service_statustext() [clone .part.63] [clone .constprop.66]" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n20×", labeldistance="0.50", penwidth="0.50"];
	"GCS::service_statustext() [clone .part.63] [clone .constprop.66]" -> "comm_get_txspace(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n20×", labeldistance="0.50", penwidth="0.50"];
	"GCS::setup_console()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS::setup_console()\n0.00%\n(0.00%)\n1×"];
	"GCS::setup_console()" -> "AP::serialmanager()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS::setup_console()" -> "AP_SerialManager::find_serial(AP_SerialManager::SerialProtocol, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS::setup_console()" -> "GCS_Copter::new_gcs_mavlink_backend(GCS_MAVLINK_Parameters&, AP_HAL::UARTDriver&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS::setup_console()" -> "GCS_MAVLINK::init(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS::setup_uarts()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS::setup_uarts()\n0.04%\n(0.00%)\n1×"];
	"GCS::setup_uarts()" -> "AP::serialmanager()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"GCS::setup_uarts()" -> "AP_DEVO_Telem::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS::setup_uarts()" -> "AP_Frsky_Telem::AP_Frsky_Telem(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS::setup_uarts()" -> "AP_Frsky_Telem::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS::setup_uarts()" -> "AP_Frsky_Telem::~AP_Frsky_Telem()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS::setup_uarts()" -> "AP_LTM_Telem::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS::setup_uarts()" -> "AP_SerialManager::find_serial(AP_SerialManager::SerialProtocol, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"GCS::setup_uarts()" -> "GCS_Copter::new_gcs_mavlink_backend(GCS_MAVLINK_Parameters&, AP_HAL::UARTDriver&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"GCS::setup_uarts()" -> "GCS_MAVLINK::init(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n2×", labeldistance="0.50", penwidth="0.50"];
	"GCS::setup_uarts()" -> "operator delete(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS::setup_uarts()" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_passthru()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS::update_passthru()\n0.14%\n(0.02%)\n72180×"];
	"GCS::update_passthru()" -> "AP::serialmanager()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72180×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_passthru()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72180×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_passthru()" -> "AP_SerialManager::get_passthru(AP_HAL::UARTDriver*&, AP_HAL::UARTDriver*&, unsigned char&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72180×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_passthru()" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n72180×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_passthru()" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n72180×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_receive()" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS::update_receive()\n0.75%\n(0.03%)\n72180×"];
	"GCS::update_receive()" -> "GCS::update_passthru()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.14%\n72180×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_receive()" -> "GCS_Copter::chan(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n216540×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_receive()" -> "GCS_MAVLINK::update_receive(unsigned int) [clone .part.59]" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.57%\n216540×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_send()" [color="#0d1575", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS::update_send()\n2.04%\n(0.06%)\n72180×"];
	"GCS::update_send()" -> "AP::fence()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_send()" -> "AP::mission()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_send()" -> "AP::rally()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_send()" -> "GCS_Copter::chan(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n216540×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_send()" -> "GCS_MAVLINK::update_send()" [arrowsize="0.35", color="#0d1475", fontcolor="#0d1475", fontsize="10.00", label="1.85%\n216540×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_send()" -> "MissionItemProtocol::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n216540×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_send()" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n72180×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_send()" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n72180×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_send()" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS::update_sensor_status_flags()\n0.01%\n(0.00%)\n721×"];
	"GCS::update_sensor_status_flags()" -> "AC_Fence::sys_status_enabled() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AC_Fence::sys_status_failed() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AC_Fence::sys_status_present() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP::arming()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP::baro()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP::battery()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP::compass()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1442×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP::fence()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP::gps()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP::visualodom()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP_AHRS_NavEKF::have_inertial_nav() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP_AHRS_NavEKF::healthy() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n641×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP_AHRS_NavEKF::initialised() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP_AHRS_NavEKF::use_compass()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP_Arming::get_enabled_checks() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP_Baro::all_healthy() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP_BattMonitor::healthy(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP_GPS::is_healthy(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP_GPS::logging_failed() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP_InertialSensor::accel_calibrated_ok_all() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n715×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP_InertialSensor::get_accel_health_all() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP_InertialSensor::get_gyro_health_all() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP_InertialSensor::gyro_calibrated_ok_all() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP_Logger::logging_enabled() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP_Logger::logging_failed() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP_Logger::logging_present() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "AP_VisualOdom::enabled() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "Compass::_get_state_id(typesafe_index<unsigned char, TAG_Priority>) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "GCS_Copter::update_vehicle_sensor_status_flags()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS::update_sensor_status_flags()" -> "HALSITL::Util::safety_switch_state()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_Copter::chan(unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_Copter::chan(unsigned char)\n0.03%\n(0.03%)\n584369×"];
	"GCS_Copter::custom_mode() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_Copter::custom_mode() const\n0.00%\n(0.00%)\n185×"];
	"GCS_Copter::frame_type() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_Copter::frame_type() const\n0.00%\n(0.00%)\n185×"];
	"GCS_Copter::frame_type() const" -> "Copter::get_frame_mav_type()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n185×", labeldistance="0.50", penwidth="0.50"];
	"GCS_Copter::min_loop_time_remaining_for_message_send_us() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_Copter::min_loop_time_remaining_for_message_send_us() const\n0.00%\n(0.00%)\n252082×"];
	"GCS_Copter::new_gcs_mavlink_backend(GCS_MAVLINK_Parameters&, AP_HAL::UARTDriver&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_Copter::new_gcs_mavlink_backend(GCS_MAVLINK_Parameters&, AP_HAL::UARTDriver&)\n0.00%\n(0.00%)\n3×"];
	"GCS_Copter::new_gcs_mavlink_backend(GCS_MAVLINK_Parameters&, AP_HAL::UARTDriver&)" -> "GCS_MAVLINK::GCS_MAVLINK(GCS_MAVLINK_Parameters&, AP_HAL::UARTDriver&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"GCS_Copter::new_gcs_mavlink_backend(GCS_MAVLINK_Parameters&, AP_HAL::UARTDriver&)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"GCS_Copter::sysid_this_mav() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_Copter::sysid_this_mav() const\n0.00%\n(0.00%)\n1×"];
	"GCS_Copter::update_vehicle_sensor_status_flags()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_Copter::update_vehicle_sensor_status_flags()\n0.00%\n(0.00%)\n721×"];
	"GCS_Copter::update_vehicle_sensor_status_flags()" -> "AP::opticalflow()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_Copter::update_vehicle_sensor_status_flags()" -> "AP_Proximity::sensor_enabled() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_Copter::update_vehicle_sensor_status_flags()" -> "AP_Proximity::sensor_failed() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_Copter::update_vehicle_sensor_status_flags()" -> "AP_Proximity::sensor_present() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_Copter::update_vehicle_sensor_status_flags()" -> "RangeFinder::has_orientation(Rotation) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_Copter::vehicle_initialised() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_Copter::vehicle_initialised() const\n0.00%\n(0.00%)\n1442×"];
	"GCS_MAVLINK::GCS_MAVLINK(GCS_MAVLINK_Parameters&, AP_HAL::UARTDriver&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::GCS_MAVLINK(GCS_MAVLINK_Parameters&, AP_HAL::UARTDriver&)\n0.00%\n(0.00%)\n3×"];
	"GCS_MAVLINK::GCS_MAVLINK(GCS_MAVLINK_Parameters&, AP_HAL::UARTDriver&)" -> "JitterCorrection::JitterCorrection(unsigned short, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::GCS_MAVLINK(GCS_MAVLINK_Parameters&, AP_HAL::UARTDriver&)" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::do_try_send_message(ap_message)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::do_try_send_message(ap_message)\n0.83%\n(0.06%)\n180482×"];
	"GCS_MAVLINK::do_try_send_message(ap_message)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n180291×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::do_try_send_message(ap_message)" -> "GCS_MAVLINK_Copter::telem_delay() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n180291×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::do_try_send_message(ap_message)" -> "GCS_MAVLINK_Copter::try_send_message(ap_message)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.74%\n180168×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::do_try_send_message(ap_message)" -> "HALSITL::GPIO::usb_connected()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n41×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::get_ap_message_interval(ap_message, unsigned short&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::get_ap_message_interval(ap_message, unsigned short&) const\n0.00%\n(0.00%)\n721×"];
	"GCS_MAVLINK::get_reschedule_interval_ms(GCS_MAVLINK::deferred_message_bucket_t const&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::get_reschedule_interval_ms(GCS_MAVLINK::deferred_message_bucket_t const&) const\n0.05%\n(0.05%)\n107662×"];
	"GCS_MAVLINK::handle_command_long(__mavlink_message const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::handle_command_long(__mavlink_message const&)\n0.00%\n(0.00%)\n1×"];
	"GCS_MAVLINK::handle_command_long(__mavlink_message const&)" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_command_long(__mavlink_message const&)" -> "AP_Logger::Write_Command(__mavlink_command_int_t const&, MAV_RESULT, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_command_long(__mavlink_message const&)" -> "GCS_MAVLINK_Copter::handle_command_long_packet(__mavlink_command_long_t const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_command_long(__mavlink_message const&)" -> "__memcpy_chk_avx_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_command_long(__mavlink_message const&)" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_command_long_packet(__mavlink_command_long_t const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::handle_command_long_packet(__mavlink_command_long_t const&)\n0.00%\n(0.00%)\n1×"];
	"GCS_MAVLINK::handle_command_long_packet(__mavlink_command_long_t const&)" -> "AP::arming()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_command_long_packet(__mavlink_command_long_t const&)" -> "AP_Arming::is_armed()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_command_long_packet(__mavlink_command_long_t const&)" -> "AP_Arming_Copter::arm(AP_Arming::Method, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_command_long_packet(__mavlink_command_long_t const&)" -> "std::enable_if<std::is_floating_point<std::common_type<float, float>::type>::value, bool>::type is_equal<float, float>(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_common_message(__mavlink_message const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::handle_common_message(__mavlink_message const&)\n0.01%\n(0.00%)\n20×"];
	"GCS_MAVLINK::handle_common_message(__mavlink_message const&)" -> "GCS_MAVLINK::handle_command_long(__mavlink_message const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_common_message(__mavlink_message const&)" -> "GCS_MAVLINK::handle_common_param_message(__mavlink_message const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_common_message(__mavlink_message const&)" -> "GCS_MAVLINK::handle_request_data_stream(__mavlink_message const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n14×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_common_message(__mavlink_message const&)" -> "GCS_MAVLINK::handle_set_mode(__mavlink_message const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_common_param_message(__mavlink_message const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::handle_common_param_message(__mavlink_message const&)\n0.00%\n(0.00%)\n1×"];
	"GCS_MAVLINK::handle_common_param_message(__mavlink_message const&)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_common_param_message(__mavlink_message const&)" -> "AP_Param::count_parameters()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_common_param_message(__mavlink_message const&)" -> "AP_Param::first(AP_Param::ParamToken*, ap_var_type*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_common_param_message(__mavlink_message const&)" -> "GCS_MAVLINK_Copter::params_ready() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_common_param_message(__mavlink_message const&)" -> "GCS_MAVLINK_Copter::send_banner()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_common_param_message(__mavlink_message const&)" -> "__memcpy_chk_avx_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_request_data_stream(__mavlink_message const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::handle_request_data_stream(__mavlink_message const&)\n0.01%\n(0.00%)\n14×"];
	"GCS_MAVLINK::handle_request_data_stream(__mavlink_message const&)" -> "GCS_MAVLINK::initialise_message_intervals_for_stream(GCS_MAVLINK::streams)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n126×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_request_data_stream(__mavlink_message const&)" -> "__memcpy_chk_avx_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_set_mode(__mavlink_message const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::handle_set_mode(__mavlink_message const&)\n0.00%\n(0.00%)\n4×"];
	"GCS_MAVLINK::handle_set_mode(__mavlink_message const&)" -> "AP::vehicle()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_set_mode(__mavlink_message const&)" -> "Copter::set_mode(unsigned char, ModeReason)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_set_mode(__mavlink_message const&)" -> "GCS_MAVLINK::packet_overhead_chan(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_set_mode(__mavlink_message const&)" -> "__memcpy_chk_avx_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_set_mode(__mavlink_message const&)" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::handle_set_mode(__mavlink_message const&)" -> "comm_get_txspace(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::init(unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::init(unsigned char)\n0.04%\n(0.00%)\n3×"];
	"GCS_MAVLINK::init(unsigned char)" -> "AP::serialmanager()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::init(unsigned char)" -> "AP_SerialManager::find_baudrate(AP_SerialManager::SerialProtocol, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::init(unsigned char)" -> "AP_SerialManager::get_mavlink_channel(AP_SerialManager::SerialProtocol, unsigned char, mavlink_channel_t&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::init(unsigned char)" -> "AP_SerialManager::get_mavlink_protocol(mavlink_channel_t) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::init(unsigned char)" -> "GCS_MAVLINK::load_signing_key()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::init(unsigned char)" -> "HALSITL::Scheduler::delay(unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n12×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::init(unsigned char)" -> "HALSITL::UARTDriver::begin(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::init(unsigned char)" -> "HALSITL::UARTDriver::get_flow_control()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::init(unsigned char)" -> "HALSITL::UARTDriver::write(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::init(unsigned char)" -> "__snprintf_chk" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::init(unsigned char)" -> "mavlink_get_channel_status" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::initialise_message_intervals_for_stream(GCS_MAVLINK::streams)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::initialise_message_intervals_for_stream(GCS_MAVLINK::streams)\n0.01%\n(0.00%)\n126×"];
	"GCS_MAVLINK::initialise_message_intervals_for_stream(GCS_MAVLINK::streams)" -> "AP::scheduler()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n658×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::initialise_message_intervals_for_stream(GCS_MAVLINK::streams)" -> "AP_HAL::millis16()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::initialise_message_intervals_for_stream(GCS_MAVLINK::streams)" -> "__memcpy_avx_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::initialise_message_intervals_for_stream(GCS_MAVLINK::streams)" -> "__popcountdi2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n17769×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::initialise_message_intervals_from_streamrates()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::initialise_message_intervals_from_streamrates()\n0.00%\n(0.00%)\n3×"];
	"GCS_MAVLINK::initialise_message_intervals_from_streamrates()" -> "AP::scheduler()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::initialise_message_intervals_from_streamrates()" -> "AP_HAL::millis16()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::initialise_message_intervals_from_streamrates()" -> "GCS_MAVLINK::set_ap_message_interval(ap_message, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::initialise_message_intervals_from_streamrates()" -> "__popcountdi2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4229×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::initialise_message_intervals_from_streamrates()" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::load_signing_key()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::load_signing_key()\n0.00%\n(0.00%)\n1×"];
	"GCS_MAVLINK::load_signing_key()" -> "StorageAccess::read_block(void*, unsigned short, unsigned long) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::log_mavlink_stats()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::log_mavlink_stats()\n0.00%\n(0.00%)\n182×"];
	"GCS_MAVLINK::log_mavlink_stats()" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n182×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::log_mavlink_stats()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n182×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::log_mavlink_stats()" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n182×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::log_mavlink_stats()" -> "GCS_MAVLINK::signing_enabled() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n182×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::log_mavlink_stats()" -> "mavlink_get_channel_status" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n182×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::mav_param_type(ap_var_type)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::mav_param_type(ap_var_type)\n0.00%\n(0.00%)\n1248×"];
	"GCS_MAVLINK::packetReceived(__mavlink_status const&, __mavlink_message const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::packetReceived(__mavlink_status const&, __mavlink_message const&)\n0.01%\n(0.00%)\n220×"];
	"GCS_MAVLINK::packetReceived(__mavlink_status const&, __mavlink_message const&)" -> "AP::serialmanager()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::packetReceived(__mavlink_status const&, __mavlink_message const&)" -> "AP_SerialManager::get_mavlink_protocol(mavlink_channel_t) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::packetReceived(__mavlink_status const&, __mavlink_message const&)" -> "GCS_MAVLINK_Copter::handleMessage(__mavlink_message const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n220×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::packetReceived(__mavlink_status const&, __mavlink_message const&)" -> "GCS_MAVLINK_Copter::sysid_my_gcs() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n220×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::packetReceived(__mavlink_status const&, __mavlink_message const&)" -> "MAVLink_routing::check_and_forward(mavlink_channel_t, __mavlink_message const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n220×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::packetReceived(__mavlink_status const&, __mavlink_message const&)" -> "mavlink_get_channel_status" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::packet_overhead_chan(mavlink_channel_t)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::packet_overhead_chan(mavlink_channel_t)\n0.07%\n(0.06%)\n329222×"];
	"GCS_MAVLINK::packet_overhead_chan(mavlink_channel_t)" -> "mavlink_get_channel_status" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n329222×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::queued_param_send()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::queued_param_send()\n0.08%\n(0.00%)\n1826×"];
	"GCS_MAVLINK::queued_param_send()" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1231×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::queued_param_send()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::queued_param_send()" -> "AP_Param::cast_to_float(ap_var_type) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1216×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::queued_param_send()" -> "AP_Param::copy_name_token(AP_Param::ParamToken const&, char*, unsigned long, bool) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n1216×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::queued_param_send()" -> "AP_Param::next_scalar(AP_Param::ParamToken*, ap_var_type*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n1216×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::queued_param_send()" -> "GCS_MAVLINK::mav_param_type(ap_var_type)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1216×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::queued_param_send()" -> "GCS_MAVLINK::packet_overhead_chan(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::queued_param_send()" -> "GCS_MAVLINK::send_parameter_async_replies()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1826×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::queued_param_send()" -> "HALSITL::UARTDriver::get_flow_control()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::queued_param_send()" -> "HALSITL::UARTDriver::txspace()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n21×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::queued_param_send()" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1216×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::save_signing_timestamp(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::save_signing_timestamp(bool)\n0.00%\n(0.00%)\n10×"];
	"GCS_MAVLINK::save_signing_timestamp(bool)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::save_signing_timestamp(bool)" -> "StorageAccess::read_block(void*, unsigned short, unsigned long) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_ahrs()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_ahrs()\n0.01%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_ahrs()" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_ahrs()" -> "AP_AHRS_NavEKF::get_error_rp() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_ahrs()" -> "AP_AHRS_NavEKF::get_error_yaw() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_ahrs()" -> "AP_AHRS_NavEKF::get_gyro_drift() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_ahrs()" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_ahrs2()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_ahrs2()\n0.01%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_ahrs2()" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_ahrs2()" -> "AP_AHRS_NavEKF::get_secondary_attitude(Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_ahrs2()" -> "AP_AHRS_NavEKF::get_secondary_position(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_ahrs2()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_ahrs2()" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n715×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_ahrs3()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_ahrs3()\n0.01%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_ahrs3()" -> "AP::ahrs_navekf()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_ahrs3()" -> "GCS_MAVLINK::packet_overhead_chan(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n717×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_ahrs3()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n717×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_ahrs3()" -> "NavEKF2::getEulerAngles(signed char, Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n717×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_ahrs3()" -> "NavEKF2::getLLH(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n717×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_ahrs3()" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n717×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_ahrs3()" -> "comm_get_txspace(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n717×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_attitude() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_attitude() const\n0.01%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_attitude() const" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_attitude() const" -> "AP_AHRS_NavEKF::get_gyro() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_attitude() const" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_attitude() const" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_banner()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_banner()\n0.00%\n(0.00%)\n1×"];
	"GCS_MAVLINK::send_banner()" -> "AP::fwversion()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_banner()" -> "GCS_MAVLINK::send_text(MAV_SEVERITY, char const*, ...) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_banner()" -> "HALSITL::Util::get_system_id(char*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_battery2()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_battery2()\n0.00%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_battery2()" -> "AP::battery()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_battery_status(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_battery_status(unsigned char) const\n0.01%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_battery_status(unsigned char) const" -> "AP::battery()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_battery_status(unsigned char) const" -> "AP_BattMonitor::capacity_remaining_pct(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_battery_status(unsigned char) const" -> "AP_BattMonitor::consumed_mah(float&, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_battery_status(unsigned char) const" -> "AP_BattMonitor::consumed_wh(float&, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_battery_status(unsigned char) const" -> "AP_BattMonitor::current_amps(float&, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_battery_status(unsigned char) const" -> "AP_BattMonitor::get_temperature(float&, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_battery_status(unsigned char) const" -> "AP_BattMonitor::has_cell_voltages(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1442×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_battery_status(unsigned char) const" -> "AP_BattMonitor::voltage(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_battery_status(unsigned char) const" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_battery_status(unsigned char) const" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_distance_sensor() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_distance_sensor() const\n0.01%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_distance_sensor() const" -> "GCS_MAVLINK::packet_overhead_chan(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7210×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_distance_sensor() const" -> "GCS_MAVLINK::send_proximity() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_distance_sensor() const" -> "RangeFinder::get_backend(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7210×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_distance_sensor() const" -> "comm_get_txspace(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7210×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_fence_status() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_fence_status() const\n0.00%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_fence_status() const" -> "AP::fence()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_ftp_replies()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_ftp_replies()\n0.05%\n(0.05%)\n216540×"];
	"GCS_MAVLINK::send_global_position_int()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_global_position_int()\n0.01%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_global_position_int()" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1442×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_global_position_int()" -> "AP_AHRS_NavEKF::get_position(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_global_position_int()" -> "AP_AHRS_NavEKF::get_relative_position_D_home(float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_global_position_int()" -> "AP_AHRS_NavEKF::get_velocity_NED(Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_global_position_int()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_global_position_int()" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_gps_global_origin() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_gps_global_origin() const\n0.00%\n(0.00%)\n1×"];
	"GCS_MAVLINK::send_gps_global_origin() const" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_gps_global_origin() const" -> "AP_AHRS_NavEKF::get_origin(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_gps_global_origin() const" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_gps_global_origin() const" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_gps_global_origin() const" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_heartbeat() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_heartbeat() const\n0.00%\n(0.00%)\n185×"];
	"GCS_MAVLINK::send_heartbeat() const" -> "AP::internalerror()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n154×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_heartbeat() const" -> "GCS_Copter::custom_mode() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n185×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_heartbeat() const" -> "GCS_Copter::frame_type() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n185×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_heartbeat() const" -> "GCS_MAVLINK_Copter::base_mode() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n185×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_heartbeat() const" -> "GCS_MAVLINK_Copter::vehicle_system_status() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n185×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_heartbeat() const" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n185×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_home_position() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_home_position() const\n0.00%\n(0.00%)\n1×"];
	"GCS_MAVLINK::send_home_position() const" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_home_position() const" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_home_position() const" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_local_position() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_local_position() const\n0.01%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_local_position() const" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_local_position() const" -> "AP_AHRS_NavEKF::get_relative_position_NED_home(Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_local_position() const" -> "AP_AHRS_NavEKF::get_velocity_NED(Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n551×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_local_position() const" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n551×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_local_position() const" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n551×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_meminfo()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_meminfo()\n0.01%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_meminfo()" -> "HALSITL::Util::available_memory()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_meminfo()" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_opticalflow()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_opticalflow()\n0.00%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_opticalflow()" -> "AP::opticalflow()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_parameter_async_replies()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_parameter_async_replies()\n0.00%\n(0.00%)\n1826×"];
	"GCS_MAVLINK::send_parameter_async_replies()" -> "ByteBuffer::peekbytes(unsigned char*, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1826×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_power_status()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_power_status()\n0.01%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_power_status()" -> "GCS_Copter::vehicle_initialised() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_power_status()" -> "HALSITL::AnalogIn::board_voltage()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_power_status()" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_proximity() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_proximity() const\n0.00%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_proximity() const" -> "AP_Proximity::distance_max() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_proximity() const" -> "AP_Proximity::distance_min() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_proximity() const" -> "AP_Proximity::get_status() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_proximity() const" -> "AP_Proximity::get_upward_distance(float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_rangefinder() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_rangefinder() const\n0.00%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_rangefinder() const" -> "RangeFinder::find_instance(Rotation) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_raw_imu()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_raw_imu()\n0.01%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_raw_imu()" -> "AP::compass()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_raw_imu()" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_raw_imu()" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_raw_imu()" -> "Compass::_get_state_id(typesafe_index<unsigned char, TAG_Priority>) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_raw_imu()" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_rc_channels() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_rc_channels() const\n0.01%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_rc_channels() const" -> "AP::rssi()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_rc_channels() const" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_rc_channels() const" -> "AP_RSSI::read_receiver_rssi_uint8()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_rc_channels() const" -> "RC_Channels::get_radio_in(unsigned short*, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_rc_channels() const" -> "RC_Channels::get_valid_channel_count()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_rc_channels() const" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_rc_channels() const" -> "rc()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_rc_channels_raw() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_rc_channels_raw() const\n0.00%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_rc_channels_raw() const" -> "mavlink_get_channel_status" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_rpm() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_rpm() const\n0.00%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_rpm() const" -> "AP::rpm()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_rpm() const" -> "AP_RPM::enabled(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1442×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_scaled_imu(unsigned char, void (*)(mavlink_channel_t, unsigned int, short, short, short, short, short, short, short, short, short, short))" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_scaled_imu(unsigned char, void (*)(mavlink_channel_t, unsigned int, short, short, short, short, short, short, short, short, short, short))\n0.02%\n(0.00%)\n1442×"];
	"GCS_MAVLINK::send_scaled_imu(unsigned char, void (*)(mavlink_channel_t, unsigned int, short, short, short, short, short, short, short, short, short, short))" -> "AP::compass()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1442×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_scaled_imu(unsigned char, void (*)(mavlink_channel_t, unsigned int, short, short, short, short, short, short, short, short, short, short))" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1442×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_scaled_imu(unsigned char, void (*)(mavlink_channel_t, unsigned int, short, short, short, short, short, short, short, short, short, short))" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1442×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_scaled_imu(unsigned char, void (*)(mavlink_channel_t, unsigned int, short, short, short, short, short, short, short, short, short, short))" -> "Compass::_get_state_id(typesafe_index<unsigned char, TAG_Priority>) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1442×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_scaled_imu(unsigned char, void (*)(mavlink_channel_t, unsigned int, short, short, short, short, short, short, short, short, short, short))" -> "mavlink_msg_scaled_imu2_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_scaled_imu(unsigned char, void (*)(mavlink_channel_t, unsigned int, short, short, short, short, short, short, short, short, short, short))" -> "mavlink_msg_scaled_imu3_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_sensor_offsets()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_sensor_offsets()\n0.00%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_sensor_offsets()" -> "AP::baro()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n65×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_sensor_offsets()" -> "AP::compass()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_sensor_offsets()" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_sensor_offsets()" -> "Compass::_get_state_id(typesafe_index<unsigned char, TAG_Priority>) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n65×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_sensor_offsets()" -> "Compass::get_declination() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n65×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_sensor_offsets()" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n65×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_servo_output_raw()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_servo_output_raw()\n0.01%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_servo_output_raw()" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_servo_output_raw()" -> "HALSITL::RCOutput::read(unsigned short*, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_servo_output_raw()" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_sys_status()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_sys_status()\n0.02%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_sys_status()" -> "AP::battery()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_sys_status()" -> "AP::internalerror()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1442×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_sys_status()" -> "AP::scheduler()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_sys_status()" -> "AP_BattMonitor::capacity_remaining_pct(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_sys_status()" -> "AP_BattMonitor::current_amps(float&, unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_sys_status()" -> "AP_BattMonitor::healthy(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_sys_status()" -> "AP_BattMonitor::voltage(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_sys_status()" -> "AP_Scheduler::load_average()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_sys_status()" -> "GCS::get_sensor_status_flags(unsigned int&, unsigned int&, unsigned int&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_sys_status()" -> "GCS_Copter::vehicle_initialised() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_sys_status()" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_sys_status()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_text(MAV_SEVERITY, char const*, ...) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_text(MAV_SEVERITY, char const*, ...) const\n0.00%\n(0.00%)\n3×"];
	"GCS_MAVLINK::send_text(MAV_SEVERITY, char const*, ...) const" -> "GCS::send_textv(MAV_SEVERITY, char const*, __va_list_tag*, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_vfr_hud()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_vfr_hud()\n0.01%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_vfr_hud()" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1442×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_vfr_hud()" -> "AP::gps()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_vfr_hud()" -> "AP_AHRS_NavEKF::get_position(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_vfr_hud()" -> "AP_AHRS_NavEKF::get_velocity_NED(Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_vfr_hud()" -> "AP_AHRS_NavEKF::groundspeed_vector()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_vfr_hud()" -> "GCS_MAVLINK_Copter::vfr_hud_alt() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_vfr_hud()" -> "GCS_MAVLINK_Copter::vfr_hud_throttle() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_vfr_hud()" -> "Vector2<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_vfr_hud()" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_vibration() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::send_vibration() const\n0.01%\n(0.00%)\n721×"];
	"GCS_MAVLINK::send_vibration() const" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_vibration() const" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_vibration() const" -> "AP_InertialSensor::get_accel_clip_count(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2163×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_vibration() const" -> "AP_InertialSensor::get_vibration_levels(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::send_vibration() const" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::set_ap_message_interval(ap_message, unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::set_ap_message_interval(ap_message, unsigned short)\n0.00%\n(0.00%)\n3×"];
	"GCS_MAVLINK::set_ap_message_interval(ap_message, unsigned short)" -> "AP::scheduler()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::set_ap_message_interval(ap_message, unsigned short)" -> "AP_HAL::millis16()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::signing_enabled() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::signing_enabled() const\n0.00%\n(0.00%)\n182×"];
	"GCS_MAVLINK::signing_enabled() const" -> "mavlink_get_channel_status" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n182×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::try_send_message(ap_message)\n0.61%\n(0.06%)\n178726×"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "AP::ahrs_navekf()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "AP::baro()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2163×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "AP::battery()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "AP::compass()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1442×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "AP::gps()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2884×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "AP::mount()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1442×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "AP::rtc()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "AP::sitl()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "AP_AHRS_NavEKF::send_ekf_status_report(mavlink_channel_t) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "AP_GPS::send_mavlink_gps2_raw(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "AP_GPS::send_mavlink_gps_raw(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "AP_GPS::send_mavlink_gps_rtk(mavlink_channel_t, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1442×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1627×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "AP_Mount::send_gimbal_report(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "AP_Mount::send_mount_status(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "AP_RTC::get_utc_usec(unsigned long&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "Compass::send_mag_cal_progress(GCS_MAVLINK const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "Compass::send_mag_cal_report(GCS_MAVLINK const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::packet_overhead_chan(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n175121×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::queued_param_send()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n1826×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_ahrs2()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_ahrs3()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_attitude() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_battery2()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_battery_status(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_distance_sensor() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_fence_status() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_global_position_int()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_gps_global_origin() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_heartbeat() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n185×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_home_position() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_local_position() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_meminfo()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_opticalflow()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_power_status()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_rangefinder() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_raw_imu()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_rc_channels() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_rc_channels_raw() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_rpm() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_scaled_imu(unsigned char, void (*)(mavlink_channel_t, unsigned int, short, short, short, short, short, short, short, short, short, short))" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n1442×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_sensor_offsets()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_servo_output_raw()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_sys_status()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_vfr_hud()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::send_vibration() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::try_send_mission_message(ap_message)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK::txspace() const [clone .isra.7] [clone .part.8] [clone .constprop.97]" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.14%\n174400×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK_Copter::send_nav_controller_output() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK_Copter::send_pid_tuning()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "GCS_MAVLINK_Copter::send_position_target_global_int()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "HALSITL::AnalogIn::board_voltage()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "HALSITL::UARTDriver::txspace()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "SITL::SITL::simstate_send(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_message(ap_message)" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n2163×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_mission_message(ap_message)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::try_send_mission_message(ap_message)\n0.01%\n(0.00%)\n721×"];
	"GCS_MAVLINK::try_send_mission_message(ap_message)" -> "AP::mission()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_mission_message(ap_message)" -> "GCS_MAVLINK::packet_overhead_chan(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_mission_message(ap_message)" -> "HALSITL::UARTDriver::txspace()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::try_send_mission_message(ap_message)" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::txspace() const [clone .isra.7] [clone .part.8] [clone .constprop.97]" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::txspace() const [clone .isra.7] [clone .part.8] [clone .constprop.97]\n0.14%\n(0.01%)\n174400×"];
	"GCS_MAVLINK::txspace() const [clone .isra.7] [clone .part.8] [clone .constprop.97]" -> "HALSITL::UARTDriver::txspace()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n174400×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_receive(unsigned int) [clone .part.59]" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::update_receive(unsigned int) [clone .part.59]\n0.57%\n(0.13%)\n216540×"];
	"GCS_MAVLINK::update_receive(unsigned int) [clone .part.59]" -> "AP_HAL::Util::perf_begin(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n216760×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_receive(unsigned int) [clone .part.59]" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n216979×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_receive(unsigned int) [clone .part.59]" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_receive(unsigned int) [clone .part.59]" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n433080×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_receive(unsigned int) [clone .part.59]" -> "GCS_MAVLINK::log_mavlink_stats()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n182×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_receive(unsigned int) [clone .part.59]" -> "GCS_MAVLINK::packet_overhead_chan(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n138180×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_receive(unsigned int) [clone .part.59]" -> "GCS_MAVLINK_Copter::packetReceived(__mavlink_status const&, __mavlink_message const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n220×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_receive(unsigned int) [clone .part.59]" -> "HALSITL::UARTDriver::available()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.13%\n216540×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_receive(unsigned int) [clone .part.59]" -> "HALSITL::UARTDriver::read()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n4580×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_receive(unsigned int) [clone .part.59]" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_receive(unsigned int) [clone .part.59]" -> "comm_get_txspace(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.14%\n138180×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_receive(unsigned int) [clone .part.59]" -> "mavlink_parse_char" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4580×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_send()" [color="#0d1475", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::update_send()\n1.85%\n(0.22%)\n216540×"];
	"GCS_MAVLINK::update_send()" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n216210×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_send()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n469171×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_send()" -> "AP_HAL::millis16()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n359567×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_send()" -> "AP_Logger::handle_log_send()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.37%\n216210×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_send()" -> "GCS::out_of_time() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.15%\n252631×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_send()" -> "GCS_MAVLINK::do_try_send_message(ap_message)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.83%\n180482×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_send()" -> "GCS_MAVLINK::get_reschedule_interval_ms(GCS_MAVLINK::deferred_message_bucket_t const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n107662×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_send()" -> "GCS_MAVLINK::initialise_message_intervals_from_streamrates()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_send()" -> "GCS_MAVLINK::send_ftp_replies()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n216540×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_send()" -> "__memcpy_avx_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n726×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_send()" -> "__popcountdi2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n124008×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_send()" -> "mavlink_get_channel_status" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n216540×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_signing_timestamp(unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::update_signing_timestamp(unsigned long)\n0.00%\n(0.00%)\n1×"];
	"GCS_MAVLINK::update_signing_timestamp(unsigned long)" -> "GCS_MAVLINK::save_signing_timestamp(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::update_signing_timestamp(unsigned long)" -> "mavlink_get_channel_status" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK::vfr_hud_alt() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK::vfr_hud_alt() const\n0.00%\n(0.00%)\n721×"];
	"GCS_MAVLINK_Copter::base_mode() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK_Copter::base_mode() const\n0.00%\n(0.00%)\n185×"];
	"GCS_MAVLINK_Copter::handleMessage(__mavlink_message const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK_Copter::handleMessage(__mavlink_message const&)\n0.01%\n(0.00%)\n220×"];
	"GCS_MAVLINK_Copter::handleMessage(__mavlink_message const&)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n200×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::handleMessage(__mavlink_message const&)" -> "GCS_MAVLINK::handle_common_message(__mavlink_message const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n20×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::handle_command_long_packet(__mavlink_command_long_t const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK_Copter::handle_command_long_packet(__mavlink_command_long_t const&)\n0.00%\n(0.00%)\n1×"];
	"GCS_MAVLINK_Copter::handle_command_long_packet(__mavlink_command_long_t const&)" -> "GCS_MAVLINK::handle_command_long_packet(__mavlink_command_long_t const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::packetReceived(__mavlink_status const&, __mavlink_message const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK_Copter::packetReceived(__mavlink_status const&, __mavlink_message const&)\n0.01%\n(0.00%)\n220×"];
	"GCS_MAVLINK_Copter::packetReceived(__mavlink_status const&, __mavlink_message const&)" -> "AP_Follow::handle_msg(__mavlink_message const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n220×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::packetReceived(__mavlink_status const&, __mavlink_message const&)" -> "GCS_MAVLINK::packetReceived(__mavlink_status const&, __mavlink_message const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n220×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::params_ready() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK_Copter::params_ready() const\n0.00%\n(0.00%)\n1×"];
	"GCS_MAVLINK_Copter::send_banner()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK_Copter::send_banner()\n0.00%\n(0.00%)\n1×"];
	"GCS_MAVLINK_Copter::send_banner()" -> "Copter::get_frame_string()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::send_banner()" -> "GCS_MAVLINK::send_banner()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::send_banner()" -> "GCS_MAVLINK::send_text(MAV_SEVERITY, char const*, ...) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::send_nav_controller_output() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK_Copter::send_nav_controller_output() const\n0.01%\n(0.00%)\n721×"];
	"GCS_MAVLINK_Copter::send_nav_controller_output() const" -> "AC_PosControl::get_alt_error() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::send_nav_controller_output() const" -> "Mode::crosstrack_error() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n227×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::send_nav_controller_output() const" -> "Mode::wp_bearing() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n227×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::send_nav_controller_output() const" -> "Mode::wp_distance() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n227×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::send_nav_controller_output() const" -> "ModeRTL::crosstrack_error() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n494×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::send_nav_controller_output() const" -> "ModeRTL::wp_bearing() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n494×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::send_nav_controller_output() const" -> "ModeRTL::wp_distance() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n494×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::send_nav_controller_output() const" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::send_nav_controller_output() const" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::send_pid_tuning()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK_Copter::send_pid_tuning()\n0.00%\n(0.00%)\n721×"];
	"GCS_MAVLINK_Copter::send_pid_tuning()" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::send_pid_tuning()" -> "AP_AHRS_NavEKF::get_gyro() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::send_position_target_global_int()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK_Copter::send_position_target_global_int()\n0.01%\n(0.00%)\n721×"];
	"GCS_MAVLINK_Copter::send_position_target_global_int()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n462×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::send_position_target_global_int()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::send_position_target_global_int()" -> "Mode::get_wp(Location&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n227×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::send_position_target_global_int()" -> "ModeRTL::get_wp(Location&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n494×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::send_position_target_global_int()" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n462×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::sysid_my_gcs() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK_Copter::sysid_my_gcs() const\n0.00%\n(0.00%)\n220×"];
	"GCS_MAVLINK_Copter::telem_delay() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK_Copter::telem_delay() const\n0.00%\n(0.00%)\n180291×"];
	"GCS_MAVLINK_Copter::try_send_message(ap_message)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK_Copter::try_send_message(ap_message)\n0.74%\n(0.07%)\n180168×"];
	"GCS_MAVLINK_Copter::try_send_message(ap_message)" -> "AP_ADSB::send_adsb_vehicle(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::try_send_message(ap_message)" -> "AP_OADatabase::send_adsb_vehicle(mavlink_channel_t, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::try_send_message(ap_message)" -> "AP_Terrain::send_request(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::try_send_message(ap_message)" -> "GCS_MAVLINK::get_ap_message_interval(ap_message, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::try_send_message(ap_message)" -> "GCS_MAVLINK::packet_overhead_chan(mavlink_channel_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2163×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::try_send_message(ap_message)" -> "GCS_MAVLINK::try_send_message(ap_message)" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.61%\n178726×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::try_send_message(ap_message)" -> "HALSITL::UARTDriver::txspace()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2163×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::vehicle_system_status() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK_Copter::vehicle_system_status() const\n0.00%\n(0.00%)\n185×"];
	"GCS_MAVLINK_Copter::vfr_hud_alt() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK_Copter::vfr_hud_alt() const\n0.00%\n(0.00%)\n721×"];
	"GCS_MAVLINK_Copter::vfr_hud_alt() const" -> "GCS_MAVLINK::vfr_hud_alt() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::vfr_hud_throttle() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK_Copter::vfr_hud_throttle() const\n0.00%\n(0.00%)\n721×"];
	"GCS_MAVLINK_Copter::vfr_hud_throttle() const" -> "LowPassFilter<float>::get() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Copter::vfr_hud_throttle() const" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n721×", labeldistance="0.50", penwidth="0.50"];
	"GCS_MAVLINK_Parameters::GCS_MAVLINK_Parameters()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGCS_MAVLINK_Parameters::GCS_MAVLINK_Parameters()\n0.00%\n(0.00%)\n6×"];
	"GCS_MAVLINK_Parameters::GCS_MAVLINK_Parameters()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"GetOptLong::GetOptLong(int, char* const*, char const*, GetOptLong::option const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGetOptLong::GetOptLong(int, char* const*, char const*, GetOptLong::option const*)\n0.00%\n(0.00%)\n1×"];
	"GetOptLong::getoption()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nGetOptLong::getoption()\n0.00%\n(0.00%)\n6×"];
	"GetOptLong::getoption()" -> "__GI_strchr" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"GetOptLong::getoption()" -> "__strcspn_sse42" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"GetOptLong::getoption()" -> "__strncmp_sse42" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"GetOptLong::getoption()" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"GetOptLong::getoption()" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n31×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::ADCSource::set_pin(unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::ADCSource::set_pin(unsigned char)\n0.00%\n(0.00%)\n3604×"];
	"HALSITL::ADCSource::voltage_average()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::ADCSource::voltage_average()\n0.00%\n(0.00%)\n3604×"];
	"HALSITL::AnalogIn::board_voltage()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::AnalogIn::board_voltage()\n0.00%\n(0.00%)\n1449×"];
	"HALSITL::AnalogIn::channel(short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::AnalogIn::channel(short)\n0.00%\n(0.00%)\n3×"];
	"HALSITL::AnalogIn::channel(short)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::AnalogIn::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::AnalogIn::init()\n0.00%\n(0.00%)\n1×"];
	"HALSITL::GPIO::pinMode(unsigned char, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::GPIO::pinMode(unsigned char, unsigned char)\n0.00%\n(0.00%)\n5×"];
	"HALSITL::GPIO::usb_connected()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::GPIO::usb_connected()\n0.00%\n(0.00%)\n41×"];
	"HALSITL::GPIO::write(unsigned char, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::GPIO::write(unsigned char, unsigned char)\n0.00%\n(0.00%)\n6123×"];
	"HALSITL::RCInput::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::RCInput::init()\n0.00%\n(0.00%)\n1×"];
	"HALSITL::RCInput::init()" -> "AP::RC()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::RCInput::init()" -> "AP_RCProtocol::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::RCInput::new_input()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::RCInput::new_input()\n0.02%\n(0.00%)\n18018×"];
	"HALSITL::RCInput::new_input()" -> "AP::RC()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18018×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::RCInput::new_input()" -> "AP_RCProtocol::new_input()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n18018×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::RCInput::num_channels()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::RCInput::num_channels()\n0.00%\n(0.00%)\n730×"];
	"HALSITL::RCInput::num_channels()" -> "AP::sitl()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n730×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::RCInput::protocol() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::RCInput::protocol() const\n0.00%\n(0.00%)\n1×"];
	"HALSITL::RCInput::read(unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::RCInput::read(unsigned char)\n0.04%\n(0.04%)\n144160×"];
	"HALSITL::RCInput::read(unsigned char)" -> "AP::sitl()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n144160×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::RCOutput::cork()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::RCOutput::cork()\n0.01%\n(0.01%)\n72070×"];
	"HALSITL::RCOutput::enable_ch(unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::RCOutput::enable_ch(unsigned char)\n0.00%\n(0.00%)\n2896×"];
	"HALSITL::RCOutput::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::RCOutput::init()\n0.00%\n(0.00%)\n1×"];
	"HALSITL::RCOutput::push()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::RCOutput::push()\n0.01%\n(0.01%)\n72070×"];
	"HALSITL::RCOutput::read(unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::RCOutput::read(unsigned char)\n0.00%\n(0.00%)\n24360×"];
	"HALSITL::RCOutput::read(unsigned short*, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::RCOutput::read(unsigned short*, unsigned char)\n0.00%\n(0.00%)\n721×"];
	"HALSITL::RCOutput::set_freq(unsigned int, unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::RCOutput::set_freq(unsigned int, unsigned short)\n0.00%\n(0.00%)\n2×"];
	"HALSITL::RCOutput::write(unsigned char, unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::RCOutput::write(unsigned char, unsigned short)\n0.16%\n(0.16%)\n1441408×"];
	"HALSITL::SITL_State::_check_rc_input()" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::_check_rc_input()\n0.27%\n(0.08%)\n219333×"];
	"HALSITL::SITL_State::_check_rc_input()" -> "SocketAPM::recv(void*, unsigned long, unsigned int)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.19%\n222781×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_fdm_input_local()" [color="#0c8390", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::_fdm_input_local()\n22.57%\n(0.23%)\n219333×"];
	"HALSITL::SITL_State::_fdm_input_local()" -> "HALSITL::SITL_State::_check_rc_input()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.27%\n219333×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_fdm_input_local()" -> "HALSITL::SITL_State::_output_to_flightgear()" [arrowsize="0.35", color="#0d1475", fontcolor="#0d1475", fontsize="10.00", label="1.71%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_fdm_input_local()" -> "HALSITL::SITL_State::_simulator_servos(sitl_input&)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.67%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_fdm_input_local()" -> "HALSITL::SITL_State::set_height_agl()" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.07%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_fdm_input_local()" -> "HALSITL::Scheduler::stop_clock(unsigned long)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.26%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_fdm_input_local()" -> "SITL::Aircraft::fill_fdm(SITL::sitl_fdm&)" [arrowsize="0.35", color="#0d247a", fontcolor="#0d247a", fontsize="10.00", label="5.45%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_fdm_input_local()" -> "SITL::Aircraft::update_model(sitl_input const&)" [arrowsize="0.36", color="#0d4a83", fontcolor="#0d4a83", fontsize="10.00", label="12.89%\n219332×", labeldistance="0.52", penwidth="0.52"];
	"HALSITL::SITL_State::_fdm_input_local()" -> "SITL::EFI_MegaSquirt::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_fdm_input_step()" [color="#14b809", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::_fdm_input_step()\n51.46%\n(0.14%)\n219333×"];
	"HALSITL::SITL_State::_fdm_input_step()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n228467×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_fdm_input_step()" -> "HALSITL::SITL_State::_fdm_input_local()" [arrowsize="0.48", color="#0c8390", fontcolor="#0c8390", fontsize="10.00", label="22.57%\n219333×", labeldistance="0.90", penwidth="0.90"];
	"HALSITL::SITL_State::_fdm_input_step()" -> "HALSITL::SITL_State::_update_airspeed(float)" [arrowsize="0.35", color="#0d1575", fontcolor="#0d1575", fontsize="10.00", label="2.07%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_fdm_input_step()" -> "HALSITL::SITL_State::_update_gps(double, double, float, double, double, double, double, bool)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.33%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_fdm_input_step()" -> "HALSITL::SITL_State::_update_rangefinder(float)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.46%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_fdm_input_step()" -> "HALSITL::Scheduler::_run_io_procs()" [arrowsize="0.35", color="#0d1b77", fontcolor="#0d1b77", fontsize="10.00", label="3.29%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_fdm_input_step()" -> "HALSITL::Scheduler::_run_timer_procs()" [arrowsize="0.47", color="#0c8390", fontcolor="#0c8390", fontsize="10.00", label="22.54%\n219332×", labeldistance="0.90", penwidth="0.90"];
	"HALSITL::SITL_State::_fdm_input_step()" -> "HALSITL::Scheduler::sitl_end_atomic()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_fdm_input_step()" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_fdm_input_step()" -> kill [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n219331×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_gps_send_ubx(unsigned char, unsigned char*, unsigned short, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::_gps_send_ubx(unsigned char, unsigned char*, unsigned short, unsigned char)\n0.08%\n(0.06%)\n5496×"];
	"HALSITL::SITL_State::_gps_send_ubx(unsigned char, unsigned char*, unsigned short, unsigned char)" -> write [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n267218×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_output_to_flightgear()" [color="#0d1475", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::_output_to_flightgear()\n1.71%\n(0.31%)\n219332×"];
	"HALSITL::SITL_State::_output_to_flightgear()" -> "SITL::FGNetFDM::ByteSwap()" [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.29%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_output_to_flightgear()" -> "SocketAPM::send(void const*, unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_output_to_flightgear()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n877328×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_parse_command_line(int, char* const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::_parse_command_line(int, char* const*)\n0.00%\n(0.00%)\n1×"];
	"HALSITL::SITL_State::_parse_command_line(int, char* const*)" -> "GetOptLong::GetOptLong(int, char* const*, char const*, GetOptLong::option const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_parse_command_line(int, char* const*)" -> "GetOptLong::getoption()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_parse_command_line(int, char* const*)" -> "HALSITL::SITL_State::_set_param_default(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_parse_command_line(int, char* const*)" -> "HALSITL::SITL_State::_sitl_setup(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_parse_command_line(int, char* const*)" -> "SITL::Aircraft::set_speedup(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_parse_command_line(int, char* const*)" -> "SITL::MultiCopter::create(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_parse_command_line(int, char* const*)" -> "__strncasecmp_avx" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_parse_command_line(int, char* const*)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_parse_command_line(int, char* const*)" -> setvbuf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_parse_command_line(int, char* const*)" -> sigaction [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_parse_command_line(int, char* const*)" -> sigemptyset [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_parse_command_line(int, char* const*)" -> strdup [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_parse_command_line(int, char* const*)" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_set_param_default(char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::_set_param_default(char const*)\n0.00%\n(0.00%)\n1×"];
	"HALSITL::SITL_State::_set_param_default(char const*)" -> "AP_Param::find(char const*, ap_var_type*, unsigned short*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_set_param_default(char const*)" -> "AP_Param::save(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_set_param_default(char const*)" -> "__GI_strchr" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_set_param_default(char const*)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_set_param_default(char const*)" -> strtof [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_setup_fdm()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::_setup_fdm()\n0.00%\n(0.00%)\n1×"];
	"HALSITL::SITL_State::_setup_fdm()" -> "SocketAPM::bind(char const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_setup_fdm()" -> "SocketAPM::reuseaddress()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_setup_fdm()" -> "SocketAPM::set_blocking(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_setup_fdm()" -> "SocketAPM::set_cloexec()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_simulator_servos(sitl_input&)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::_simulator_servos(sitl_input&)\n0.67%\n(0.58%)\n219332×"];
	"HALSITL::SITL_State::_simulator_servos(sitl_input&)" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_simulator_servos(sitl_input&)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n877328×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_sitl_setup(char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::_sitl_setup(char const*)\n0.00%\n(0.00%)\n1×"];
	"HALSITL::SITL_State::_sitl_setup(char const*)" -> "AP::sitl()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_sitl_setup(char const*)" -> "AP_InertialSensor::get_singleton()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_sitl_setup(char const*)" -> "AP_Param::find_object(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_sitl_setup(char const*)" -> "HALSITL::SITL_State::_setup_fdm()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_sitl_setup(char const*)" -> "HALSITL::SITL_State::_update_airspeed(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_sitl_setup(char const*)" -> "HALSITL::SITL_State::_update_gps(double, double, float, double, double, double, double, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_sitl_setup(char const*)" -> "HALSITL::SITL_State::_update_rangefinder(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_sitl_setup(char const*)" -> "HALSITL::Scheduler::stop_clock(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_sitl_setup(char const*)" -> "SITL::Aircraft::set_precland(SITL::SIM_Precland*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_sitl_setup(char const*)" -> "SocketAPM::connect(char const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_sitl_setup(char const*)" -> "__fprintf_chk" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_sitl_setup(char const*)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_update_airspeed(float)" [color="#0d1575", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::_update_airspeed(float)\n2.07%\n(1.78%)\n219333×"];
	"HALSITL::SITL_State::_update_airspeed(float)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n219333×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_update_airspeed(float)" -> "rand_float()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.25%\n438666×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_update_gps(double, double, float, double, double, double, double, bool)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::_update_gps(double, double, float, double, double, double, double, bool)\n0.33%\n(0.17%)\n219333×"];
	"HALSITL::SITL_State::_update_gps(double, double, float, double, double, double, double, bool)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n440492×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_update_gps(double, double, float, double, double, double, double, bool)" -> "HALSITL::SITL_State::_update_gps_instance(SITL::SITL::GPSType, HALSITL::SITL_State::gps_data const*, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n913×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_update_gps(double, double, float, double, double, double, double, bool)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_update_gps(double, double, float, double, double, double, double, bool)" -> read [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n913×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_update_gps(double, double, float, double, double, double, double, bool)" -> sinf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n912×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_update_gps_instance(SITL::SITL::GPSType, HALSITL::SITL_State::gps_data const*, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::_update_gps_instance(SITL::SITL::GPSType, HALSITL::SITL_State::gps_data const*, unsigned char)\n0.08%\n(0.00%)\n913×"];
	"HALSITL::SITL_State::_update_gps_instance(SITL::SITL::GPSType, HALSITL::SITL_State::gps_data const*, unsigned char)" -> "HALSITL::SITL_State::_update_gps_ubx(HALSITL::SITL_State::gps_data const*, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n913×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_update_gps_ubx(HALSITL::SITL_State::gps_data const*, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::_update_gps_ubx(HALSITL::SITL_State::gps_data const*, unsigned char)\n0.08%\n(0.00%)\n913×"];
	"HALSITL::SITL_State::_update_gps_ubx(HALSITL::SITL_State::gps_data const*, unsigned char)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n913×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_update_gps_ubx(HALSITL::SITL_State::gps_data const*, unsigned char)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n913×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_update_gps_ubx(HALSITL::SITL_State::gps_data const*, unsigned char)" -> "HALSITL::SITL_State::_gps_send_ubx(unsigned char, unsigned char*, unsigned short, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n5496×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_update_gps_ubx(HALSITL::SITL_State::gps_data const*, unsigned char)" -> "__gettimeofday_syscall" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_update_gps_ubx(HALSITL::SITL_State::gps_data const*, unsigned char)" -> atan2f [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1826×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_update_rangefinder(float)" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::_update_rangefinder(float)\n0.46%\n(0.20%)\n219333×"];
	"HALSITL::SITL_State::_update_rangefinder(float)" -> cosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.10%\n438664×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_update_rangefinder(float)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n219333×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_update_rangefinder(float)" -> "rand_float()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n219333×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::_update_rangefinder(float)" -> "std::enable_if<std::is_floating_point<std::common_type<float, float>::type>::value, bool>::type is_equal<float, float>(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n438666×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::gps_pipe(unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::gps_pipe(unsigned char)\n0.00%\n(0.00%)\n3×"];
	"HALSITL::SITL_State::gps_pipe(unsigned char)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::gps_pipe(unsigned char)" -> "HALSITL::UARTDriver::_set_nonblocking(int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::gps_pipe(unsigned char)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::gps_pipe(unsigned char)" -> fcntl [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::gps_pipe(unsigned char)" -> pipe [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::init(int, char* const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::init(int, char* const*)\n0.00%\n(0.00%)\n1×"];
	"HALSITL::SITL_State::init(int, char* const*)" -> "HALSITL::SITL_State::_parse_command_line(int, char* const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::set_height_agl()" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::set_height_agl()\n1.07%\n(0.11%)\n219332×"];
	"HALSITL::SITL_State::set_height_agl()" -> "AP_Terrain::height_amsl(Location const&, float&, bool)" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="0.94%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::set_height_agl()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::set_height_agl()" -> "std::enable_if<std::is_floating_point<std::common_type<float, float>::type>::value, bool>::type is_equal<float, float>(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::wait_clock(unsigned long)" [color="#14b809", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::SITL_State::wait_clock(unsigned long)\n51.58%\n(0.05%)\n145659×"];
	"HALSITL::SITL_State::wait_clock(unsigned long)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n364991×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::SITL_State::wait_clock(unsigned long)" -> "HALSITL::SITL_State::_fdm_input_step()" [arrowsize="0.72", color="#14b809", fontcolor="#14b809", fontsize="10.00", label="51.46%\n219333×", labeldistance="2.06", penwidth="2.06"];
	"HALSITL::SITL_State::wait_clock(unsigned long)" -> "HALSITL::Scheduler::in_main_thread() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n219333×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::Scheduler(HALSITL::SITL_State*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Scheduler::Scheduler(HALSITL::SITL_State*)\n0.00%\n(0.00%)\n1×"];
	"HALSITL::Scheduler::_run_io_procs()" [color="#0d1f78", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Scheduler::_run_io_procs()\n4.33%\n(0.01%)\n291401×"];
	"HALSITL::Scheduler::_run_io_procs()" -> "HALSITL::Scheduler::_run_io_procs() [clone .part.1]" [arrowsize="0.35", color="#0d1f78", fontcolor="#0d1f78", fontsize="10.00", label="4.32%\n291401×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::_run_io_procs() [clone .part.1]" [color="#0d2079", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Scheduler::_run_io_procs() [clone .part.1]\n4.56%\n(0.25%)\n308272×"];
	"HALSITL::Scheduler::_run_io_procs() [clone .part.1]" -> "AP::RC()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n308272×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::_run_io_procs() [clone .part.1]" -> "AP_RCProtocol::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n308272×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::_run_io_procs() [clone .part.1]" -> "HALSITL::Storage::_timer_tick()" [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.23%\n308272×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::_run_io_procs() [clone .part.1]" -> "HALSITL::UARTDriver::_timer_tick()" [arrowsize="0.35", color="#0d1475", fontcolor="#0d1475", fontsize="10.00", label="1.81%\n2466176×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::_run_io_procs() [clone .part.1]" -> "void Functor<void>::method_wrapper<AP_Logger_File, &AP_Logger_File::_io_timer>(void*)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.20%\n308232×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::_run_io_procs() [clone .part.1]" -> "void Functor<void>::method_wrapper<AP_Param, &AP_Param::save_io_handler>(void*)" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.61%\n308272×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::_run_io_procs() [clone .part.1]" -> "void Functor<void>::method_wrapper<AP_SmartRTL, &AP_SmartRTL::run_background_cleanup>(void*)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.38%\n306007×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::_run_io_procs() [clone .part.1]" -> "void Functor<void>::method_wrapper<AP_Terrain, &AP_Terrain::io_timer>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n304902×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::_run_timer_procs()" [color="#0c8390", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Scheduler::_run_timer_procs()\n22.54%\n(0.13%)\n219332×"];
	"HALSITL::Scheduler::_run_timer_procs()" -> "failsafe_check_static()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n219270×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::_run_timer_procs()" -> "void Functor<void>::method_wrapper<AP_Baro_SITL, &AP_Baro_SITL::_timer>(void*)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.28%\n219310×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::_run_timer_procs()" -> "void Functor<void>::method_wrapper<AP_Compass_SITL, &AP_Compass_SITL::_timer>(void*)" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.60%\n219270×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::_run_timer_procs()" -> "void Functor<void>::method_wrapper<AP_InertialSensor_SITL, &AP_InertialSensor_SITL::timer_update>(void*)" [arrowsize="0.46", color="#0c7c8f", fontcolor="#0c7c8f", fontsize="10.00", label="21.45%\n434456×", labeldistance="0.86", penwidth="0.86"];
	"HALSITL::Scheduler::delay(unsigned short)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Scheduler::delay(unsigned short)\n0.70%\n(0.00%)\n195×"];
	"HALSITL::Scheduler::delay(unsigned short)" -> "AP_HAL::Scheduler::call_delay_cb()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.09%\n1144×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::delay(unsigned short)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4554×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::delay(unsigned short)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1713×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::delay(unsigned short)" -> "HALSITL::SITL_State::wait_clock(unsigned long)" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.61%\n1518×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::delay(unsigned short)" -> "pthread_self" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1144×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::delay_microseconds(unsigned short)" [color="#11b709", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Scheduler::delay_microseconds(unsigned short)\n51.10%\n(0.05%)\n216212×"];
	"HALSITL::Scheduler::delay_microseconds(unsigned short)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n576564×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::delay_microseconds(unsigned short)" -> "HALSITL::SITL_State::wait_clock(unsigned long)" [arrowsize="0.71", color="#10b709", fontcolor="#10b709", fontsize="10.00", label="50.97%\n144141×", labeldistance="2.04", penwidth="2.04"];
	"HALSITL::Scheduler::in_main_thread() const" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Scheduler::in_main_thread() const\n0.21%\n(0.19%)\n2117999×"];
	"HALSITL::Scheduler::in_main_thread() const" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::in_main_thread() const" -> "pthread_self" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n1110614×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Scheduler::init()\n0.00%\n(0.00%)\n1×"];
	"HALSITL::Scheduler::init()" -> "pthread_self" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::register_io_process(Functor<void>)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Scheduler::register_io_process(Functor<void>)\n0.00%\n(0.00%)\n4×"];
	"HALSITL::Scheduler::register_timer_failsafe(void (*)(), unsigned int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Scheduler::register_timer_failsafe(void (*)(), unsigned int)\n0.00%\n(0.00%)\n1×"];
	"HALSITL::Scheduler::register_timer_process(Functor<void>)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Scheduler::register_timer_process(Functor<void>)\n0.00%\n(0.00%)\n4×"];
	"HALSITL::Scheduler::sitl_end_atomic()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Scheduler::sitl_end_atomic()\n0.01%\n(0.01%)\n219332×"];
	"HALSITL::Scheduler::stop_clock(unsigned long)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Scheduler::stop_clock(unsigned long)\n0.26%\n(0.01%)\n219333×"];
	"HALSITL::Scheduler::stop_clock(unsigned long)" -> "HALSITL::Scheduler::_run_io_procs() [clone .part.1]" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.24%\n16871×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Scheduler::system_initialized()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Scheduler::system_initialized()\n0.00%\n(0.00%)\n1×"];
	"HALSITL::Scheduler::system_initialized()" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Semaphore::Semaphore()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Semaphore::Semaphore()\n0.00%\n(0.00%)\n35×"];
	"HALSITL::Semaphore::Semaphore()" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Semaphore::Semaphore()" -> "pthread_mutex_init" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n34×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Semaphore::Semaphore()" -> "pthread_mutexattr_init" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n34×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Semaphore::Semaphore()" -> "pthread_mutexattr_settype" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n34×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Semaphore::give()" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Semaphore::give()\n0.79%\n(0.19%)\n2285190×"];
	"HALSITL::Semaphore::give()" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Semaphore::give()" -> "pthread_mutex_unlock" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.60%\n2285189×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Semaphore::take(unsigned int)" [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Semaphore::take(unsigned int)\n1.18%\n(0.49%)\n2053504×"];
	"HALSITL::Semaphore::take(unsigned int)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Semaphore::take(unsigned int)" -> "pthread_mutex_lock" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.67%\n1987043×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Semaphore::take(unsigned int)" -> "pthread_mutex_trylock" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n66459×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Semaphore::take_nonblocking()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Semaphore::take_nonblocking()\n0.11%\n(0.02%)\n231687×"];
	"HALSITL::Semaphore::take_nonblocking()" -> "pthread_mutex_trylock" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.09%\n231687×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Storage::_storage_open() [clone .part.1] [clone .constprop.10]" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Storage::_storage_open() [clone .part.1] [clone .constprop.10]\n0.00%\n(0.00%)\n1×"];
	"HALSITL::Storage::_storage_open() [clone .part.1] [clone .constprop.10]" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Storage::_storage_open() [clone .part.1] [clone .constprop.10]" -> fcntl [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Storage::_timer_tick()" [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Storage::_timer_tick()\n1.23%\n(1.18%)\n308272×"];
	"HALSITL::Storage::_timer_tick()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n308251×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Storage::_timer_tick()" -> lseek [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n21×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Storage::_timer_tick()" -> write [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n21×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Storage::healthy()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Storage::healthy()\n0.00%\n(0.00%)\n7×"];
	"HALSITL::Storage::healthy()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Storage::read_block(void*, unsigned short, unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Storage::read_block(void*, unsigned short, unsigned long)\n0.01%\n(0.01%)\n21162×"];
	"HALSITL::Storage::read_block(void*, unsigned short, unsigned long)" -> "HALSITL::Storage::_storage_open() [clone .part.1] [clone .constprop.10]" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Storage::read_block(void*, unsigned short, unsigned long)" -> "__memcpy_avx_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n21162×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Storage::write_block(unsigned short, void const*, unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Storage::write_block(unsigned short, void const*, unsigned long)\n0.00%\n(0.00%)\n26×"];
	"HALSITL::Storage::write_block(unsigned short, void const*, unsigned long)" -> "__memcmp_sse4_1" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n25×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Storage::write_block(unsigned short, void const*, unsigned long)" -> "__memcpy_avx_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n11×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Storage::write_block(unsigned short, void const*, unsigned long)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::UARTDriver(unsigned char, HALSITL::SITL_State*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::UARTDriver::UARTDriver(unsigned char, HALSITL::SITL_State*)\n0.00%\n(0.00%)\n8×"];
	"HALSITL::UARTDriver::UARTDriver(unsigned char, HALSITL::SITL_State*)" -> "ByteBuffer::ByteBuffer(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n16×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_set_nonblocking(int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::UARTDriver::_set_nonblocking(int)\n0.00%\n(0.00%)\n4×"];
	"HALSITL::UARTDriver::_set_nonblocking(int)" -> fcntl [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_tcp_start_connection(unsigned short, bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::UARTDriver::_tcp_start_connection(unsigned short, bool)\n0.00%\n(0.00%)\n10×"];
	"HALSITL::UARTDriver::_tcp_start_connection(unsigned short, bool)" -> "__fprintf_chk" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_tcp_start_connection(unsigned short, bool)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_tcp_start_connection(unsigned short, bool)" -> bind [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_tcp_start_connection(unsigned short, bool)" -> fcntl [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_tcp_start_connection(unsigned short, bool)" -> fflush [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_tcp_start_connection(unsigned short, bool)" -> fwrite [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_tcp_start_connection(unsigned short, bool)" -> listen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_tcp_start_connection(unsigned short, bool)" -> setsockopt [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_tcp_start_connection(unsigned short, bool)" -> socket [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_timer_tick()" [color="#0d1475", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::UARTDriver::_timer_tick()\n1.81%\n(1.43%)\n2466176×"];
	"HALSITL::UARTDriver::_timer_tick()" -> "AP::sitl()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n924786×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_timer_tick()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1132×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_timer_tick()" -> "ByteBuffer::advance(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n999×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_timer_tick()" -> "ByteBuffer::readptr(unsigned int&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.11%\n924786×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_timer_tick()" -> "ByteBuffer::space() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.10%\n924786×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_timer_tick()" -> "ByteBuffer::write(unsigned char const*, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1132×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_timer_tick()" -> "__errno_location" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n304969×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_timer_tick()" -> "__fdelt_chk" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n924786×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_timer_tick()" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_timer_tick()" -> read [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n913×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_timer_tick()" -> recv [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n218×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_timer_tick()" -> select [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n924786×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_timer_tick()" -> send [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n999×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::_timer_tick()" -> write [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n304970×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::available()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::UARTDriver::available()\n0.13%\n(0.11%)\n225583×"];
	"HALSITL::UARTDriver::available()" -> "ByteBuffer::available() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n81223×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::available()" -> "__fdelt_chk" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n144360×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::available()" -> select [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n144360×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::begin(unsigned int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::UARTDriver::begin(unsigned int)\n0.00%\n(0.00%)\n8×"];
	"HALSITL::UARTDriver::begin(unsigned int)" -> "ByteBuffer::clear()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::begin(unsigned int)" -> "HALSITL::SITL_State::gps_pipe(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::begin(unsigned int)" -> "HALSITL::UARTDriver::_tcp_start_connection(unsigned short, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::begin(unsigned int)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::begin(unsigned int)" -> fcntl [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n16×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::begin(unsigned int)" -> free [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::begin(unsigned int)" -> strdup [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::begin(unsigned int)" -> "strtok_r" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n20×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::begin(unsigned int)" -> strtol [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::begin(unsigned int, unsigned short, unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::UARTDriver::begin(unsigned int, unsigned short, unsigned short)\n0.00%\n(0.00%)\n5×"];
	"HALSITL::UARTDriver::begin(unsigned int, unsigned short, unsigned short)" -> "ByteBuffer::clear()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::begin(unsigned int, unsigned short, unsigned short)" -> "HALSITL::SITL_State::gps_pipe(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::begin(unsigned int, unsigned short, unsigned short)" -> "HALSITL::UARTDriver::_tcp_start_connection(unsigned short, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::begin(unsigned int, unsigned short, unsigned short)" -> fcntl [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::begin(unsigned int, unsigned short, unsigned short)" -> free [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::begin(unsigned int, unsigned short, unsigned short)" -> strdup [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::begin(unsigned int, unsigned short, unsigned short)" -> "strtok_r" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::begin(unsigned int, unsigned short, unsigned short)" -> strtol [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::get_flow_control()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::UARTDriver::get_flow_control()\n0.00%\n(0.00%)\n18×"];
	"HALSITL::UARTDriver::read()" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::UARTDriver::read()\n0.34%\n(0.08%)\n268182×"];
	"HALSITL::UARTDriver::read()" -> "ByteBuffer::available() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n268182×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::read()" -> "ByteBuffer::read(unsigned char*, unsigned int)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.24%\n268182×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::receive_time_constraint_us(unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::UARTDriver::receive_time_constraint_us(unsigned short)\n0.00%\n(0.00%)\n901×"];
	"HALSITL::UARTDriver::receive_time_constraint_us(unsigned short)" -> "ByteBuffer::available() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n901×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::set_blocking_writes(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::UARTDriver::set_blocking_writes(bool)\n0.00%\n(0.00%)\n8×"];
	"HALSITL::UARTDriver::txspace()" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::UARTDriver::txspace()\n0.24%\n(0.20%)\n329992×"];
	"HALSITL::UARTDriver::txspace()" -> "ByteBuffer::space() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n47550×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::txspace()" -> "__fdelt_chk" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n282442×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::txspace()" -> select [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n282442×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::write(unsigned char const*, unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::UARTDriver::write(unsigned char const*, unsigned long)\n0.10%\n(0.03%)\n62701×"];
	"HALSITL::UARTDriver::write(unsigned char const*, unsigned long)" -> "ByteBuffer::space() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n62701×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::write(unsigned char const*, unsigned long)" -> "ByteBuffer::write(unsigned char const*, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n62462×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::write(unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::UARTDriver::write(unsigned char)\n0.00%\n(0.00%)\n256×"];
	"HALSITL::UARTDriver::write(unsigned char)" -> "ByteBuffer::space() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n244×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::write(unsigned char)" -> "ByteBuffer::write(unsigned char const*, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n244×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::write(unsigned char)" -> "HALSITL::UARTDriver::txspace()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n12×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::write(unsigned char)" -> "__fdelt_chk" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n12×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::UARTDriver::write(unsigned char)" -> select [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n12×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Util::available_memory()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Util::available_memory()\n0.00%\n(0.00%)\n741×"];
	"HALSITL::Util::get_custom_defaults_file() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Util::get_custom_defaults_file() const\n0.00%\n(0.00%)\n2×"];
	"HALSITL::Util::get_hw_rtc() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Util::get_hw_rtc() const\n0.00%\n(0.00%)\n1×"];
	"HALSITL::Util::get_hw_rtc() const" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Util::get_system_id(char*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Util::get_system_id(char*)\n0.00%\n(0.00%)\n2×"];
	"HALSITL::Util::get_system_id(char*)" -> "__GI_strchr" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Util::get_system_id(char*)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Util::get_system_id(char*)" -> close [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Util::get_system_id(char*)" -> open [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Util::get_system_id(char*)" -> read [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Util::safety_switch_state()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Util::safety_switch_state()\n0.00%\n(0.00%)\n729×"];
	"HALSITL::Util::safety_switch_state()" -> "AP::sitl()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n729×", labeldistance="0.50", penwidth="0.50"];
	"HALSITL::Util::was_watchdog_reset() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHALSITL::Util::was_watchdog_reset() const\n0.00%\n(0.00%)\n24×"];
	"HALSITL::Util::was_watchdog_reset() const" -> getenv [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n24×", labeldistance="0.50", penwidth="0.50"];
	"HAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const" [color="#ff0000", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const\n99.98%\n(0.01%)\n1×"];
	"HAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"HAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const" -> "AP_Vehicle::loop()" [arrowsize="0.98", color="#f92501", fontcolor="#f92501", fontsize="10.00", label="96.36%\n72070×", labeldistance="3.85", penwidth="3.85"];
	"HAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const" -> "AP_Vehicle::setup()" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.80%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const" -> "HALSITL::AnalogIn::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const" -> "HALSITL::RCInput::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const" -> "HALSITL::RCOutput::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const" -> "HALSITL::SITL_State::init(int, char* const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const" -> "HALSITL::Scheduler::_run_io_procs()" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.04%\n72069×", labeldistance="0.50", penwidth="0.50"];
	"HAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const" -> "HALSITL::Scheduler::init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const" -> "HALSITL::Scheduler::system_initialized()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const" -> "HALSITL::UARTDriver::begin(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const" -> "HAL_SITL::setup_signal_handlers() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const" -> "fill_stack_nan()" [arrowsize="0.35", color="#0d1475", fontcolor="#0d1475", fontsize="10.00", label="1.76%\n72071×", labeldistance="0.50", penwidth="0.50"];
	"HAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const" -> getenv [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HAL_SITL::setup_signal_handlers() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHAL_SITL::setup_signal_handlers() const\n0.00%\n(0.00%)\n1×"];
	"HAL_SITL::setup_signal_handlers() const" -> sigaction [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HarmonicNotchFilter<Vector3<float> >::allocate_filters(unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHarmonicNotchFilter<Vector3<float> >::allocate_filters(unsigned char)\n0.00%\n(0.00%)\n2×"];
	"HarmonicNotchFilter<Vector3<float> >::allocate_filters(unsigned char)" -> "operator new[](unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"HarmonicNotchFilter<Vector3<float> >::init(float, float, float, float)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHarmonicNotchFilter<Vector3<float> >::init(float, float, float, float)\n0.25%\n(0.02%)\n22288×"];
	"HarmonicNotchFilter<Vector3<float> >::init(float, float, float, float)" -> "NotchFilter<Vector3<float> >::calculate_A_and_Q(float, float, float, float&, float&)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.19%\n21978×", labeldistance="0.50", penwidth="0.50"];
	"HarmonicNotchFilter<Vector3<float> >::init(float, float, float, float)" -> "NotchFilter<Vector3<float> >::init_with_A_and_Q(float, float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n43956×", labeldistance="0.50", penwidth="0.50"];
	"HarmonicNotchFilter<Vector3<float> >::init(float, float, float, float)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n21978×", labeldistance="0.50", penwidth="0.50"];
	"HarmonicNotchFilterParams::HarmonicNotchFilterParams()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nHarmonicNotchFilterParams::HarmonicNotchFilterParams()\n0.00%\n(0.00%)\n1×"];
	"HarmonicNotchFilterParams::HarmonicNotchFilterParams()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"HarmonicNotchFilterParams::HarmonicNotchFilterParams()" -> "NotchFilterParams::NotchFilterParams()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"JitterCorrection::JitterCorrection(unsigned short, unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nJitterCorrection::JitterCorrection(unsigned short, unsigned short)\n0.00%\n(0.00%)\n5×"];
	"JitterCorrection::correct_offboard_timestamp_usec(unsigned long, unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nJitterCorrection::correct_offboard_timestamp_usec(unsigned long, unsigned long)\n0.00%\n(0.00%)\n901×"];
	"Location::Location()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLocation::Location()\n0.04%\n(0.04%)\n1557231×"];
	"Location::Location(Vector3<float> const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLocation::Location(Vector3<float> const&)\n0.12%\n(0.06%)\n92271×"];
	"Location::Location(Vector3<float> const&)" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n92271×", labeldistance="0.50", penwidth="0.50"];
	"Location::Location(Vector3<float> const&)" -> "AP_AHRS_NavEKF::get_origin(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n92271×", labeldistance="0.50", penwidth="0.50"];
	"Location::Location(Vector3<float> const&)" -> cosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n92271×", labeldistance="0.50", penwidth="0.50"];
	"Location::Location(int, int, int, Location::AltFrame)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLocation::Location(int, int, int, Location::AltFrame)\n0.00%\n(0.00%)\n2×"];
	"Location::change_alt_frame(Location::AltFrame)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLocation::change_alt_frame(Location::AltFrame)\n0.07%\n(0.04%)\n67630×"];
	"Location::change_alt_frame(Location::AltFrame)" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n202886×", labeldistance="0.50", penwidth="0.50"];
	"Location::change_alt_frame(Location::AltFrame)" -> "AP_AHRS_NavEKF::get_origin(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n67628×", labeldistance="0.50", penwidth="0.50"];
	"Location::check_latlng() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLocation::check_latlng() const\n0.00%\n(0.00%)\n1×"];
	"Location::check_latlng() const" -> "check_lat(int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Location::check_latlng() const" -> "check_lng(int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Location::get_alt_cm(Location::AltFrame, int&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLocation::get_alt_cm(Location::AltFrame, int&) const\n0.02%\n(0.00%)\n3238×"];
	"Location::get_alt_cm(Location::AltFrame, int&) const" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6478×", labeldistance="0.50", penwidth="0.50"];
	"Location::get_alt_cm(Location::AltFrame, int&) const" -> "AP_AHRS_NavEKF::get_origin(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Location::get_alt_cm(Location::AltFrame, int&) const" -> "AP_Terrain::height_amsl(Location const&, float&, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"Location::get_alt_frame() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLocation::get_alt_frame() const\n0.00%\n(0.00%)\n3×"];
	"Location::get_distance(Location const&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLocation::get_distance(Location const&) const\n0.00%\n(0.00%)\n1796×"];
	"Location::get_distance(Location const&) const" -> cosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1796×", labeldistance="0.50", penwidth="0.50"];
	"Location::get_distance_NE(Location const&) const" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLocation::get_distance_NE(Location const&) const\n0.59%\n(0.36%)\n976404×"];
	"Location::get_distance_NE(Location const&) const" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Location::get_distance_NE(Location const&) const" -> cosf [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.24%\n976403×", labeldistance="0.50", penwidth="0.50"];
	"Location::get_distance_NED(Location const&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLocation::get_distance_NED(Location const&) const\n0.00%\n(0.00%)\n551×"];
	"Location::get_distance_NED(Location const&) const" -> cosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n551×", labeldistance="0.50", penwidth="0.50"];
	"Location::get_vector_xy_from_origin_NE(Vector2<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLocation::get_vector_xy_from_origin_NE(Vector2<float>&) const\n0.00%\n(0.00%)\n2×"];
	"Location::get_vector_xy_from_origin_NE(Vector2<float>&) const" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Location::get_vector_xy_from_origin_NE(Vector2<float>&) const" -> "AP_AHRS_NavEKF::get_origin(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Location::get_vector_xy_from_origin_NE(Vector2<float>&) const" -> cosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Location::offset(float, float)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLocation::offset(float, float)\n0.84%\n(0.47%)\n1525039×"];
	"Location::offset(float, float)" -> cosf [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.37%\n1525039×", labeldistance="0.50", penwidth="0.50"];
	"Location::offset_bearing(float, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLocation::offset_bearing(float, float)\n0.00%\n(0.00%)\n8×"];
	"Location::offset_bearing(float, float)" -> cosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"Location::offset_bearing(float, float)" -> sincosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"Location::set_alt_cm(int, Location::AltFrame)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLocation::set_alt_cm(int, Location::AltFrame)\n0.01%\n(0.01%)\n74454×"];
	"Location::zero()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLocation::zero()\n0.00%\n(0.00%)\n1×"];
	"Log_EKF_Timing(char const*, unsigned char, unsigned long, ekf_timing const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLog_EKF_Timing(char const*, unsigned char, unsigned long, ekf_timing const&)\n0.00%\n(0.00%)\n70×"];
	"Log_EKF_Timing(char const*, unsigned char, unsigned long, ekf_timing const&)" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n70×", labeldistance="0.50", penwidth="0.50"];
	"Log_EKF_Timing(char const*, unsigned char, unsigned long, ekf_timing const&)" -> "AP_Logger::Write(char const*, char const*, char const*, char const*, char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n70×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_DFLogStart::process()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLoggerMessageWriter_DFLogStart::process()\n0.15%\n(0.00%)\n2488×"];
	"LoggerMessageWriter_DFLogStart::process()" -> "AP::scheduler()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4014×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_DFLogStart::process()" -> "AP_Logger_Backend::Write_Format(LogStructure const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n2614×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_DFLogStart::process()" -> "AP_Logger_Backend::Write_Format_Units(LogStructure const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n133×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_DFLogStart::process()" -> "AP_Logger_Backend::Write_Multiplier(MultiplierStructure const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_DFLogStart::process()" -> "AP_Logger_Backend::Write_Parameter(AP_Param const*, AP_Param::ParamToken const&, ap_var_type)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n1217×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_DFLogStart::process()" -> "AP_Logger_Backend::Write_Unit(UnitStructure const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n31×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_DFLogStart::process()" -> "AP_Logger_Backend::multiplier(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_DFLogStart::process()" -> "AP_Logger_Backend::num_multipliers() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_DFLogStart::process()" -> "AP_Logger_Backend::num_types() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2754×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_DFLogStart::process()" -> "AP_Logger_Backend::num_units() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n32×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_DFLogStart::process()" -> "AP_Logger_Backend::structure(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2747×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_DFLogStart::process()" -> "AP_Logger_Backend::unit(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n31×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_DFLogStart::process()" -> "AP_Logger_Backend::vehicle_message_writer()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_DFLogStart::process()" -> "AP_Logger_File::bufferspace_available()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_DFLogStart::process()" -> "AP_Param::next_scalar(AP_Param::ParamToken*, ap_var_type*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n1216×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_DFLogStart::process()" -> "AP_Scheduler::time_available_usec()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4014×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_DFLogStart::process()" -> "LoggerMessageWriter_WriteAllRallyPoints::process()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_DFLogStart::process()" -> "LoggerMessageWriter_WriteEntireMission::process()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_DFLogStart::process()" -> "LoggerMessageWriter_WriteSysInfo::process()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_DFLogStart::process()" -> "void Functor<void>::method_wrapper<Copter, &Copter::Log_Write_Vehicle_Startup_Messages>(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_DFLogStart::reset()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLoggerMessageWriter_DFLogStart::reset()\n0.00%\n(0.00%)\n1×"];
	"LoggerMessageWriter_DFLogStart::reset()" -> "AP_Param::first(AP_Param::ParamToken*, ap_var_type*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_WriteAllRallyPoints::process()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLoggerMessageWriter_WriteAllRallyPoints::process()\n0.00%\n(0.00%)\n1×"];
	"LoggerMessageWriter_WriteAllRallyPoints::process()" -> "AP::rally()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_WriteAllRallyPoints::process()" -> "AP_Logger_Backend::Write_Message(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_WriteEntireMission::process()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLoggerMessageWriter_WriteEntireMission::process()\n0.00%\n(0.00%)\n1×"];
	"LoggerMessageWriter_WriteEntireMission::process()" -> "AP::mission()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_WriteEntireMission::process()" -> "AP::scheduler()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_WriteEntireMission::process()" -> "AP_Logger_Backend::Write_Message(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_WriteEntireMission::process()" -> "AP_Logger_Backend::Write_Mission_Cmd(AP_Mission const&, AP_Mission::Mission_Command const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_WriteEntireMission::process()" -> "AP_Mission::read_cmd_from_storage(unsigned short, AP_Mission::Mission_Command&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_WriteEntireMission::process()" -> "AP_Scheduler::time_available_usec()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_WriteEntireMission::process()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_WriteSysInfo::process()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLoggerMessageWriter_WriteSysInfo::process()\n0.00%\n(0.00%)\n1×"];
	"LoggerMessageWriter_WriteSysInfo::process()" -> "AP::fwversion()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_WriteSysInfo::process()" -> "AP_Logger_Backend::Write_Message(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_WriteSysInfo::process()" -> "AP_Logger_Backend::Write_MessageF(char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_WriteSysInfo::process()" -> "HALSITL::RCInput::protocol() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"LoggerMessageWriter_WriteSysInfo::process()" -> "HALSITL::Util::get_system_id(char*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"LowPassFilter2p<Vector3<float> >::LowPassFilter2p()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLowPassFilter2p<Vector3<float> >::LowPassFilter2p()\n0.00%\n(0.00%)\n6×"];
	"LowPassFilter2p<Vector3<float> >::apply(Vector3<float> const&)" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLowPassFilter2p<Vector3<float> >::apply(Vector3<float> const&)\n1.09%\n(0.57%)\n644268×"];
	"LowPassFilter2p<Vector3<float> >::apply(Vector3<float> const&)" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.27%\n3221250×", labeldistance="0.50", penwidth="0.50"];
	"LowPassFilter2p<Vector3<float> >::apply(Vector3<float> const&)" -> "Vector3<float>::operator+(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n1288500×", labeldistance="0.50", penwidth="0.50"];
	"LowPassFilter2p<Vector3<float> >::apply(Vector3<float> const&)" -> "Vector3<float>::operator-(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n1288500×", labeldistance="0.50", penwidth="0.50"];
	"LowPassFilter2p<Vector3<float> >::set_cutoff_frequency(float, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLowPassFilter2p<Vector3<float> >::set_cutoff_frequency(float, float)\n0.02%\n(0.01%)\n22288×"];
	"LowPassFilter2p<Vector3<float> >::set_cutoff_frequency(float, float)" -> tanf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n22288×", labeldistance="0.50", penwidth="0.50"];
	"LowPassFilter<Vector2<float> >::LowPassFilter()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLowPassFilter<Vector2<float> >::LowPassFilter()\n0.00%\n(0.00%)\n1×"];
	"LowPassFilter<Vector2<float> >::LowPassFilter(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLowPassFilter<Vector2<float> >::LowPassFilter(float)\n0.00%\n(0.00%)\n1×"];
	"LowPassFilter<Vector2<float> >::apply(Vector2<float>, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLowPassFilter<Vector2<float> >::apply(Vector2<float>, float)\n0.04%\n(0.03%)\n49371×"];
	"LowPassFilter<Vector2<float> >::apply(Vector2<float>, float)" -> "Vector2<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n49370×", labeldistance="0.50", penwidth="0.50"];
	"LowPassFilter<Vector2<float> >::apply(Vector2<float>, float)" -> "Vector2<float>::operator+=(Vector2<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n49370×", labeldistance="0.50", penwidth="0.50"];
	"LowPassFilter<Vector2<float> >::apply(Vector2<float>, float)" -> "Vector2<float>::operator-(Vector2<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n49370×", labeldistance="0.50", penwidth="0.50"];
	"LowPassFilter<Vector2<float> >::apply(Vector2<float>, float)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n49370×", labeldistance="0.50", penwidth="0.50"];
	"LowPassFilter<Vector2<float> >::get() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLowPassFilter<Vector2<float> >::get() const\n0.00%\n(0.00%)\n98742×"];
	"LowPassFilter<Vector2<float> >::reset(Vector2<float>)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLowPassFilter<Vector2<float> >::reset(Vector2<float>)\n0.00%\n(0.00%)\n1×"];
	"LowPassFilter<Vector2<float> >::set_cutoff_frequency(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLowPassFilter<Vector2<float> >::set_cutoff_frequency(float)\n0.00%\n(0.00%)\n49371×"];
	"LowPassFilter<Vector3<float> >::LowPassFilter()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLowPassFilter<Vector3<float> >::LowPassFilter()\n0.00%\n(0.00%)\n4×"];
	"LowPassFilter<Vector3<float> >::LowPassFilter(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLowPassFilter<Vector3<float> >::LowPassFilter(float)\n0.00%\n(0.00%)\n1×"];
	"LowPassFilter<Vector3<float> >::apply(Vector3<float>, float)" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLowPassFilter<Vector3<float> >::apply(Vector3<float>, float)\n0.64%\n(0.38%)\n723494×"];
	"LowPassFilter<Vector3<float> >::apply(Vector3<float>, float)" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n723494×", labeldistance="0.50", penwidth="0.50"];
	"LowPassFilter<Vector3<float> >::apply(Vector3<float>, float)" -> "Vector3<float>::operator+=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n723494×", labeldistance="0.50", penwidth="0.50"];
	"LowPassFilter<Vector3<float> >::apply(Vector3<float>, float)" -> "Vector3<float>::operator-(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n723494×", labeldistance="0.50", penwidth="0.50"];
	"LowPassFilter<Vector3<float> >::apply(Vector3<float>, float)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n723494×", labeldistance="0.50", penwidth="0.50"];
	"LowPassFilter<Vector3<float> >::get() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLowPassFilter<Vector3<float> >::get() const\n0.00%\n(0.00%)\n144305×"];
	"LowPassFilter<Vector3<float> >::set_cutoff_frequency(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLowPassFilter<Vector3<float> >::set_cutoff_frequency(float)\n0.00%\n(0.00%)\n4×"];
	"LowPassFilter<float>::LowPassFilter()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLowPassFilter<float>::LowPassFilter()\n0.00%\n(0.00%)\n16×"];
	"LowPassFilter<float>::LowPassFilter(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLowPassFilter<float>::LowPassFilter(float)\n0.00%\n(0.00%)\n1×"];
	"LowPassFilter<float>::apply(float, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLowPassFilter<float>::apply(float, float)\n0.04%\n(0.03%)\n127968×"];
	"LowPassFilter<float>::apply(float, float)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n107750×", labeldistance="0.50", penwidth="0.50"];
	"LowPassFilter<float>::get() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLowPassFilter<float>::get() const\n0.02%\n(0.02%)\n850273×"];
	"LowPassFilter<float>::reset(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLowPassFilter<float>::reset(float)\n0.00%\n(0.00%)\n74559×"];
	"LowPassFilter<float>::set_cutoff_frequency(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nLowPassFilter<float>::set_cutoff_frequency(float)\n0.00%\n(0.00%)\n72075×"];
	"MAVLink_routing::MAVLink_routing()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMAVLink_routing::MAVLink_routing()\n0.00%\n(0.00%)\n1×"];
	"MAVLink_routing::check_and_forward(mavlink_channel_t, __mavlink_message const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMAVLink_routing::check_and_forward(mavlink_channel_t, __mavlink_message const&)\n0.00%\n(0.00%)\n220×"];
	"MAVLink_routing::check_and_forward(mavlink_channel_t, __mavlink_message const&)" -> "mavlink_get_msg_entry" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n20×", labeldistance="0.50", penwidth="0.50"];
	"Matrix3<float>::det() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMatrix3<float>::det() const\n0.00%\n(0.00%)\n1×"];
	"Matrix3<float>::from_euler(float, float, float)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMatrix3<float>::from_euler(float, float, float)\n0.41%\n(0.17%)\n236054×"];
	"Matrix3<float>::from_euler(float, float, float)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Matrix3<float>::from_euler(float, float, float)" -> sincosf [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.24%\n708161×", labeldistance="0.50", penwidth="0.50"];
	"Matrix3<float>::from_euler312(float, float, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMatrix3<float>::from_euler312(float, float, float)\n0.00%\n(0.00%)\n30×"];
	"Matrix3<float>::from_euler312(float, float, float)" -> sincosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n90×", labeldistance="0.50", penwidth="0.50"];
	"Matrix3<float>::from_rotation(Rotation)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMatrix3<float>::from_rotation(Rotation)\n0.00%\n(0.00%)\n1×"];
	"Matrix3<float>::from_rotation(Rotation)" -> "Matrix3<float>::transposed() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Matrix3<float>::from_rotation(Rotation)" -> "Vector3<float>::rotate(Rotation)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"Matrix3<float>::inverse(Matrix3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMatrix3<float>::inverse(Matrix3<float>&) const\n0.00%\n(0.00%)\n1×"];
	"Matrix3<float>::inverse(Matrix3<float>&) const" -> "Matrix3<float>::det() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Matrix3<float>::invert()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMatrix3<float>::invert()\n0.00%\n(0.00%)\n1×"];
	"Matrix3<float>::invert()" -> "Matrix3<float>::inverse(Matrix3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Matrix3<float>::mulXY(Vector3<float> const&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMatrix3<float>::mulXY(Vector3<float> const&) const\n0.00%\n(0.00%)\n1804×"];
	"Matrix3<float>::mul_transpose(Vector3<float> const&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMatrix3<float>::mul_transpose(Vector3<float> const&) const\n0.01%\n(0.01%)\n55801×"];
	"Matrix3<float>::normalize()" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMatrix3<float>::normalize()\n0.84%\n(0.30%)\n438663×"];
	"Matrix3<float>::normalize()" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.15%\n1315989×", labeldistance="0.50", penwidth="0.50"];
	"Matrix3<float>::normalize()" -> "Vector3<float>::operator%(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.09%\n438663×", labeldistance="0.50", penwidth="0.50"];
	"Matrix3<float>::normalize()" -> "Vector3<float>::operator*(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n438663×", labeldistance="0.50", penwidth="0.50"];
	"Matrix3<float>::normalize()" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.18%\n2193315×", labeldistance="0.50", penwidth="0.50"];
	"Matrix3<float>::normalize()" -> "Vector3<float>::operator-(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n877326×", labeldistance="0.50", penwidth="0.50"];
	"Matrix3<float>::operator*(Matrix3<float> const&) const" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMatrix3<float>::operator*(Matrix3<float> const&) const\n0.33%\n(0.33%)\n357966×"];
	"Matrix3<float>::operator*(Vector3<float> const&) const" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMatrix3<float>::operator*(Vector3<float> const&) const\n0.70%\n(0.70%)\n2652654×"];
	"Matrix3<float>::rotate(Vector3<float> const&)" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMatrix3<float>::rotate(Vector3<float> const&)\n0.62%\n(0.48%)\n510733×"];
	"Matrix3<float>::rotate(Vector3<float> const&)" -> "Vector3<float>::operator+(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.14%\n1532199×", labeldistance="0.50", penwidth="0.50"];
	"Matrix3<float>::to_euler(float*, float*, float*) const" [color="#0d1776", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMatrix3<float>::to_euler(float*, float*, float*) const\n2.46%\n(0.28%)\n818661×"];
	"Matrix3<float>::to_euler(float*, float*, float*) const" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Matrix3<float>::to_euler(float*, float*, float*) const" -> atan2f [arrowsize="0.35", color="#0d1475", fontcolor="#0d1475", fontsize="10.00", label="1.72%\n1637321×", labeldistance="0.50", penwidth="0.50"];
	"Matrix3<float>::to_euler(float*, float*, float*) const" -> "float safe_asin<float>(float)" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.46%\n818661×", labeldistance="0.50", penwidth="0.50"];
	"Matrix3<float>::to_euler312() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMatrix3<float>::to_euler312() const\n0.00%\n(0.00%)\n30×"];
	"Matrix3<float>::to_euler312() const" -> asinf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n30×", labeldistance="0.50", penwidth="0.50"];
	"Matrix3<float>::to_euler312() const" -> atan2f [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n60×", labeldistance="0.50", penwidth="0.50"];
	"Matrix3<float>::transposed() const" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMatrix3<float>::transposed() const\n0.21%\n(0.21%)\n1096663×"];
	"Matrix3<float>::zero()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMatrix3<float>::zero()\n0.00%\n(0.00%)\n2×"];
	"MissionItemProtocol::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMissionItemProtocol::update()\n0.03%\n(0.03%)\n216540×"];
	"Mode::AutoYaw::default_mode(bool) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMode::AutoYaw::default_mode(bool) const\n0.00%\n(0.00%)\n1×"];
	"Mode::AutoYaw::set_mode(autopilot_yaw_mode)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMode::AutoYaw::set_mode(autopilot_yaw_mode)\n0.00%\n(0.00%)\n3×"];
	"Mode::AutoYaw::set_mode_to_default(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMode::AutoYaw::set_mode_to_default(bool)\n0.00%\n(0.00%)\n1×"];
	"Mode::Mode()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMode::Mode()\n0.00%\n(0.00%)\n23×"];
	"Mode::_TakeOff::stop()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMode::_TakeOff::stop()\n0.00%\n(0.00%)\n1×"];
	"Mode::crosstrack_error() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMode::crosstrack_error() const\n0.00%\n(0.00%)\n227×"];
	"Mode::get_pilot_desired_lean_angles(float&, float&, float, float) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMode::get_pilot_desired_lean_angles(float&, float&, float, float) const\n0.04%\n(0.02%)\n25935×"];
	"Mode::get_pilot_desired_lean_angles(float&, float&, float, float) const" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Mode::get_pilot_desired_lean_angles(float&, float&, float, float) const" -> atanf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n25934×", labeldistance="0.50", penwidth="0.50"];
	"Mode::get_pilot_desired_lean_angles(float&, float&, float, float) const" -> cosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n25935×", labeldistance="0.50", penwidth="0.50"];
	"Mode::get_pilot_desired_lean_angles(float&, float&, float, float) const" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n25935×", labeldistance="0.50", penwidth="0.50"];
	"Mode::get_pilot_desired_lean_angles(float&, float&, float, float) const" -> tanf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n25935×", labeldistance="0.50", penwidth="0.50"];
	"Mode::get_pilot_desired_throttle() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMode::get_pilot_desired_throttle() const\n0.02%\n(0.01%)\n22699×"];
	"Mode::get_pilot_desired_throttle() const" -> "Copter::get_throttle_mid()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n22699×", labeldistance="0.50", penwidth="0.50"];
	"Mode::get_pilot_desired_throttle() const" -> "Mode::throttle_hover() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n22699×", labeldistance="0.50", penwidth="0.50"];
	"Mode::get_pilot_desired_throttle() const" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n22699×", labeldistance="0.50", penwidth="0.50"];
	"Mode::get_pilot_desired_throttle() const" -> "short constrain_value<short>(short, short, short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n22699×", labeldistance="0.50", penwidth="0.50"];
	"Mode::get_pilot_desired_yaw_rate(short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMode::get_pilot_desired_yaw_rate(short)\n0.03%\n(0.00%)\n68834×"];
	"Mode::get_pilot_desired_yaw_rate(short)" -> "Copter::get_pilot_desired_yaw_rate(short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n68834×", labeldistance="0.50", penwidth="0.50"];
	"Mode::get_wp(Location&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMode::get_wp(Location&)\n0.00%\n(0.00%)\n227×"];
	"Mode::is_disarmed_or_landed() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMode::is_disarmed_or_landed() const\n0.00%\n(0.00%)\n49371×"];
	"Mode::land_run_horizontal_control()" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMode::land_run_horizontal_control()\n0.19%\n(0.00%)\n3236×"];
	"Mode::land_run_horizontal_control()" -> "AC_AttitudeControl::get_althold_lean_angle_max() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"Mode::land_run_horizontal_control()" -> "AC_AttitudeControl::input_euler_angle_roll_pitch_euler_rate_yaw(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.11%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"Mode::land_run_horizontal_control()" -> "AC_Loiter::get_angle_max_cd() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"Mode::land_run_horizontal_control()" -> "AC_Loiter::set_pilot_desired_acceleration(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"Mode::land_run_horizontal_control()" -> "AC_Loiter::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"Mode::land_run_horizontal_control()" -> "AC_PrecLand::target_acquired()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"Mode::land_run_horizontal_control()" -> "Copter::get_pilot_desired_yaw_rate(short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"Mode::land_run_horizontal_control()" -> "Copter::update_simple_mode()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"Mode::land_run_horizontal_control()" -> "Mode::get_pilot_desired_lean_angles(float&, float&, float, float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"Mode::land_run_vertical_control(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMode::land_run_vertical_control(bool)\n0.05%\n(0.00%)\n3236×"];
	"Mode::land_run_vertical_control(bool)" -> "AC_AttitudeControl::sqrt_controller(float, float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"Mode::land_run_vertical_control(bool)" -> "AC_PosControl::is_active_xy() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6472×", labeldistance="0.50", penwidth="0.50"];
	"Mode::land_run_vertical_control(bool)" -> "AC_PosControl::set_alt_target_from_climb_rate_ff(float, float, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"Mode::land_run_vertical_control(bool)" -> "AC_PosControl::update_z_controller()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"Mode::land_run_vertical_control(bool)" -> "AC_PrecLand::target_acquired()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"Mode::land_run_vertical_control(bool)" -> "Copter::get_rangefinder_height_interpolated_cm(int&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"Mode::land_run_vertical_control(bool)" -> "Location::get_alt_cm(Location::AltFrame, int&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"Mode::land_run_vertical_control(bool)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"Mode::run_autopilot()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMode::run_autopilot()\n0.00%\n(0.00%)\n9008×"];
	"Mode::set_land_complete(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMode::set_land_complete(bool)\n0.00%\n(0.00%)\n18261×"];
	"Mode::set_land_complete(bool)" -> "Copter::set_land_complete(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18261×", labeldistance="0.50", penwidth="0.50"];
	"Mode::throttle_hover() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMode::throttle_hover() const\n0.00%\n(0.00%)\n22699×"];
	"Mode::update_navigation()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMode::update_navigation()\n0.00%\n(0.00%)\n9008×"];
	"Mode::update_navigation()" -> "Mode::run_autopilot()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"Mode::update_simple_mode()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMode::update_simple_mode()\n0.00%\n(0.00%)\n22699×"];
	"Mode::update_simple_mode()" -> "Copter::update_simple_mode()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n22699×", labeldistance="0.50", penwidth="0.50"];
	"Mode::wp_bearing() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMode::wp_bearing() const\n0.00%\n(0.00%)\n227×"];
	"Mode::wp_distance() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nMode::wp_distance() const\n0.00%\n(0.00%)\n227×"];
	"ModeFlowHold::ModeFlowHold()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeFlowHold::ModeFlowHold()\n0.00%\n(0.00%)\n1×"];
	"ModeFlowHold::ModeFlowHold()" -> "AC_PI_2D::AC_PI_2D(float, float, float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeFlowHold::ModeFlowHold()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeFlowHold::ModeFlowHold()" -> "LowPassFilter<Vector2<float> >::LowPassFilter()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeFlowHold::ModeFlowHold()" -> "Mode::Mode()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeLoiter::has_manual_throttle() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeLoiter::has_manual_throttle() const\n0.00%\n(0.00%)\n1×"];
	"ModeLoiter::name() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeLoiter::name() const\n0.00%\n(0.00%)\n1×"];
	"ModeLoiter::requires_GPS() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeLoiter::requires_GPS() const\n0.00%\n(0.00%)\n1×"];
	"ModeRTL::build_path()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeRTL::build_path()\n0.00%\n(0.00%)\n1×"];
	"ModeRTL::build_path()" -> "AC_PosControl::get_stopping_point_xy(Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::build_path()" -> "AC_PosControl::get_stopping_point_z(Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::build_path()" -> "Location::Location(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::build_path()" -> "Location::Location(int, int, int, Location::AltFrame)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::build_path()" -> "Location::change_alt_frame(Location::AltFrame)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::build_path()" -> "Location::get_alt_frame() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::build_path()" -> "ModeRTL::compute_return_target()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::climb_return_run()" [color="#0d1876", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeRTL::climb_return_run()\n2.75%\n(0.03%)\n44133×"];
	"ModeRTL::climb_return_run()" -> "AC_AttitudeControl::input_euler_angle_roll_pitch_euler_rate_yaw(float, float, float)" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.41%\n44133×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::climb_return_run()" -> "AC_PosControl::update_z_controller()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.33%\n44133×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::climb_return_run()" -> "AC_WPNav_OA::reached_wp_destination() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n44133×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::climb_return_run()" -> "AC_WPNav_OA::update_wpnav()" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="0.95%\n44133×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::climb_return_run()" -> "AP_Motors::set_desired_spool_state(AP_Motors::DesiredSpoolState)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n44133×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::climb_return_run()" -> "Copter::failsafe_terrain_set_status(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n44133×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::climb_return_run()" -> "Mode::get_pilot_desired_yaw_rate(short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n44133×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::climb_return_run()" -> "Mode::is_disarmed_or_landed() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n44133×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::compute_return_target()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeRTL::compute_return_target()\n0.00%\n(0.00%)\n1×"];
	"ModeRTL::compute_return_target()" -> "AC_Fence::get_enabled_fences() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::compute_return_target()" -> "AP_Rally::calc_best_rally_or_home_location(Location const&, float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::compute_return_target()" -> "Location::change_alt_frame(Location::AltFrame)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::compute_return_target()" -> "Location::get_distance(Location const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::compute_return_target()" -> "Location::set_alt_cm(int, Location::AltFrame)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::crosstrack_error() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeRTL::crosstrack_error() const\n0.00%\n(0.00%)\n494×"];
	"ModeRTL::get_alt_type() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeRTL::get_alt_type() const\n0.00%\n(0.00%)\n7×"];
	"ModeRTL::get_wp(Location&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeRTL::get_wp(Location&)\n0.00%\n(0.00%)\n494×"];
	"ModeRTL::get_wp(Location&)" -> "AC_WPNav_OA::get_oa_wp_destination(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n462×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::has_manual_throttle() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeRTL::has_manual_throttle() const\n0.00%\n(0.00%)\n32094×"];
	"ModeRTL::init(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeRTL::init(bool)\n0.00%\n(0.00%)\n1×"];
	"ModeRTL::init(bool)" -> "AC_WPNav::wp_and_spline_init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::init(bool)" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::is_autopilot() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeRTL::is_autopilot() const\n0.00%\n(0.00%)\n1×"];
	"ModeRTL::loiterathome_run()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeRTL::loiterathome_run()\n0.12%\n(0.00%)\n2002×"];
	"ModeRTL::loiterathome_run()" -> "AC_AttitudeControl::input_euler_angle_roll_pitch_euler_rate_yaw(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n2002×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::loiterathome_run()" -> "AC_PosControl::update_z_controller()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n2002×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::loiterathome_run()" -> "AC_WPNav_OA::update_wpnav()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n2002×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::loiterathome_run()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2002×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::loiterathome_run()" -> "AP_Motors::set_desired_spool_state(AP_Motors::DesiredSpoolState)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2002×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::loiterathome_run()" -> "Copter::failsafe_terrain_set_status(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2002×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::loiterathome_run()" -> "Mode::get_pilot_desired_yaw_rate(short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2002×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::loiterathome_run()" -> "Mode::is_disarmed_or_landed() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2002×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::name() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeRTL::name() const\n0.00%\n(0.00%)\n1×"];
	"ModeRTL::name4() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeRTL::name4() const\n0.00%\n(0.00%)\n1×"];
	"ModeRTL::requires_GPS() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeRTL::requires_GPS() const\n0.00%\n(0.00%)\n1237×"];
	"ModeRTL::run()" [color="#0d1a77", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeRTL::run()\n3.12%\n(0.01%)\n49371×"];
	"ModeRTL::run()" -> "AC_Loiter::init_target(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::run()" -> "AC_PosControl::is_active_z() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::run()" -> "AC_WPNav::set_wp_destination(Location const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::run()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::run()" -> "AP_LandingGear::deploy_for_landing()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::run()" -> "AP_Motors::set_desired_spool_state(AP_Motors::DesiredSpoolState)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::run()" -> "Mode::AutoYaw::default_mode(bool) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::run()" -> "Mode::AutoYaw::set_mode(autopilot_yaw_mode)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::run()" -> "Mode::AutoYaw::set_mode_to_default(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::run()" -> "Mode::is_disarmed_or_landed() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::run()" -> "Mode::land_run_horizontal_control()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.19%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::run()" -> "Mode::land_run_vertical_control(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n3236×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::run()" -> "ModeRTL::build_path()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::run()" -> "ModeRTL::climb_return_run()" [arrowsize="0.35", color="#0d1876", fontcolor="#0d1876", fontsize="10.00", label="2.75%\n44133×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::run()" -> "ModeRTL::loiterathome_run()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n2002×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::wp_bearing() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeRTL::wp_bearing() const\n0.00%\n(0.00%)\n494×"];
	"ModeRTL::wp_bearing() const" -> "AC_WPNav_OA::get_wp_bearing_to_destination() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n494×", labeldistance="0.50", penwidth="0.50"];
	"ModeRTL::wp_distance() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeRTL::wp_distance() const\n0.00%\n(0.00%)\n494×"];
	"ModeRTL::wp_distance() const" -> "AC_WPNav_OA::get_wp_distance_to_destination() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n494×", labeldistance="0.50", penwidth="0.50"];
	"ModeSmartRTL::save_position()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeSmartRTL::save_position()\n0.00%\n(0.00%)\n542×"];
	"ModeSmartRTL::save_position()" -> "AP_SmartRTL::update(bool, bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n542×", labeldistance="0.50", penwidth="0.50"];
	"ModeSmartRTL::save_position()" -> "Copter::position_ok() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n542×", labeldistance="0.50", penwidth="0.50"];
	"ModeStabilize::allows_arming(bool) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeStabilize::allows_arming(bool) const\n0.00%\n(0.00%)\n3×"];
	"ModeStabilize::has_manual_throttle() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeStabilize::has_manual_throttle() const\n0.00%\n(0.00%)\n12313×"];
	"ModeStabilize::is_autopilot() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeStabilize::is_autopilot() const\n0.00%\n(0.00%)\n1×"];
	"ModeStabilize::name4() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeStabilize::name4() const\n0.00%\n(0.00%)\n1×"];
	"ModeStabilize::requires_GPS() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeStabilize::requires_GPS() const\n0.00%\n(0.00%)\n516×"];
	"ModeStabilize::run()" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeStabilize::run()\n0.83%\n(0.02%)\n22699×"];
	"ModeStabilize::run()" -> "AC_AttitudeControl::input_euler_angle_roll_pitch_euler_rate_yaw(float, float, float)" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.70%\n22699×", labeldistance="0.50", penwidth="0.50"];
	"ModeStabilize::run()" -> "AC_AttitudeControl::reset_rate_controller_I_terms()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4299×", labeldistance="0.50", penwidth="0.50"];
	"ModeStabilize::run()" -> "AC_AttitudeControl::shift_ef_yaw_target(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n4299×", labeldistance="0.50", penwidth="0.50"];
	"ModeStabilize::run()" -> "AC_AttitudeControl_Multi::set_throttle_out(float, bool, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n22699×", labeldistance="0.50", penwidth="0.50"];
	"ModeStabilize::run()" -> "AP_Motors::set_desired_spool_state(AP_Motors::DesiredSpoolState)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n22699×", labeldistance="0.50", penwidth="0.50"];
	"ModeStabilize::run()" -> "Mode::get_pilot_desired_lean_angles(float&, float&, float, float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n22699×", labeldistance="0.50", penwidth="0.50"];
	"ModeStabilize::run()" -> "Mode::get_pilot_desired_throttle() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n22699×", labeldistance="0.50", penwidth="0.50"];
	"ModeStabilize::run()" -> "Mode::get_pilot_desired_yaw_rate(short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n22699×", labeldistance="0.50", penwidth="0.50"];
	"ModeStabilize::run()" -> "Mode::set_land_complete(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18261×", labeldistance="0.50", penwidth="0.50"];
	"ModeStabilize::run()" -> "Mode::update_simple_mode()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n22699×", labeldistance="0.50", penwidth="0.50"];
	"ModeSystemId::ModeSystemId()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nModeSystemId::ModeSystemId()\n0.00%\n(0.00%)\n1×"];
	"ModeSystemId::ModeSystemId()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ModeSystemId::ModeSystemId()" -> "Mode::Mode()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NCP5623::NCP5623(unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNCP5623::NCP5623(unsigned char)\n0.00%\n(0.00%)\n5×"];
	"NCP5623::NCP5623(unsigned char)" -> "RGBLed::RGBLed(unsigned char, unsigned char, unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"NCP5623::hw_init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNCP5623::hw_init()\n0.00%\n(0.00%)\n5×"];
	"NCP5623::hw_init()" -> "Empty::I2CDeviceManager::get_device(unsigned char, unsigned char, unsigned int, bool, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10×", labeldistance="0.50", penwidth="0.50"];
	"NCP5623::~NCP5623()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNCP5623::~NCP5623()\n0.00%\n(0.00%)\n5×"];
	"NCP5623::~NCP5623()" -> "operator delete(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::InitialiseFilter()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::InitialiseFilter()\n0.00%\n(0.00%)\n200×"];
	"NavEKF2::InitialiseFilter()" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n200×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::InitialiseFilter()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n200×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::InitialiseFilter()" -> "HALSITL::Util::available_memory()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::InitialiseFilter()" -> "NavEKF2::check_log_write()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n200×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::InitialiseFilter()" -> "NavEKF2_core::InitialiseFilterBootstrap()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n400×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::InitialiseFilter()" -> "NavEKF2_core::NavEKF2_core(NavEKF2*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::InitialiseFilter()" -> "NavEKF2_core::setup_core(unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::InitialiseFilter()" -> "__popcountdi2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::InitialiseFilter()" -> calloc [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write()" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::Log_Write()\n0.19%\n(0.00%)\n1740×"];
	"NavEKF2::Log_Write()" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1775×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write()" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write()" -> "Log_EKF_Timing(char const*, unsigned char, unsigned long, ekf_timing const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n70×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write()" -> "NavEKF2::Log_Write_Beacon(unsigned long) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write()" -> "NavEKF2::Log_Write_NKF1(unsigned char, unsigned long) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write()" -> "NavEKF2::Log_Write_NKF2(unsigned char, unsigned long) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write()" -> "NavEKF2::Log_Write_NKF3(unsigned char, unsigned long) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write()" -> "NavEKF2::Log_Write_NKF4(unsigned char, unsigned long) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write()" -> "NavEKF2::Log_Write_NKF5(unsigned long) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write()" -> "NavEKF2::getQuaternion(signed char, Quaternion&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write()" -> "NavEKF2::getTimingStatistics(signed char, ekf_timing&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n70×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_Beacon(unsigned long) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::Log_Write_Beacon(unsigned long) const\n0.00%\n(0.00%)\n1740×"];
	"NavEKF2::Log_Write_Beacon(unsigned long) const" -> "AP::beacon()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_Beacon(unsigned long) const" -> "NavEKF2::getRangeBeaconDebug(signed char, unsigned char&, float&, float&, float&, float&, Vector3<float>&, float&, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF1(unsigned char, unsigned long) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::Log_Write_NKF1(unsigned char, unsigned long) const\n0.05%\n(0.00%)\n3480×"];
	"NavEKF2::Log_Write_NKF1(unsigned char, unsigned long) const" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF1(unsigned char, unsigned long) const" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF1(unsigned char, unsigned long) const" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF1(unsigned char, unsigned long) const" -> "NavEKF2::getEulerAngles(signed char, Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF1(unsigned char, unsigned long) const" -> "NavEKF2::getGyroBias(signed char, Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF1(unsigned char, unsigned long) const" -> "NavEKF2::getOriginLLH(signed char, Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF1(unsigned char, unsigned long) const" -> "NavEKF2::getPosD(signed char, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF1(unsigned char, unsigned long) const" -> "NavEKF2::getPosDownDerivative(signed char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF1(unsigned char, unsigned long) const" -> "NavEKF2::getPosNE(signed char, Vector2<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF1(unsigned char, unsigned long) const" -> "NavEKF2::getVelNED(signed char, Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF1(unsigned char, unsigned long) const" -> "wrap_360_cd(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF2(unsigned char, unsigned long) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::Log_Write_NKF2(unsigned char, unsigned long) const\n0.03%\n(0.00%)\n3480×"];
	"NavEKF2::Log_Write_NKF2(unsigned char, unsigned long) const" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF2(unsigned char, unsigned long) const" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF2(unsigned char, unsigned long) const" -> "NavEKF2::getAccelZBias(signed char, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF2(unsigned char, unsigned long) const" -> "NavEKF2::getActiveMag(signed char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF2(unsigned char, unsigned long) const" -> "NavEKF2::getGyroScaleErrorPercentage(signed char, Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF2(unsigned char, unsigned long) const" -> "NavEKF2::getMagNED(signed char, Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF2(unsigned char, unsigned long) const" -> "NavEKF2::getMagXYZ(signed char, Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF2(unsigned char, unsigned long) const" -> "NavEKF2::getWind(signed char, Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF3(unsigned char, unsigned long) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::Log_Write_NKF3(unsigned char, unsigned long) const\n0.03%\n(0.00%)\n3480×"];
	"NavEKF2::Log_Write_NKF3(unsigned char, unsigned long) const" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF3(unsigned char, unsigned long) const" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF3(unsigned char, unsigned long) const" -> "NavEKF2::getInnovations(signed char, Vector3<float>&, Vector3<float>&, Vector3<float>&, float&, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF4(unsigned char, unsigned long) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::Log_Write_NKF4(unsigned char, unsigned long) const\n0.04%\n(0.00%)\n3480×"];
	"NavEKF2::Log_Write_NKF4(unsigned char, unsigned long) const" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF4(unsigned char, unsigned long) const" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF4(unsigned char, unsigned long) const" -> "NavEKF2::getFilterFaults(signed char, unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF4(unsigned char, unsigned long) const" -> "NavEKF2::getFilterGpsStatus(signed char, nav_gps_status&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF4(unsigned char, unsigned long) const" -> "NavEKF2::getFilterStatus(signed char, nav_filter_status&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF4(unsigned char, unsigned long) const" -> "NavEKF2::getFilterTimeouts(signed char, unsigned char&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF4(unsigned char, unsigned long) const" -> "NavEKF2::getPrimaryCoreIndex() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF4(unsigned char, unsigned long) const" -> "NavEKF2::getTiltError(signed char, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF4(unsigned char, unsigned long) const" -> "NavEKF2::getVariances(signed char, float&, float&, float&, Vector3<float>&, float&, Vector2<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF4(unsigned char, unsigned long) const" -> fmaxf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6960×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF5(unsigned long) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::Log_Write_NKF5(unsigned long) const\n0.02%\n(0.00%)\n1740×"];
	"NavEKF2::Log_Write_NKF5(unsigned long) const" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF5(unsigned long) const" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF5(unsigned long) const" -> "NavEKF2::getFlowDebug(signed char, float&, float&, float&, float&, float&, float&, float&, float&, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::Log_Write_NKF5(unsigned long) const" -> "NavEKF2::getOutputTrackingError(signed char, Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::NavEKF2()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::NavEKF2()\n0.00%\n(0.00%)\n1×"];
	"NavEKF2::NavEKF2()" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::NavEKF2()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::NavEKF2()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::UpdateFilter()" [color="#0c5285", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::UpdateFilter()\n14.41%\n(0.08%)\n71471×"];
	"NavEKF2::UpdateFilter()" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::UpdateFilter()" -> "AP_HAL::micros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n142942×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::UpdateFilter()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::UpdateFilter()" -> "NavEKF2::check_log_write()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::UpdateFilter()" -> "NavEKF2_core::UpdateFilter(bool)" [arrowsize="0.38", color="#0c5185", fontcolor="#0c5185", fontsize="10.00", label="14.15%\n142942×", labeldistance="0.57", penwidth="0.57"];
	"NavEKF2::UpdateFilter()" -> "NavEKF2_core::errorScore() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::UpdateFilter()" -> "NavEKF2_core::getFramesSincePredict() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n142942×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::UpdateFilter()" -> "NavEKF2_core::healthy() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.13%\n142943×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::all_cores_healthy() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::all_cores_healthy() const\n0.00%\n(0.00%)\n6×"];
	"NavEKF2::all_cores_healthy() const" -> "NavEKF2_core::healthy() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n11×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::checkLaneSwitch()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::checkLaneSwitch()\n0.00%\n(0.00%)\n1×"];
	"NavEKF2::checkLaneSwitch()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::checkLaneSwitch()" -> "GCS::send_text(MAV_SEVERITY, char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::checkLaneSwitch()" -> "NavEKF2::updateLaneSwitchPosDownResetData(unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::checkLaneSwitch()" -> "NavEKF2::updateLaneSwitchPosResetData(unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::checkLaneSwitch()" -> "NavEKF2::updateLaneSwitchYawResetData(unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::checkLaneSwitch()" -> "NavEKF2_core::errorScore() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::checkLaneSwitch()" -> "NavEKF2_core::healthy() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::checkLaneSwitch()" -> "gcs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::check_log_write()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::check_log_write()\n0.00%\n(0.00%)\n71671×"];
	"NavEKF2::getAccelZBias(signed char, float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getAccelZBias(signed char, float&) const\n0.03%\n(0.02%)\n146422×"];
	"NavEKF2::getAccelZBias(signed char, float&) const" -> "NavEKF2_core::getAccelZBias(float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n146422×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getActiveMag(signed char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getActiveMag(signed char) const\n0.00%\n(0.00%)\n3480×"];
	"NavEKF2::getActiveMag(signed char) const" -> "NavEKF2_core::getActiveMag() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getEkfControlLimits(float&, float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getEkfControlLimits(float&, float&) const\n0.01%\n(0.00%)\n52607×"];
	"NavEKF2::getEkfControlLimits(float&, float&) const" -> "NavEKF2_core::getEkfControlLimits(float&, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n52607×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getEulerAngles(signed char, Vector3<float>&) const" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getEulerAngles(signed char, Vector3<float>&) const\n0.27%\n(0.01%)\n75674×"];
	"NavEKF2::getEulerAngles(signed char, Vector3<float>&) const" -> "NavEKF2_core::getEulerAngles(Vector3<float>&) const" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.27%\n75670×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getFilterFaults(signed char, unsigned short&) const" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getFilterFaults(signed char, unsigned short&) const\n0.95%\n(0.13%)\n1304460×"];
	"NavEKF2::getFilterFaults(signed char, unsigned short&) const" -> "NavEKF2_core::getFilterFaults(unsigned short&) const" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.82%\n1304460×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getFilterGpsStatus(signed char, nav_gps_status&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getFilterGpsStatus(signed char, nav_gps_status&) const\n0.00%\n(0.00%)\n3480×"];
	"NavEKF2::getFilterGpsStatus(signed char, nav_gps_status&) const" -> "NavEKF2_core::getFilterGpsStatus(nav_gps_status&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getFilterStatus(signed char, nav_filter_status&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getFilterStatus(signed char, nav_filter_status&) const\n0.03%\n(0.02%)\n237274×"];
	"NavEKF2::getFilterStatus(signed char, nav_filter_status&) const" -> "NavEKF2_core::getFilterStatus(nav_filter_status&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n236509×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getFilterTimeouts(signed char, unsigned char&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getFilterTimeouts(signed char, unsigned char&) const\n0.00%\n(0.00%)\n3480×"];
	"NavEKF2::getFilterTimeouts(signed char, unsigned char&) const" -> "NavEKF2_core::getFilterTimeouts(unsigned char&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getFlowDebug(signed char, float&, float&, float&, float&, float&, float&, float&, float&, float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getFlowDebug(signed char, float&, float&, float&, float&, float&, float&, float&, float&, float&) const\n0.00%\n(0.00%)\n1740×"];
	"NavEKF2::getFlowDebug(signed char, float&, float&, float&, float&, float&, float&, float&, float&, float&) const" -> "NavEKF2_core::getFlowDebug(float&, float&, float&, float&, float&, float&, float&, float&, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getGyroBias(signed char, Vector3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getGyroBias(signed char, Vector3<float>&) const\n0.02%\n(0.01%)\n74951×"];
	"NavEKF2::getGyroBias(signed char, Vector3<float>&) const" -> "NavEKF2_core::getGyroBias(Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n74951×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getGyroScaleErrorPercentage(signed char, Vector3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getGyroScaleErrorPercentage(signed char, Vector3<float>&) const\n0.00%\n(0.00%)\n3480×"];
	"NavEKF2::getGyroScaleErrorPercentage(signed char, Vector3<float>&) const" -> "NavEKF2_core::getGyroScaleErrorPercentage(Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getInnovations(signed char, Vector3<float>&, Vector3<float>&, Vector3<float>&, float&, float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getInnovations(signed char, Vector3<float>&, Vector3<float>&, Vector3<float>&, float&, float&) const\n0.00%\n(0.00%)\n5282×"];
	"NavEKF2::getInnovations(signed char, Vector3<float>&, Vector3<float>&, Vector3<float>&, float&, float&) const" -> "NavEKF2_core::getInnovations(Vector3<float>&, Vector3<float>&, Vector3<float>&, float&, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5272×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getLLH(Location&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getLLH(Location&) const\n0.16%\n(0.01%)\n134824×"];
	"NavEKF2::getLLH(Location&) const" -> "NavEKF2_core::getLLH(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.15%\n134420×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getLastPosDownReset(float&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getLastPosDownReset(float&)\n0.02%\n(0.02%)\n49371×"];
	"NavEKF2::getLastPosDownReset(float&)" -> "NavEKF2_core::getLastPosDownReset(float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n49371×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getLastPosNorthEastReset(Vector2<float>&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getLastPosNorthEastReset(Vector2<float>&)\n0.03%\n(0.02%)\n49372×"];
	"NavEKF2::getLastPosNorthEastReset(Vector2<float>&)" -> "NavEKF2_core::getLastPosNorthEastReset(Vector2<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n49372×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getLastPosNorthEastReset(Vector2<float>&)" -> "Vector2<float>::operator+(Vector2<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n49372×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getLastYawResetAngle(float&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getLastYawResetAngle(float&)\n0.06%\n(0.03%)\n72070×"];
	"NavEKF2::getLastYawResetAngle(float&)" -> "NavEKF2_core::getLastYawResetAngle(float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n71670×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getLastYawResetAngle(float&)" -> "float wrap_PI<float>(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n71286×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getMagNED(signed char, Vector3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getMagNED(signed char, Vector3<float>&) const\n0.00%\n(0.00%)\n3480×"];
	"NavEKF2::getMagNED(signed char, Vector3<float>&) const" -> "NavEKF2_core::getMagNED(Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getMagXYZ(signed char, Vector3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getMagXYZ(signed char, Vector3<float>&) const\n0.00%\n(0.00%)\n3480×"];
	"NavEKF2::getMagXYZ(signed char, Vector3<float>&) const" -> "NavEKF2_core::getMagXYZ(Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getOriginLLH(signed char, Location&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getOriginLLH(signed char, Location&) const\n0.04%\n(0.02%)\n172457×"];
	"NavEKF2::getOriginLLH(signed char, Location&) const" -> "NavEKF2_core::getOriginLLH(Location&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n172437×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getOutputTrackingError(signed char, Vector3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getOutputTrackingError(signed char, Vector3<float>&) const\n0.00%\n(0.00%)\n1740×"];
	"NavEKF2::getOutputTrackingError(signed char, Vector3<float>&) const" -> "NavEKF2_core::getOutputTrackingError(Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getPosD(signed char, float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getPosD(signed char, float&) const\n0.02%\n(0.01%)\n83812×"];
	"NavEKF2::getPosD(signed char, float&) const" -> "NavEKF2_core::getPosD(float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n83812×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getPosDownDerivative(signed char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getPosDownDerivative(signed char) const\n0.00%\n(0.00%)\n3480×"];
	"NavEKF2::getPosDownDerivative(signed char) const" -> "NavEKF2_core::getPosDownDerivative() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getPosNE(signed char, Vector2<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getPosNE(signed char, Vector2<float>&) const\n0.03%\n(0.01%)\n76081×"];
	"NavEKF2::getPosNE(signed char, Vector2<float>&) const" -> "NavEKF2_core::getPosNE(Vector2<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n76081×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getPrimaryCoreIMUIndex() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getPrimaryCoreIMUIndex() const\n0.01%\n(0.01%)\n215012×"];
	"NavEKF2::getPrimaryCoreIndex() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getPrimaryCoreIndex() const\n0.00%\n(0.00%)\n75952×"];
	"NavEKF2::getQuaternion(signed char, Quaternion&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getQuaternion(signed char, Quaternion&) const\n0.00%\n(0.00%)\n3480×"];
	"NavEKF2::getQuaternion(signed char, Quaternion&) const" -> "NavEKF2_core::getQuaternion(Quaternion&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getQuaternionBodyToNED(signed char, Quaternion&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getQuaternionBodyToNED(signed char, Quaternion&) const\n0.00%\n(0.00%)\n12×"];
	"NavEKF2::getQuaternionBodyToNED(signed char, Quaternion&) const" -> "NavEKF2_core::getRotationBodyToNED(Matrix3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n12×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getQuaternionBodyToNED(signed char, Quaternion&) const" -> "Quaternion::from_rotation_matrix(Matrix3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n12×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getRangeBeaconDebug(signed char, unsigned char&, float&, float&, float&, float&, Vector3<float>&, float&, float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getRangeBeaconDebug(signed char, unsigned char&, float&, float&, float&, float&, Vector3<float>&, float&, float&) const\n0.00%\n(0.00%)\n1740×"];
	"NavEKF2::getRangeBeaconDebug(signed char, unsigned char&, float&, float&, float&, float&, Vector3<float>&, float&, float&) const" -> "NavEKF2_core::getRangeBeaconDebug(unsigned char&, float&, float&, float&, float&, Vector3<float>&, float&, float&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getRotationBodyToNED(Matrix3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getRotationBodyToNED(Matrix3<float>&) const\n0.13%\n(0.00%)\n71471×"];
	"NavEKF2::getRotationBodyToNED(Matrix3<float>&) const" -> "NavEKF2_core::getRotationBodyToNED(Matrix3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.13%\n71471×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getTiltError(signed char, float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getTiltError(signed char, float&) const\n0.00%\n(0.00%)\n3480×"];
	"NavEKF2::getTiltError(signed char, float&) const" -> "NavEKF2_core::getTiltError(float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getTimingStatistics(signed char, ekf_timing&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getTimingStatistics(signed char, ekf_timing&) const\n0.00%\n(0.00%)\n70×"];
	"NavEKF2::getTimingStatistics(signed char, ekf_timing&) const" -> "NavEKF2_core::getTimingStatistics(ekf_timing&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n70×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getVariances(signed char, float&, float&, float&, Vector3<float>&, float&, Vector2<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getVariances(signed char, float&, float&, float&, Vector3<float>&, float&, Vector2<float>&) const\n0.00%\n(0.00%)\n6973×"];
	"NavEKF2::getVariances(signed char, float&, float&, float&, Vector3<float>&, float&, Vector2<float>&) const" -> "NavEKF2_core::getVariances(float&, float&, float&, Vector3<float>&, float&, Vector2<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6963×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getVelNED(signed char, Vector3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getVelNED(signed char, Vector3<float>&) const\n0.04%\n(0.02%)\n149118×"];
	"NavEKF2::getVelNED(signed char, Vector3<float>&) const" -> "NavEKF2_core::getVelNED(Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n149118×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::getWind(signed char, Vector3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::getWind(signed char, Vector3<float>&) const\n0.00%\n(0.00%)\n3480×"];
	"NavEKF2::getWind(signed char, Vector3<float>&) const" -> "NavEKF2_core::getWind(Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::healthy() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::healthy() const\n0.00%\n(0.00%)\n647×"];
	"NavEKF2::healthy() const" -> "NavEKF2_core::healthy() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n647×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::isExtNavUsedForYaw() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::isExtNavUsedForYaw() const\n0.00%\n(0.00%)\n1×"];
	"NavEKF2::isExtNavUsedForYaw() const" -> "NavEKF2_core::isExtNavUsedForYaw()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::prearm_failure_reason() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::prearm_failure_reason() const\n0.00%\n(0.00%)\n2×"];
	"NavEKF2::prearm_failure_reason() const" -> "NavEKF2_core::prearm_failure_reason() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::resetHeightDatum()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::resetHeightDatum()\n0.00%\n(0.00%)\n1×"];
	"NavEKF2::resetHeightDatum()" -> "NavEKF2_core::resetHeightDatum()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::send_status_report(mavlink_channel_t) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::send_status_report(mavlink_channel_t) const\n0.01%\n(0.00%)\n721×"];
	"NavEKF2::send_status_report(mavlink_channel_t) const" -> "NavEKF2_core::send_status_report(mavlink_channel_t) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n717×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::setTakeoffExpected(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::setTakeoffExpected(bool)\n0.00%\n(0.00%)\n9008×"];
	"NavEKF2::setTakeoffExpected(bool)" -> "NavEKF2_core::setTakeoffExpected(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n17916×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::setTouchdownExpected(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::setTouchdownExpected(bool)\n0.00%\n(0.00%)\n9008×"];
	"NavEKF2::setTouchdownExpected(bool)" -> "NavEKF2_core::setTouchdownExpected(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n17916×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::updateLaneSwitchPosDownResetData(unsigned char, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::updateLaneSwitchPosDownResetData(unsigned char, unsigned char)\n0.00%\n(0.00%)\n1×"];
	"NavEKF2::updateLaneSwitchPosDownResetData(unsigned char, unsigned char)" -> "NavEKF2_core::getLastPosDownReset(float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::updateLaneSwitchPosDownResetData(unsigned char, unsigned char)" -> "NavEKF2_core::getPosD(float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::updateLaneSwitchPosResetData(unsigned char, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::updateLaneSwitchPosResetData(unsigned char, unsigned char)\n0.00%\n(0.00%)\n1×"];
	"NavEKF2::updateLaneSwitchPosResetData(unsigned char, unsigned char)" -> "NavEKF2_core::getLastPosNorthEastReset(Vector2<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::updateLaneSwitchPosResetData(unsigned char, unsigned char)" -> "NavEKF2_core::getPosNE(Vector2<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::updateLaneSwitchPosResetData(unsigned char, unsigned char)" -> "Vector2<float>::operator+(Vector2<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::updateLaneSwitchPosResetData(unsigned char, unsigned char)" -> "Vector2<float>::operator+=(Vector2<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::updateLaneSwitchPosResetData(unsigned char, unsigned char)" -> "Vector2<float>::operator-(Vector2<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::updateLaneSwitchYawResetData(unsigned char, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::updateLaneSwitchYawResetData(unsigned char, unsigned char)\n0.00%\n(0.00%)\n1×"];
	"NavEKF2::updateLaneSwitchYawResetData(unsigned char, unsigned char)" -> "NavEKF2_core::getEulerAngles(Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::updateLaneSwitchYawResetData(unsigned char, unsigned char)" -> "NavEKF2_core::getLastYawResetAngle(float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::updateLaneSwitchYawResetData(unsigned char, unsigned char)" -> "float wrap_PI<float>(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2::use_compass() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2::use_compass() const\n0.00%\n(0.00%)\n715×"];
	"NavEKF2::use_compass() const" -> "NavEKF2_core::use_compass() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n715×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::ConstrainStates()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::ConstrainStates()\n0.13%\n(0.07%)\n35734×"];
	"NavEKF2_core::ConstrainStates()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n857616×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::ConstrainVariances()" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::ConstrainVariances()\n0.23%\n(0.13%)\n58704×"];
	"NavEKF2_core::ConstrainVariances()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.10%\n1369170×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::CorrectGPSForAntennaOffset(NavEKF2_core::gps_elements&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::CorrectGPSForAntennaOffset(NavEKF2_core::gps_elements&)\n0.00%\n(0.00%)\n1384×"];
	"NavEKF2_core::CorrectGPSForAntennaOffset(NavEKF2_core::gps_elements&)" -> "AP::gps()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1384×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::CorrectGPSForAntennaOffset(NavEKF2_core::gps_elements&)" -> "AP_GPS::get_antenna_offset(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1384×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::CorrectGPSForAntennaOffset(NavEKF2_core::gps_elements&)" -> "Vector3<float>::operator-(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1384×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::CovarianceInit()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::CovarianceInit()\n0.00%\n(0.00%)\n2×"];
	"NavEKF2_core::CovarianceInit()" -> "NavEKF2_core::InitialGyroBiasUncertainty() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::CovariancePrediction()" [color="#0d1977", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::CovariancePrediction()\n2.99%\n(2.83%)\n35734×"];
	"NavEKF2_core::CovariancePrediction()" -> "AP_HAL::Util::perf_begin(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::CovariancePrediction()" -> "NavEKF2_core::ConstrainVariances()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.14%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::CovariancePrediction()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n321606×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::ForceSymmetry()" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::ForceSymmetry()\n0.74%\n(0.74%)\n22970×"];
	"NavEKF2_core::FuseDeclination(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::FuseDeclination(float)\n0.08%\n(0.06%)\n602×"];
	"NavEKF2_core::FuseDeclination(float)" -> "NavEKF2_core::ConstrainVariances()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n602×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::FuseDeclination(float)" -> "NavEKF2_core::ForceSymmetry()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n602×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::FuseDeclination(float)" -> "NavEKF2_core::MagDeclination() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n602×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::FuseDeclination(float)" -> "Quaternion::rotate(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n602×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::FuseDeclination(float)" -> atan2f [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n602×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::FuseMagnetometer()" [color="#0d1776", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::FuseMagnetometer()\n2.53%\n(2.14%)\n10068×"];
	"NavEKF2_core::FuseMagnetometer()" -> "AP_HAL::Util::perf_begin(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n30204×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::FuseMagnetometer()" -> "NavEKF2_core::ConstrainVariances()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n10068×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::FuseMagnetometer()" -> "NavEKF2_core::ForceSymmetry()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.33%\n10068×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::FuseMagnetometer()" -> "Quaternion::rotate(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n10068×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::FuseMagnetometer()" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3356×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::FuseMagnetometer()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3356×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::FuseVelPosNED()" [color="#0d1275", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::FuseVelPosNED()\n1.38%\n(0.92%)\n4948×"];
	"NavEKF2_core::FuseVelPosNED()" -> "AP_HAL::Util::perf_begin(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4948×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::FuseVelPosNED()" -> "NavEKF2_core::ConstrainVariances()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n12084×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::FuseVelPosNED()" -> "NavEKF2_core::ForceSymmetry()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.39%\n12084×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::FuseVelPosNED()" -> "NavEKF2_core::getTouchdownExpected()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3572×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::FuseVelPosNED()" -> "Quaternion::rotate(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n12084×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::FuseVelPosNED()" -> "Vector3<float>::operator+=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8512×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::FuseVelPosNED()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n25638×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialGyroBiasUncertainty() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::InitialGyroBiasUncertainty() const\n0.00%\n(0.00%)\n2×"];
	"NavEKF2_core::InitialiseFilterBootstrap()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::InitialiseFilterBootstrap()\n0.00%\n(0.00%)\n400×"];
	"NavEKF2_core::InitialiseFilterBootstrap()" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseFilterBootstrap()" -> "NavEKF2_core::CovarianceInit()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseFilterBootstrap()" -> "NavEKF2_core::InitialiseVariables()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseFilterBootstrap()" -> "NavEKF2_core::ResetHeight()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseFilterBootstrap()" -> "NavEKF2_core::ResetPosition()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseFilterBootstrap()" -> "NavEKF2_core::ResetVelocity()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseFilterBootstrap()" -> "NavEKF2_core::StoreOutputReset()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseFilterBootstrap()" -> "NavEKF2_core::assume_zero_sideslip() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n400×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseFilterBootstrap()" -> "NavEKF2_core::calcEarthRateNED(Vector3<float>&, int) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseFilterBootstrap()" -> "NavEKF2_core::readBaroData()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n400×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseFilterBootstrap()" -> "NavEKF2_core::readGpsData()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n400×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseFilterBootstrap()" -> "NavEKF2_core::readIMUData()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n400×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseFilterBootstrap()" -> "NavEKF2_core::readMagData()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n400×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseFilterBootstrap()" -> "Quaternion::from_euler(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseFilterBootstrap()" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseFilterBootstrap()" -> "Vector3<float>::operator/=(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseFilterBootstrap()" -> asinf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseFilterBootstrap()" -> atan2f [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseVariables()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::InitialiseVariables()\n0.00%\n(0.00%)\n2×"];
	"NavEKF2_core::InitialiseVariables()" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseVariables()" -> "AP_HAL::Util::snprintf(char*, unsigned long, char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseVariables()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseVariables()" -> "Matrix3<float>::zero()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseVariables()" -> "NavEKF2_core::InitialiseVariablesMag()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseVariables()" -> "__memset_avx2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::InitialiseVariablesMag()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::InitialiseVariablesMag()\n0.00%\n(0.00%)\n2×"];
	"NavEKF2_core::MagDeclination() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::MagDeclination() const\n0.00%\n(0.00%)\n829×"];
	"NavEKF2_core::MagDeclination() const" -> "Compass::get_declination() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n829×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::MagDeclination() const" -> "NavEKF2_core::use_compass() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n829×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::NavEKF2_core(NavEKF2*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::NavEKF2_core(NavEKF2*)\n0.00%\n(0.00%)\n2×"];
	"NavEKF2_core::NavEKF2_core(NavEKF2*)" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::ResetHeight()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::ResetHeight()\n0.00%\n(0.00%)\n2×"];
	"NavEKF2_core::ResetHeight()" -> "NavEKF2_core::zeroCols(float (&) [24][24], unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::ResetHeight()" -> "NavEKF2_core::zeroRows(float (&) [24][24], unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::ResetPosition()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::ResetPosition()\n0.00%\n(0.00%)\n4×"];
	"NavEKF2_core::ResetPosition()" -> "NavEKF2_core::CorrectGPSForAntennaOffset(NavEKF2_core::gps_elements&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::ResetPosition()" -> "NavEKF2_core::zeroCols(float (&) [24][24], unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::ResetPosition()" -> "NavEKF2_core::zeroRows(float (&) [24][24], unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::ResetVelocity()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::ResetVelocity()\n0.00%\n(0.00%)\n4×"];
	"NavEKF2_core::ResetVelocity()" -> "NavEKF2_core::CorrectGPSForAntennaOffset(NavEKF2_core::gps_elements&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::ResetVelocity()" -> "NavEKF2_core::zeroCols(float (&) [24][24], unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::ResetVelocity()" -> "NavEKF2_core::zeroRows(float (&) [24][24], unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::SelectBetaFusion()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::SelectBetaFusion()\n0.02%\n(0.01%)\n35734×"];
	"NavEKF2_core::SelectBetaFusion()" -> "NavEKF2_core::assume_zero_sideslip() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n32378×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::SelectBetaFusion()" -> "NavEKF2_core::useAirspeed() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n32378×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::SelectBetaFusion()" -> "NavEKF2_core::use_compass() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n32378×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::SelectFlowFusion()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::SelectFlowFusion()\n0.02%\n(0.02%)\n35734×"];
	"NavEKF2_core::SelectFlowFusion()" -> "AP_HAL::Util::perf_begin(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n32378×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::SelectMagFusion()" [color="#0d1876", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::SelectMagFusion()\n2.73%\n(0.03%)\n35734×"];
	"NavEKF2_core::SelectMagFusion()" -> "AP_HAL::Util::perf_begin(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n45802×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::SelectMagFusion()" -> "NavEKF2_core::FuseDeclination(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n600×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::SelectMagFusion()" -> "NavEKF2_core::FuseMagnetometer()" [arrowsize="0.35", color="#0d1776", fontcolor="#0d1776", fontsize="10.00", label="2.53%\n10068×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::SelectMagFusion()" -> "NavEKF2_core::controlMagYawReset()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3572×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::SelectMagFusion()" -> "NavEKF2_core::fuseEulerYaw()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n216×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::SelectMagFusion()" -> "NavEKF2_core::readMagData()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::SelectMagFusion()" -> "NavEKF2_core::use_compass() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n42878×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::SelectRngBcnFusion()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::SelectRngBcnFusion()\n0.02%\n(0.00%)\n35734×"];
	"NavEKF2_core::SelectRngBcnFusion()" -> "NavEKF2_core::readRngBcnData()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::SelectTasFusion()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::SelectTasFusion()\n0.01%\n(0.01%)\n35734×"];
	"NavEKF2_core::SelectTasFusion()" -> "NavEKF2_core::readAirSpdData()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n32378×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::SelectVelPosFusion()" [color="#0d1375", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::SelectVelPosFusion()\n1.48%\n(0.01%)\n35734×"];
	"NavEKF2_core::SelectVelPosFusion()" -> "NavEKF2_core::CorrectGPSForAntennaOffset(NavEKF2_core::gps_elements&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1376×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::SelectVelPosFusion()" -> "NavEKF2_core::FuseVelPosNED()" [arrowsize="0.35", color="#0d1275", fontcolor="#0d1275", fontsize="10.00", label="1.38%\n4948×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::SelectVelPosFusion()" -> "NavEKF2_core::readGpsData()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n32378×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::SelectVelPosFusion()" -> "NavEKF2_core::selectHeightForFusion()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n32378×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::StoreOutputReset()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::StoreOutputReset()\n0.00%\n(0.00%)\n2×"];
	"NavEKF2_core::StoreQuatRotate(Quaternion const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::StoreQuatRotate(Quaternion const&)\n0.00%\n(0.00%)\n4×"];
	"NavEKF2_core::StoreQuatRotate(Quaternion const&)" -> "Quaternion::operator*(Quaternion const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n112×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateFilter(bool)" [color="#0c5185", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::UpdateFilter(bool)\n14.15%\n(0.07%)\n142942×"];
	"NavEKF2_core::UpdateFilter(bool)" -> "AP_HAL::Util::perf_begin(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n142942×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateFilter(bool)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n142536×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateFilter(bool)" -> "NavEKF2_core::CovariancePrediction()" [arrowsize="0.35", color="#0d1977", fontcolor="#0d1977", fontsize="10.00", label="2.99%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateFilter(bool)" -> "NavEKF2_core::SelectBetaFusion()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateFilter(bool)" -> "NavEKF2_core::SelectFlowFusion()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateFilter(bool)" -> "NavEKF2_core::SelectMagFusion()" [arrowsize="0.35", color="#0d1876", fontcolor="#0d1876", fontsize="10.00", label="2.73%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateFilter(bool)" -> "NavEKF2_core::SelectRngBcnFusion()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateFilter(bool)" -> "NavEKF2_core::SelectTasFusion()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateFilter(bool)" -> "NavEKF2_core::SelectVelPosFusion()" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.48%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateFilter(bool)" -> "NavEKF2_core::UpdateStrapdownEquationsNED()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.34%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateFilter(bool)" -> "NavEKF2_core::calcOutputStates()" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.39%\n142942×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateFilter(bool)" -> "NavEKF2_core::controlFilterModes()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.38%\n142942×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateFilter(bool)" -> "NavEKF2_core::readIMUData()" [arrowsize="0.35", color="#0d1375", fontcolor="#0d1375", fontsize="10.00", label="1.40%\n142942×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateFilter(bool)" -> "NavEKF2_core::updateFilterStatus()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.13%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateFilter(bool)" -> "NavEKF_core_common::fill_scratch_variables()" [arrowsize="0.35", color="#0d1a77", fontcolor="#0d1a77", fontsize="10.00", label="3.15%\n142942×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateStrapdownEquationsNED()" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::UpdateStrapdownEquationsNED()\n0.34%\n(0.04%)\n35734×"];
	"NavEKF2_core::UpdateStrapdownEquationsNED()" -> "Matrix3<float>::mul_transpose(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateStrapdownEquationsNED()" -> "Matrix3<float>::operator*(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateStrapdownEquationsNED()" -> "NavEKF2_core::ConstrainStates()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.13%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateStrapdownEquationsNED()" -> "Quaternion::inverse() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateStrapdownEquationsNED()" -> "Quaternion::normalize()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateStrapdownEquationsNED()" -> "Quaternion::rotate(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateStrapdownEquationsNED()" -> "Quaternion::rotation_matrix(Matrix3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateStrapdownEquationsNED()" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateStrapdownEquationsNED()" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n142936×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateStrapdownEquationsNED()" -> "Vector3<float>::operator+(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n71468×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateStrapdownEquationsNED()" -> "Vector3<float>::operator+=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n107202×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateStrapdownEquationsNED()" -> "Vector3<float>::operator-(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::UpdateStrapdownEquationsNED()" -> "Vector3<float>::operator/(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::alignMagStateDeclination()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::alignMagStateDeclination()\n0.00%\n(0.00%)\n7×"];
	"NavEKF2_core::alignMagStateDeclination()" -> "NavEKF2_core::FuseDeclination(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::alignMagStateDeclination()" -> "NavEKF2_core::MagDeclination() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::alignMagStateDeclination()" -> "NavEKF2_core::zeroCols(float (&) [24][24], unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::alignMagStateDeclination()" -> "NavEKF2_core::zeroRows(float (&) [24][24], unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::alignMagStateDeclination()" -> sincosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::assume_zero_sideslip() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::assume_zero_sideslip() const\n0.01%\n(0.01%)\n181096×"];
	"NavEKF2_core::calcEarthRateNED(Vector3<float>&, int) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::calcEarthRateNED(Vector3<float>&, int) const\n0.00%\n(0.00%)\n4×"];
	"NavEKF2_core::calcEarthRateNED(Vector3<float>&, int) const" -> sincosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcGpsGoodForFlight()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::calcGpsGoodForFlight()\n0.00%\n(0.00%)\n1794×"];
	"NavEKF2_core::calcGpsGoodForFlight()" -> "AP::gps()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1794×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcGpsGoodForFlight()" -> "AP_GPS::speed_accuracy(unsigned char, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1794×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcGpsGoodForFlight()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3588×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcGpsGoodToAlign()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::calcGpsGoodToAlign()\n0.00%\n(0.00%)\n1794×"];
	"NavEKF2_core::calcGpsGoodToAlign()" -> "AP::gps()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1794×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcGpsGoodToAlign()" -> "AP_GPS::horizontal_accuracy(unsigned char, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1794×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcGpsGoodToAlign()" -> "AP_GPS::vertical_accuracy(unsigned char, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1794×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcGpsGoodToAlign()" -> "AP_HAL::Util::snprintf(char*, unsigned long, char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcGpsGoodToAlign()" -> "Location::get_distance(Location const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1794×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcGpsGoodToAlign()" -> "NavEKF2_core::assume_zero_sideslip() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1682×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcGpsGoodToAlign()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1902×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcOutputStates()" [color="#0d1375", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::calcOutputStates()\n1.39%\n(0.57%)\n142942×"];
	"NavEKF2_core::calcOutputStates()" -> "Matrix3<float>::operator*(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n142942×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcOutputStates()" -> "NavEKF2_core::correctDeltaAngle(Vector3<float>&, float, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n142942×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcOutputStates()" -> "Quaternion::from_axis_angle(Vector3<float>)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.14%\n142942×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcOutputStates()" -> "Quaternion::normalize()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n178676×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcOutputStates()" -> "Quaternion::operator*=(Quaternion const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n142942×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcOutputStates()" -> "Quaternion::operator/(Quaternion const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcOutputStates()" -> "Quaternion::rotation_matrix(Matrix3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n142942×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcOutputStates()" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n107202×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcOutputStates()" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n428814×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcOutputStates()" -> "Vector3<float>::operator+(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n357352×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcOutputStates()" -> "Vector3<float>::operator+=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.23%\n2215520×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcOutputStates()" -> "Vector3<float>::operator-(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n71468×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcOutputStates()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n214410×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcOutputStates()" -> fmaxf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcQuatAndFieldStates(float, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::calcQuatAndFieldStates(float, float)\n0.00%\n(0.00%)\n4×"];
	"NavEKF2_core::calcQuatAndFieldStates(float, float)" -> "Matrix3<float>::from_euler(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcQuatAndFieldStates(float, float)" -> "Matrix3<float>::operator*(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcQuatAndFieldStates(float, float)" -> "NavEKF2_core::MagDeclination() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcQuatAndFieldStates(float, float)" -> "NavEKF2_core::alignMagStateDeclination()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcQuatAndFieldStates(float, float)" -> "NavEKF2_core::readMagData()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcQuatAndFieldStates(float, float)" -> "NavEKF2_core::recordMagReset()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcQuatAndFieldStates(float, float)" -> "NavEKF2_core::use_compass() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcQuatAndFieldStates(float, float)" -> "NavEKF2_core::zeroAttCovOnly()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcQuatAndFieldStates(float, float)" -> "Quaternion::from_euler(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcQuatAndFieldStates(float, float)" -> "Quaternion::rotation_matrix(Matrix3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcQuatAndFieldStates(float, float)" -> "Quaternion::to_euler(float&, float&, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcQuatAndFieldStates(float, float)" -> atan2f [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::calcQuatAndFieldStates(float, float)" -> "float wrap_PI<float>(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::checkAttitudeAlignmentStatus()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::checkAttitudeAlignmentStatus()\n0.05%\n(0.03%)\n142942×"];
	"NavEKF2_core::checkAttitudeAlignmentStatus()" -> "GCS::send_text(MAV_SEVERITY, char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::checkAttitudeAlignmentStatus()" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n142942×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::checkAttitudeAlignmentStatus()" -> "gcs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::controlFilterModes()" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::controlFilterModes()\n0.38%\n(0.03%)\n142942×"];
	"NavEKF2_core::controlFilterModes()" -> "NavEKF2_core::checkAttitudeAlignmentStatus()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n142942×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::controlFilterModes()" -> "NavEKF2_core::detectFlight()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.09%\n142942×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::controlFilterModes()" -> "NavEKF2_core::setAidingMode()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.09%\n142942×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::controlFilterModes()" -> "NavEKF2_core::setWindMagStateLearningMode()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n142942×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::controlMagYawReset()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::controlMagYawReset()\n0.00%\n(0.00%)\n3572×"];
	"NavEKF2_core::controlMagYawReset()" -> "GCS::send_text(MAV_SEVERITY, char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::controlMagYawReset()" -> "NavEKF2_core::StoreQuatRotate(Quaternion const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::controlMagYawReset()" -> "NavEKF2_core::assume_zero_sideslip() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3694×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::controlMagYawReset()" -> "NavEKF2_core::calcQuatAndFieldStates(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::controlMagYawReset()" -> "NavEKF2_core::recordYawReset()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::controlMagYawReset()" -> "Quaternion::operator/(Quaternion const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n342×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::controlMagYawReset()" -> "Quaternion::to_axis_angle(Vector3<float>&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n338×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::controlMagYawReset()" -> "Quaternion::to_euler(float&, float&, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::controlMagYawReset()" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n338×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::controlMagYawReset()" -> "gcs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::correctDeltaAngle(Vector3<float>&, float, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::correctDeltaAngle(Vector3<float>&, float, unsigned char)\n0.09%\n(0.06%)\n178726×"];
	"NavEKF2_core::correctDeltaAngle(Vector3<float>&, float, unsigned char)" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n178726×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::correctDeltaAngle(Vector3<float>&, float, unsigned char)" -> "Vector3<float>::operator-=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n178726×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::correctDeltaVelocity(Vector3<float>&, float, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::correctDeltaVelocity(Vector3<float>&, float, unsigned char)\n0.00%\n(0.00%)\n35784×"];
	"NavEKF2_core::detectFlight()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::detectFlight()\n0.09%\n(0.06%)\n142942×"];
	"NavEKF2_core::detectFlight()" -> "AP::vehicle()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n139176×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::detectFlight()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n135672×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::detectFlight()" -> "NavEKF2_core::assume_zero_sideslip() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n142942×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::errorScore() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::errorScore() const\n0.01%\n(0.01%)\n71473×"];
	"NavEKF2_core::fuseEulerYaw()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::fuseEulerYaw()\n0.02%\n(0.01%)\n216×"];
	"NavEKF2_core::fuseEulerYaw()" -> "Matrix3<float>::from_euler(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n186×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::fuseEulerYaw()" -> "Matrix3<float>::from_euler312(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n30×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::fuseEulerYaw()" -> "Matrix3<float>::operator*(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n216×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::fuseEulerYaw()" -> "NavEKF2_core::ConstrainVariances()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n216×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::fuseEulerYaw()" -> "NavEKF2_core::ForceSymmetry()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n216×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::fuseEulerYaw()" -> "NavEKF2_core::MagDeclination() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n216×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::fuseEulerYaw()" -> "NavEKF2_core::use_compass() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n216×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::fuseEulerYaw()" -> "Quaternion::rotate(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n216×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::fuseEulerYaw()" -> "Quaternion::to_euler(float&, float&, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n186×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::fuseEulerYaw()" -> "Quaternion::to_vector312() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n30×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::fuseEulerYaw()" -> atan2f [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n216×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::fuseEulerYaw()" -> "float wrap_PI<float>(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n432×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::getAccelZBias(float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getAccelZBias(float&) const\n0.01%\n(0.01%)\n146422×"];
	"NavEKF2_core::getActiveMag() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getActiveMag() const\n0.00%\n(0.00%)\n3480×"];
	"NavEKF2_core::getEkfControlLimits(float&, float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getEkfControlLimits(float&, float&) const\n0.00%\n(0.00%)\n52607×"];
	"NavEKF2_core::getEulerAngles(Vector3<float>&) const" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getEulerAngles(Vector3<float>&) const\n0.27%\n(0.01%)\n75672×"];
	"NavEKF2_core::getEulerAngles(Vector3<float>&) const" -> "Quaternion::to_euler(float&, float&, float&) const" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.25%\n75672×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::getEulerAngles(Vector3<float>&) const" -> "Vector3<float>::operator-(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n75672×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::getFilterFaults(unsigned short&) const" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getFilterFaults(unsigned short&) const\n0.95%\n(0.81%)\n1519530×"];
	"NavEKF2_core::getFilterFaults(unsigned short&) const" -> "Vector3<float>::is_nan() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.14%\n1519530×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::getFilterGpsStatus(nav_gps_status&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getFilterGpsStatus(nav_gps_status&) const\n0.00%\n(0.00%)\n3480×"];
	"NavEKF2_core::getFilterStatus(nav_filter_status&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getFilterStatus(nav_filter_status&) const\n0.01%\n(0.01%)\n236509×"];
	"NavEKF2_core::getFilterTimeouts(unsigned char&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getFilterTimeouts(unsigned char&) const\n0.00%\n(0.00%)\n3480×"];
	"NavEKF2_core::getFlowDebug(float&, float&, float&, float&, float&, float&, float&, float&, float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getFlowDebug(float&, float&, float&, float&, float&, float&, float&, float&, float&) const\n0.00%\n(0.00%)\n1740×"];
	"NavEKF2_core::getFramesSincePredict() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getFramesSincePredict() const\n0.00%\n(0.00%)\n142942×"];
	"NavEKF2_core::getGyroBias(Vector3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getGyroBias(Vector3<float>&) const\n0.02%\n(0.01%)\n74951×"];
	"NavEKF2_core::getGyroBias(Vector3<float>&) const" -> "Vector3<float>::operator/(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n74951×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::getGyroScaleErrorPercentage(Vector3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getGyroScaleErrorPercentage(Vector3<float>&) const\n0.00%\n(0.00%)\n3480×"];
	"NavEKF2_core::getInnovations(Vector3<float>&, Vector3<float>&, Vector3<float>&, float&, float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getInnovations(Vector3<float>&, Vector3<float>&, Vector3<float>&, float&, float&) const\n0.00%\n(0.00%)\n5272×"];
	"NavEKF2_core::getLLH(Location&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getLLH(Location&) const\n0.15%\n(0.09%)\n134420×"];
	"NavEKF2_core::getLLH(Location&) const" -> "AP::gps()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n134420×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::getLLH(Location&) const" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n134420×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::getLLH(Location&) const" -> "Location::offset(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n111177×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::getLastPosDownReset(float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getLastPosDownReset(float&) const\n0.00%\n(0.00%)\n49372×"];
	"NavEKF2_core::getLastPosNorthEastReset(Vector2<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getLastPosNorthEastReset(Vector2<float>&) const\n0.00%\n(0.00%)\n49373×"];
	"NavEKF2_core::getLastYawResetAngle(float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getLastYawResetAngle(float&) const\n0.00%\n(0.00%)\n71671×"];
	"NavEKF2_core::getMagNED(Vector3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getMagNED(Vector3<float>&) const\n0.00%\n(0.00%)\n3480×"];
	"NavEKF2_core::getMagNED(Vector3<float>&) const" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::getMagXYZ(Vector3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getMagXYZ(Vector3<float>&) const\n0.00%\n(0.00%)\n3480×"];
	"NavEKF2_core::getMagXYZ(Vector3<float>&) const" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3480×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::getOriginLLH(Location&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getOriginLLH(Location&) const\n0.03%\n(0.03%)\n172437×"];
	"NavEKF2_core::getOutputTrackingError(Vector3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getOutputTrackingError(Vector3<float>&) const\n0.00%\n(0.00%)\n1740×"];
	"NavEKF2_core::getPosD(float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getPosD(float&) const\n0.01%\n(0.01%)\n83814×"];
	"NavEKF2_core::getPosDownDerivative() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getPosDownDerivative() const\n0.00%\n(0.00%)\n3480×"];
	"NavEKF2_core::getPosNE(Vector2<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getPosNE(Vector2<float>&) const\n0.02%\n(0.01%)\n76083×"];
	"NavEKF2_core::getPosNE(Vector2<float>&) const" -> "AP::gps()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n26522×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::getPosNE(Vector2<float>&) const" -> "Location::get_distance_NE(Location const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n13261×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::getQuaternion(Quaternion&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getQuaternion(Quaternion&) const\n0.00%\n(0.00%)\n3480×"];
	"NavEKF2_core::getRangeBeaconDebug(unsigned char&, float&, float&, float&, float&, Vector3<float>&, float&, float&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getRangeBeaconDebug(unsigned char&, float&, float&, float&, float&, Vector3<float>&, float&, float&)\n0.00%\n(0.00%)\n1740×"];
	"NavEKF2_core::getRotationBodyToNED(Matrix3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getRotationBodyToNED(Matrix3<float>&) const\n0.13%\n(0.02%)\n71483×"];
	"NavEKF2_core::getRotationBodyToNED(Matrix3<float>&) const" -> "Matrix3<float>::operator*(Matrix3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n71483×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::getRotationBodyToNED(Matrix3<float>&) const" -> "Quaternion::rotation_matrix(Matrix3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n71483×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::getTakeoffExpected()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getTakeoffExpected()\n0.00%\n(0.00%)\n14206×"];
	"NavEKF2_core::getTiltError(float&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getTiltError(float&) const\n0.00%\n(0.00%)\n3480×"];
	"NavEKF2_core::getTimingStatistics(ekf_timing&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getTimingStatistics(ekf_timing&)\n0.00%\n(0.00%)\n70×"];
	"NavEKF2_core::getTouchdownExpected()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getTouchdownExpected()\n0.00%\n(0.00%)\n7038×"];
	"NavEKF2_core::getVariances(float&, float&, float&, Vector3<float>&, float&, Vector2<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getVariances(float&, float&, float&, Vector3<float>&, float&, Vector2<float>&) const\n0.00%\n(0.00%)\n7680×"];
	"NavEKF2_core::getVelNED(Vector3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getVelNED(Vector3<float>&) const\n0.03%\n(0.01%)\n149118×"];
	"NavEKF2_core::getVelNED(Vector3<float>&) const" -> "Vector3<float>::operator+(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n149118×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::getWind(Vector3<float>&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::getWind(Vector3<float>&) const\n0.00%\n(0.00%)\n3480×"];
	"NavEKF2_core::healthy() const" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::healthy() const\n0.20%\n(0.06%)\n215070×"];
	"NavEKF2_core::healthy() const" -> "NavEKF2_core::getFilterFaults(unsigned short&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.14%\n215070×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::isExtNavUsedForYaw()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::isExtNavUsedForYaw()\n0.00%\n(0.00%)\n1×"];
	"NavEKF2_core::learnInactiveBiases()" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::learnInactiveBiases()\n0.47%\n(0.24%)\n143342×"];
	"NavEKF2_core::learnInactiveBiases()" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n143342×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::learnInactiveBiases()" -> "AP_InertialSensor::use_accel(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n430026×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::learnInactiveBiases()" -> "AP_InertialSensor::use_gyro(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n430026×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::learnInactiveBiases()" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n143342×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::learnInactiveBiases()" -> "Vector3<float>::operator-(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n430026×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::learnInactiveBiases()" -> "Vector3<float>::operator-=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n143342×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::learnInactiveBiases()" -> "Vector3<float>::operator/(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n286684×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::learnInactiveBiases()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n573368×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::prearm_failure_reason() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::prearm_failure_reason() const\n0.00%\n(0.00%)\n1×"];
	"NavEKF2_core::readAirSpdData()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::readAirSpdData()\n0.01%\n(0.01%)\n32378×"];
	"NavEKF2_core::readBaroData()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::readBaroData()\n0.01%\n(0.01%)\n32778×"];
	"NavEKF2_core::readBaroData()" -> "AP::baro()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n32778×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readBaroData()" -> "NavEKF2_core::getTakeoffExpected()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3584×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readDeltaAngle(unsigned char, Vector3<float>&, float&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::readDeltaAngle(unsigned char, Vector3<float>&, float&)\n0.08%\n(0.05%)\n143342×"];
	"NavEKF2_core::readDeltaAngle(unsigned char, Vector3<float>&, float&)" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n143342×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readDeltaAngle(unsigned char, Vector3<float>&, float&)" -> "AP_InertialSensor::get_delta_angle(unsigned char, Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n143342×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readDeltaAngle(unsigned char, Vector3<float>&, float&)" -> "AP_InertialSensor::get_delta_angle_dt(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n143342×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readDeltaVelocity(unsigned char, Vector3<float>&, float&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::readDeltaVelocity(unsigned char, Vector3<float>&, float&)\n0.07%\n(0.04%)\n143342×"];
	"NavEKF2_core::readDeltaVelocity(unsigned char, Vector3<float>&, float&)" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n143342×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readDeltaVelocity(unsigned char, Vector3<float>&, float&)" -> "AP_InertialSensor::get_delta_velocity(unsigned char, Vector3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n143342×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readDeltaVelocity(unsigned char, Vector3<float>&, float&)" -> "AP_InertialSensor::get_delta_velocity_dt(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n143342×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readGpsData()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::readGpsData()\n0.02%\n(0.01%)\n32778×"];
	"NavEKF2_core::readGpsData()" -> "AP::gps()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n32778×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readGpsData()" -> "AP_GPS::get_lag(unsigned char, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1794×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readGpsData()" -> "AP_GPS::horizontal_accuracy(unsigned char, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1794×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readGpsData()" -> "AP_GPS::speed_accuracy(unsigned char, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1794×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readGpsData()" -> "AP_GPS::vertical_accuracy(unsigned char, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1794×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readGpsData()" -> "Compass::have_scale_factor(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1692×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readGpsData()" -> "Location::get_distance_NE(Location const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1692×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readGpsData()" -> "NavEKF2_core::alignMagStateDeclination()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readGpsData()" -> "NavEKF2_core::calcGpsGoodForFlight()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1794×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readGpsData()" -> "NavEKF2_core::calcGpsGoodToAlign()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1794×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readGpsData()" -> "NavEKF2_core::setOrigin(Location const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readGpsData()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1794×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readIMUData()" [color="#0d1375", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::readIMUData()\n1.40%\n(0.20%)\n143342×"];
	"NavEKF2_core::readIMUData()" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n143342×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readIMUData()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n143342×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readIMUData()" -> "AP_InertialSensor::use_accel(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n143342×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readIMUData()" -> "AP_InertialSensor::use_gyro(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n143342×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readIMUData()" -> "Matrix3<float>::operator*(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n143342×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readIMUData()" -> "NavEKF2_core::correctDeltaAngle(Vector3<float>&, float, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n35784×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readIMUData()" -> "NavEKF2_core::correctDeltaVelocity(Vector3<float>&, float, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n35784×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readIMUData()" -> "NavEKF2_core::learnInactiveBiases()" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.47%\n143342×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readIMUData()" -> "NavEKF2_core::readDeltaAngle(unsigned char, Vector3<float>&, float&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n143342×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readIMUData()" -> "NavEKF2_core::readDeltaVelocity(unsigned char, Vector3<float>&, float&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n143342×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readIMUData()" -> "NavEKF2_core::updateTimingStatistics()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n35784×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readIMUData()" -> "Quaternion::normalize()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n143342×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readIMUData()" -> "Quaternion::rotate(Vector3<float> const&)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.24%\n143342×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readIMUData()" -> "Quaternion::rotation_matrix(Matrix3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n143342×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readIMUData()" -> "Quaternion::to_axis_angle(Vector3<float>&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n35784×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readIMUData()" -> "Vector3<float>::operator+=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n143342×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readIMUData()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n35784×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readMagData()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::readMagData()\n0.06%\n(0.02%)\n36138×"];
	"NavEKF2_core::readMagData()" -> "AP::compass()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n36138×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readMagData()" -> "Compass::_get_state_id(typesafe_index<unsigned char, TAG_Priority>) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n46890×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readMagData()" -> "Compass::consistent() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n3584×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readMagData()" -> "NavEKF2_core::use_compass() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n36138×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readMagData()" -> "Vector3<float>::operator!=(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3582×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readMagData()" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3584×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readRangeFinder()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::readRangeFinder()\n0.02%\n(0.02%)\n32378×"];
	"NavEKF2_core::readRangeFinder()" -> "AP::rangefinder()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n32378×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readRangeFinder()" -> "RangeFinder::get_backend(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n11916×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readRangeFinder()" -> "RangeFinder::ground_clearance_cm_orient(Rotation) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n32378×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readRngBcnData()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::readRngBcnData()\n0.02%\n(0.02%)\n35734×"];
	"NavEKF2_core::readRngBcnData()" -> "AP::beacon()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readRngBcnData()" -> "AP_Beacon::count() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readRngBcnData()" -> "AP_Beacon::get_vehicle_position_ned(Vector3<float>&, float&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n35734×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::readyToUseGPS() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::readyToUseGPS() const\n0.00%\n(0.00%)\n156×"];
	"NavEKF2_core::recordMagReset()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::recordMagReset()\n0.00%\n(0.00%)\n4×"];
	"NavEKF2_core::recordYawReset()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::recordYawReset()\n0.00%\n(0.00%)\n4×"];
	"NavEKF2_core::resetHeightDatum()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::resetHeightDatum()\n0.00%\n(0.00%)\n2×"];
	"NavEKF2_core::resetHeightDatum()" -> "AP::baro()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::resetHeightDatum()" -> "AP_Baro::update_calibration()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::selectHeightForFusion()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::selectHeightForFusion()\n0.06%\n(0.03%)\n32378×"];
	"NavEKF2_core::selectHeightForFusion()" -> "AP::rangefinder()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n32378×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::selectHeightForFusion()" -> "NavEKF2_core::getTakeoffExpected()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10622×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::selectHeightForFusion()" -> "NavEKF2_core::getTouchdownExpected()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3466×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::selectHeightForFusion()" -> "NavEKF2_core::readBaroData()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n32378×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::selectHeightForFusion()" -> "NavEKF2_core::readRangeFinder()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n32378×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::selectHeightForFusion()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7038×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::send_status_report(mavlink_channel_t) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::send_status_report(mavlink_channel_t) const\n0.01%\n(0.00%)\n717×"];
	"NavEKF2_core::send_status_report(mavlink_channel_t) const" -> "NavEKF2_core::getVariances(float&, float&, float&, Vector3<float>&, float&, Vector2<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n717×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::send_status_report(mavlink_channel_t) const" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n717×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::send_status_report(mavlink_channel_t) const" -> fmaxf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1434×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::setAidingMode()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::setAidingMode()\n0.09%\n(0.09%)\n142942×"];
	"NavEKF2_core::setAidingMode()" -> "GCS::send_text(MAV_SEVERITY, char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::setAidingMode()" -> "NavEKF2_core::ResetPosition()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::setAidingMode()" -> "NavEKF2_core::ResetVelocity()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::setAidingMode()" -> "NavEKF2_core::readyToUseGPS() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n156×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::setAidingMode()" -> "gcs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::setOrigin(Location const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::setOrigin(Location const&)\n0.00%\n(0.00%)\n2×"];
	"NavEKF2_core::setOrigin(Location const&)" -> "GCS::send_text(MAV_SEVERITY, char const*, ...)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::setOrigin(Location const&)" -> "NavEKF2_core::calcEarthRateNED(Vector3<float>&, int) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::setOrigin(Location const&)" -> "gcs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::setTakeoffExpected(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::setTakeoffExpected(bool)\n0.00%\n(0.00%)\n17916×"];
	"NavEKF2_core::setTouchdownExpected(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::setTouchdownExpected(bool)\n0.00%\n(0.00%)\n17916×"];
	"NavEKF2_core::setWindMagStateLearningMode()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::setWindMagStateLearningMode()\n0.12%\n(0.09%)\n142942×"];
	"NavEKF2_core::setWindMagStateLearningMode()" -> "NavEKF2_core::alignMagStateDeclination()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::setWindMagStateLearningMode()" -> "NavEKF2_core::use_compass() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n142942×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::setup_core(unsigned char, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::setup_core(unsigned char, unsigned char)\n0.00%\n(0.00%)\n2×"];
	"NavEKF2_core::setup_core(unsigned char, unsigned char)" -> "AP::ins()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::setup_core(unsigned char, unsigned char)" -> "__memset_avx2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::setup_core(unsigned char, unsigned char)" -> "operator new[](unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n20×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::updateFilterStatus()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::updateFilterStatus()\n0.13%\n(0.06%)\n35734×"];
	"NavEKF2_core::updateFilterStatus()" -> "NavEKF2_core::healthy() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n71468×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::updateTimingStatistics()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::updateTimingStatistics()\n0.01%\n(0.01%)\n35784×"];
	"NavEKF2_core::useAirspeed() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::useAirspeed() const\n0.00%\n(0.00%)\n32378×"];
	"NavEKF2_core::use_compass() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::use_compass() const\n0.05%\n(0.04%)\n256100×"];
	"NavEKF2_core::use_compass() const" -> "Compass::use_for_yaw(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n256100×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::zeroAttCovOnly()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::zeroAttCovOnly()\n0.00%\n(0.00%)\n4×"];
	"NavEKF2_core::zeroCols(float (&) [24][24], unsigned char, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::zeroCols(float (&) [24][24], unsigned char, unsigned char)\n0.00%\n(0.00%)\n14×"];
	"NavEKF2_core::zeroCols(float (&) [24][24], unsigned char, unsigned char)" -> "__memset_avx2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n336×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF2_core::zeroRows(float (&) [24][24], unsigned char, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF2_core::zeroRows(float (&) [24][24], unsigned char, unsigned char)\n0.00%\n(0.00%)\n14×"];
	"NavEKF3::InitialiseFilter()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF3::InitialiseFilter()\n0.00%\n(0.00%)\n71670×"];
	"NavEKF3::Log_Write()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF3::Log_Write()\n0.00%\n(0.00%)\n1740×"];
	"NavEKF3::NavEKF3()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF3::NavEKF3()\n0.00%\n(0.00%)\n1×"];
	"NavEKF3::NavEKF3()" -> "AP::ahrs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF3::NavEKF3()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF3::NavEKF3()" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NavEKF3::resetHeightDatum()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF3::resetHeightDatum()\n0.00%\n(0.00%)\n1×"];
	"NavEKF3::setTakeoffExpected(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF3::setTakeoffExpected(bool)\n0.00%\n(0.00%)\n9008×"];
	"NavEKF3::setTouchdownExpected(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF3::setTouchdownExpected(bool)\n0.00%\n(0.00%)\n9008×"];
	"NavEKF_core_common::fill_scratch_variables()" [color="#0d1a77", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNavEKF_core_common::fill_scratch_variables()\n3.15%\n(0.02%)\n142942×"];
	"NavEKF_core_common::fill_scratch_variables()" -> "fill_nanf(float*, unsigned short)" [arrowsize="0.35", color="#0d1a77", fontcolor="#0d1a77", fontsize="10.00", label="3.13%\n571768×", labeldistance="0.50", penwidth="0.50"];
	"NotchFilter<Vector3<float> >::calculate_A_and_Q(float, float, float, float&, float&)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNotchFilter<Vector3<float> >::calculate_A_and_Q(float, float, float, float&, float&)\n0.38%\n(0.02%)\n44264×"];
	"NotchFilter<Vector3<float> >::calculate_A_and_Q(float, float, float, float&, float&)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"NotchFilter<Vector3<float> >::calculate_A_and_Q(float, float, float, float&, float&)" -> log2f [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n44263×", labeldistance="0.50", penwidth="0.50"];
	"NotchFilter<Vector3<float> >::calculate_A_and_Q(float, float, float, float&, float&)" -> powf [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.33%\n132792×", labeldistance="0.50", penwidth="0.50"];
	"NotchFilter<Vector3<float> >::init(float, float, float, float)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNotchFilter<Vector3<float> >::init(float, float, float, float)\n0.22%\n(0.01%)\n22286×"];
	"NotchFilter<Vector3<float> >::init(float, float, float, float)" -> "NotchFilter<Vector3<float> >::calculate_A_and_Q(float, float, float, float&, float&)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.19%\n22286×", labeldistance="0.50", penwidth="0.50"];
	"NotchFilter<Vector3<float> >::init(float, float, float, float)" -> "NotchFilter<Vector3<float> >::init_with_A_and_Q(float, float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n22286×", labeldistance="0.50", penwidth="0.50"];
	"NotchFilter<Vector3<float> >::init_with_A_and_Q(float, float, float, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNotchFilter<Vector3<float> >::init_with_A_and_Q(float, float, float, float)\n0.06%\n(0.04%)\n66242×"];
	"NotchFilter<Vector3<float> >::init_with_A_and_Q(float, float, float, float)" -> sincosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n66242×", labeldistance="0.50", penwidth="0.50"];
	"NotchFilterParams::NotchFilterParams()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nNotchFilterParams::NotchFilterParams()\n0.00%\n(0.00%)\n2×"];
	"NotchFilterParams::NotchFilterParams()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"OpticalFlow::OpticalFlow()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nOpticalFlow::OpticalFlow()\n0.00%\n(0.00%)\n1×"];
	"OpticalFlow::OpticalFlow()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"OpticalFlow::init(unsigned int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nOpticalFlow::init(unsigned int)\n0.00%\n(0.00%)\n1×"];
	"OpticalFlow::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nOpticalFlow::update()\n0.00%\n(0.00%)\n36035×"];
	"ParametersG2::ParametersG2()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nParametersG2::ParametersG2()\n0.00%\n(0.00%)\n1×"];
	"ParametersG2::ParametersG2()" -> "AP_Beacon::AP_Beacon(AP_SerialManager&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ParametersG2::ParametersG2()" -> "AP_Follow::AP_Follow()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ParametersG2::ParametersG2()" -> "AP_Gripper::AP_Gripper()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ParametersG2::ParametersG2()" -> "AP_OAPathPlanner::AP_OAPathPlanner()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ParametersG2::ParametersG2()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ParametersG2::ParametersG2()" -> "AP_Proximity::AP_Proximity()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ParametersG2::ParametersG2()" -> "AP_Scripting::AP_Scripting()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ParametersG2::ParametersG2()" -> "AP_SmartRTL::AP_SmartRTL(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ParametersG2::ParametersG2()" -> "AP_Stats::AP_Stats()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ParametersG2::ParametersG2()" -> "RC_Channel::RC_Channel()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n16×", labeldistance="0.50", penwidth="0.50"];
	"ParametersG2::ParametersG2()" -> "RC_Channels::RC_Channels()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ParametersG2::ParametersG2()" -> "SRV_Channels::SRV_Channels()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"Quaternion::angular_difference(Quaternion const&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nQuaternion::angular_difference(Quaternion const&) const\n0.00%\n(0.00%)\n19×"];
	"Quaternion::angular_difference(Quaternion const&) const" -> "Quaternion::operator*(Quaternion const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n19×", labeldistance="0.50", penwidth="0.50"];
	"Quaternion::from_axis_angle(Vector3<float> const&, float)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nQuaternion::from_axis_angle(Vector3<float> const&, float)\n0.24%\n(0.13%)\n469572×"];
	"Quaternion::from_axis_angle(Vector3<float> const&, float)" -> sincosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.11%\n447136×", labeldistance="0.50", penwidth="0.50"];
	"Quaternion::from_axis_angle(Vector3<float>)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nQuaternion::from_axis_angle(Vector3<float>)\n0.40%\n(0.10%)\n421357×"];
	"Quaternion::from_axis_angle(Vector3<float>)" -> "Quaternion::from_axis_angle(Vector3<float> const&, float)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.21%\n397502×", labeldistance="0.50", penwidth="0.50"];
	"Quaternion::from_axis_angle(Vector3<float>)" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n421357×", labeldistance="0.50", penwidth="0.50"];
	"Quaternion::from_axis_angle(Vector3<float>)" -> "Vector3<float>::operator/=(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n397502×", labeldistance="0.50", penwidth="0.50"];
	"Quaternion::from_euler(float, float, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nQuaternion::from_euler(float, float, float)\n0.00%\n(0.00%)\n6×"];
	"Quaternion::from_euler(float, float, float)" -> sincosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18×", labeldistance="0.50", penwidth="0.50"];
	"Quaternion::from_rotation_matrix(Matrix3<float> const&)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nQuaternion::from_rotation_matrix(Matrix3<float> const&)\n0.21%\n(0.21%)\n731834×"];
	"Quaternion::get_euler_roll() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nQuaternion::get_euler_roll() const\n0.17%\n(0.02%)\n147940×"];
	"Quaternion::get_euler_roll() const" -> atan2f [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.15%\n147940×", labeldistance="0.50", penwidth="0.50"];
	"Quaternion::get_euler_yaw() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nQuaternion::get_euler_yaw() const\n0.18%\n(0.02%)\n147940×"];
	"Quaternion::get_euler_yaw() const" -> atan2f [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.16%\n147940×", labeldistance="0.50", penwidth="0.50"];
	"Quaternion::inverse() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nQuaternion::inverse() const\n0.10%\n(0.10%)\n468154×"];
	"Quaternion::length() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nQuaternion::length() const\n0.16%\n(0.16%)\n1159885×"];
	"Quaternion::normalize()" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nQuaternion::normalize()\n0.41%\n(0.25%)\n1159885×"];
	"Quaternion::normalize()" -> "Quaternion::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.16%\n1159885×", labeldistance="0.50", penwidth="0.50"];
	"Quaternion::operator*(Quaternion const&) const" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nQuaternion::operator*(Quaternion const&) const\n0.39%\n(0.39%)\n653064×"];
	"Quaternion::operator*=(Quaternion const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nQuaternion::operator*=(Quaternion const&)\n0.17%\n(0.17%)\n344988×"];
	"Quaternion::operator/(Quaternion const&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nQuaternion::operator/(Quaternion const&) const\n0.15%\n(0.15%)\n255407×"];
	"Quaternion::rotate(Vector3<float> const&)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nQuaternion::rotate(Vector3<float> const&)\n0.34%\n(0.04%)\n202046×"];
	"Quaternion::rotate(Vector3<float> const&)" -> "Quaternion::from_axis_angle(Vector3<float>)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.20%\n202046×", labeldistance="0.50", penwidth="0.50"];
	"Quaternion::rotate(Vector3<float> const&)" -> "Quaternion::operator*=(Quaternion const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.10%\n202046×", labeldistance="0.50", penwidth="0.50"];
	"Quaternion::rotation_matrix(Matrix3<float>&) const" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nQuaternion::rotation_matrix(Matrix3<float>&) const\n0.29%\n(0.29%)\n537675×"];
	"Quaternion::to_axis_angle(Vector3<float>&)" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nQuaternion::to_axis_angle(Vector3<float>&)\n0.65%\n(0.15%)\n399612×"];
	"Quaternion::to_axis_angle(Vector3<float>&)" -> "Vector3<float>::operator*=(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n343266×", labeldistance="0.50", penwidth="0.50"];
	"Quaternion::to_axis_angle(Vector3<float>&)" -> "Vector3<float>::operator/=(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n343266×", labeldistance="0.50", penwidth="0.50"];
	"Quaternion::to_axis_angle(Vector3<float>&)" -> atan2f [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.29%\n343266×", labeldistance="0.50", penwidth="0.50"];
	"Quaternion::to_axis_angle(Vector3<float>&)" -> "float wrap_PI<float>(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.14%\n343266×", labeldistance="0.50", penwidth="0.50"];
	"Quaternion::to_euler(float&, float&, float&) const" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nQuaternion::to_euler(float&, float&, float&) const\n0.47%\n(0.04%)\n147940×"];
	"Quaternion::to_euler(float&, float&, float&) const" -> "Quaternion::get_euler_roll() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.17%\n147940×", labeldistance="0.50", penwidth="0.50"];
	"Quaternion::to_euler(float&, float&, float&) const" -> "Quaternion::get_euler_yaw() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.18%\n147940×", labeldistance="0.50", penwidth="0.50"];
	"Quaternion::to_euler(float&, float&, float&) const" -> "float safe_asin<float>(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n147940×", labeldistance="0.50", penwidth="0.50"];
	"Quaternion::to_vector312() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nQuaternion::to_vector312() const\n0.00%\n(0.00%)\n30×"];
	"Quaternion::to_vector312() const" -> "Matrix3<float>::to_euler312() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n30×", labeldistance="0.50", penwidth="0.50"];
	"Quaternion::to_vector312() const" -> "Quaternion::rotation_matrix(Matrix3<float>&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n30×", labeldistance="0.50", penwidth="0.50"];
	"RCMapper::RCMapper()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRCMapper::RCMapper()\n0.00%\n(0.00%)\n1×"];
	"RCMapper::RCMapper()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channel::RC_Channel()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channel::RC_Channel()\n0.00%\n(0.00%)\n16×"];
	"RC_Channel::RC_Channel()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n16×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channel::get_control_in_zero_dz() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channel::get_control_in_zero_dz() const\n0.00%\n(0.00%)\n9010×"];
	"RC_Channel::get_control_in_zero_dz() const" -> "short constrain_value<short>(short, short, short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9010×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channel::get_control_mid() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channel::get_control_mid() const\n0.01%\n(0.01%)\n22700×"];
	"RC_Channel::has_override() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channel::has_override() const\n0.01%\n(0.01%)\n144128×"];
	"RC_Channel::in_trim_dz() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channel::in_trim_dz() const\n0.00%\n(0.00%)\n3×"];
	"RC_Channel::in_trim_dz() const" -> "is_bounded_int32(int, int, int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channel::init_aux()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channel::init_aux()\n0.00%\n(0.00%)\n16×"];
	"RC_Channel::init_aux()" -> "RC_Channel_Copter::init_aux_function(RC_Channel::AUX_FUNC, RC_Channel::aux_switch_pos_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n16×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channel::init_aux_function(RC_Channel::AUX_FUNC, RC_Channel::aux_switch_pos_t)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channel::init_aux_function(RC_Channel::AUX_FUNC, RC_Channel::aux_switch_pos_t)\n0.00%\n(0.00%)\n15×"];
	"RC_Channel::norm_input() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channel::norm_input() const\n0.01%\n(0.01%)\n27030×"];
	"RC_Channel::norm_input() const" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n27030×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channel::read_aux()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channel::read_aux()\n0.00%\n(0.00%)\n28832×"];
	"RC_Channel::read_aux()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channel::read_aux()" -> "RC_Channel_Copter::do_aux_function(RC_Channel::AUX_FUNC, RC_Channel::aux_switch_pos_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channel::read_mode_switch()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channel::read_mode_switch()\n0.00%\n(0.00%)\n18017×"];
	"RC_Channel::read_mode_switch()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n21×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channel::read_mode_switch()" -> "RC_Channel_Copter::mode_switch_changed(signed char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channel::reset_mode_switch()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channel::reset_mode_switch()\n0.00%\n(0.00%)\n1×"];
	"RC_Channel::set_angle(unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channel::set_angle(unsigned short)\n0.00%\n(0.00%)\n3×"];
	"RC_Channel::set_default_dead_zone(short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channel::set_default_dead_zone(short)\n0.00%\n(0.00%)\n5×"];
	"RC_Channel::set_default_dead_zone(short)" -> "AP_Param::configured() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channel::set_range(unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channel::set_range(unsigned short)\n0.00%\n(0.00%)\n1×"];
	"RC_Channel::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channel::update()\n0.11%\n(0.06%)\n144160×"];
	"RC_Channel::update()" -> "HALSITL::RCInput::read(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n144160×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channel::update()" -> "rc()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n144160×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channel::update()" -> "short constrain_value<short>(short, short, short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9010×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channel_Copter::do_aux_function(RC_Channel::AUX_FUNC, RC_Channel::aux_switch_pos_t)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channel_Copter::do_aux_function(RC_Channel::AUX_FUNC, RC_Channel::aux_switch_pos_t)\n0.00%\n(0.00%)\n1×"];
	"RC_Channel_Copter::init_aux_function(RC_Channel::AUX_FUNC, RC_Channel::aux_switch_pos_t)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channel_Copter::init_aux_function(RC_Channel::AUX_FUNC, RC_Channel::aux_switch_pos_t)\n0.00%\n(0.00%)\n16×"];
	"RC_Channel_Copter::init_aux_function(RC_Channel::AUX_FUNC, RC_Channel::aux_switch_pos_t)" -> "RC_Channel::init_aux_function(RC_Channel::AUX_FUNC, RC_Channel::aux_switch_pos_t)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channel_Copter::mode_switch_changed(signed char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channel_Copter::mode_switch_changed(signed char)\n0.00%\n(0.00%)\n1×"];
	"RC_Channel_Copter::mode_switch_changed(signed char)" -> "Copter::set_mode(Mode::Number, ModeReason)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channel_Copter::mode_switch_changed(signed char)" -> "Copter::set_simple_mode(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channel_Copter::mode_switch_changed(signed char)" -> "RC_Channels::find_channel_for_option(RC_Channel::AUX_FUNC)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channel_Copter::mode_switch_changed(signed char)" -> "rc()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::RC_Channels()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channels::RC_Channels()\n0.00%\n(0.00%)\n1×"];
	"RC_Channels::RC_Channels()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::duplicate_options_exist()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channels::duplicate_options_exist()\n0.00%\n(0.00%)\n7×"];
	"RC_Channels::duplicate_options_exist()" -> "RC_Channels_Copter::channel(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n112×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::find_channel_for_option(RC_Channel::AUX_FUNC)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channels::find_channel_for_option(RC_Channel::AUX_FUNC)\n0.01%\n(0.00%)\n1819×"];
	"RC_Channels::find_channel_for_option(RC_Channel::AUX_FUNC)" -> "RC_Channels_Copter::channel(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n29104×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::get_radio_in(unsigned short*, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channels::get_radio_in(unsigned short*, unsigned char)\n0.01%\n(0.00%)\n2462×"];
	"RC_Channels::get_radio_in(unsigned short*, unsigned char)" -> "RC_Channels_Copter::channel(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n35910×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::get_valid_channel_count()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channels::get_valid_channel_count()\n0.00%\n(0.00%)\n730×"];
	"RC_Channels::get_valid_channel_count()" -> "HALSITL::RCInput::num_channels()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n730×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::has_active_overrides()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channels::has_active_overrides()\n0.03%\n(0.02%)\n9008×"];
	"RC_Channels::has_active_overrides()" -> "RC_Channel::has_override() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n144128×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::has_active_overrides()" -> "RC_Channels_Copter::channel(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n144128×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channels::init()\n0.00%\n(0.00%)\n1×"];
	"RC_Channels::init()" -> "RC_Channel::init_aux()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n16×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::init()" -> "RC_Channel::reset_mode_switch()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::init()" -> "RC_Channels_Copter::channel(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n33×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::init()" -> "RC_Channels_Copter::flight_mode_channel_number() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::read_aux_all()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channels::read_aux_all()\n0.01%\n(0.00%)\n1802×"];
	"RC_Channels::read_aux_all()" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::read_aux_all()" -> "AP_Logger::Write_RCIN()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::read_aux_all()" -> "RC_Channel::read_aux()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n28832×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::read_aux_all()" -> "RC_Channels_Copter::channel(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n28832×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::read_aux_all()" -> "RC_Channels_Copter::has_valid_input() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::read_input()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channels::read_input()\n0.16%\n(0.02%)\n18018×"];
	"RC_Channels::read_input()" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9010×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::read_input()" -> "HALSITL::RCInput::new_input()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n18018×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::read_input()" -> "RC_Channel::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.11%\n144160×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::read_input()" -> "RC_Channels_Copter::channel(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n144160×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::read_mode_switch()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channels::read_mode_switch()\n0.01%\n(0.00%)\n18017×"];
	"RC_Channels::read_mode_switch()" -> "RC_Channel::read_mode_switch()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18017×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::read_mode_switch()" -> "RC_Channels_Copter::channel(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18017×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::read_mode_switch()" -> "RC_Channels_Copter::flight_mode_channel_number() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18017×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels::read_mode_switch()" -> "RC_Channels_Copter::has_valid_input() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18017×", labeldistance="0.50", penwidth="0.50"];
	"RC_Channels_Copter::channel(unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channels_Copter::channel(unsigned char)\n0.03%\n(0.03%)\n400443×"];
	"RC_Channels_Copter::flight_mode_channel_number() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channels_Copter::flight_mode_channel_number() const\n0.00%\n(0.00%)\n18018×"];
	"RC_Channels_Copter::has_valid_input() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRC_Channels_Copter::has_valid_input() const\n0.00%\n(0.00%)\n19820×"];
	"RGBLed::RGBLed(unsigned char, unsigned char, unsigned char, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRGBLed::RGBLed(unsigned char, unsigned char, unsigned char, unsigned char)\n0.00%\n(0.00%)\n7×"];
	"RGBLed::init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRGBLed::init()\n0.00%\n(0.00%)\n7×"];
	"RGBLed::init()" -> "NCP5623::hw_init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"RGBLed::init()" -> "ToshibaLED_I2C::hw_init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"RangeFinder::Log_RFND()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRangeFinder::Log_RFND()\n0.00%\n(0.00%)\n3603×"];
	"RangeFinder::Log_RFND()" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3603×", labeldistance="0.50", penwidth="0.50"];
	"RangeFinder::Log_RFND()" -> "AP_Logger::should_log(unsigned int) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3603×", labeldistance="0.50", penwidth="0.50"];
	"RangeFinder::RangeFinder()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRangeFinder::RangeFinder()\n0.00%\n(0.00%)\n1×"];
	"RangeFinder::RangeFinder()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"RangeFinder::RangeFinder()" -> "AP_RangeFinder_Params::AP_RangeFinder_Params()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10×", labeldistance="0.50", penwidth="0.50"];
	"RangeFinder::convert_params()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRangeFinder::convert_params()\n0.00%\n(0.00%)\n1×"];
	"RangeFinder::convert_params()" -> "AP_Param::configured_in_storage() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"RangeFinder::detect_instance(unsigned char, unsigned char&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRangeFinder::detect_instance(unsigned char, unsigned char&)\n0.00%\n(0.00%)\n10×"];
	"RangeFinder::distance_cm_orient(Rotation) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRangeFinder::distance_cm_orient(Rotation) const\n0.00%\n(0.00%)\n7206×"];
	"RangeFinder::distance_cm_orient(Rotation) const" -> "RangeFinder::find_instance(Rotation) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7206×", labeldistance="0.50", penwidth="0.50"];
	"RangeFinder::find_instance(Rotation) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRangeFinder::find_instance(Rotation) const\n0.01%\n(0.01%)\n48234×"];
	"RangeFinder::get_backend(unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRangeFinder::get_backend(unsigned char) const\n0.00%\n(0.00%)\n19126×"];
	"RangeFinder::ground_clearance_cm_orient(Rotation) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRangeFinder::ground_clearance_cm_orient(Rotation) const\n0.01%\n(0.00%)\n32378×"];
	"RangeFinder::ground_clearance_cm_orient(Rotation) const" -> "RangeFinder::find_instance(Rotation) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n32378×", labeldistance="0.50", penwidth="0.50"];
	"RangeFinder::has_orientation(Rotation) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRangeFinder::has_orientation(Rotation) const\n0.00%\n(0.00%)\n723×"];
	"RangeFinder::has_orientation(Rotation) const" -> "RangeFinder::find_instance(Rotation) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n723×", labeldistance="0.50", penwidth="0.50"];
	"RangeFinder::init(Rotation)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRangeFinder::init(Rotation)\n0.01%\n(0.00%)\n1×"];
	"RangeFinder::init(Rotation)" -> "AP_Param::configured() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n10×", labeldistance="0.50", penwidth="0.50"];
	"RangeFinder::init(Rotation)" -> "RangeFinder::convert_params()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"RangeFinder::init(Rotation)" -> "RangeFinder::detect_instance(unsigned char, unsigned char&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10×", labeldistance="0.50", penwidth="0.50"];
	"RangeFinder::prearm_healthy(char*, unsigned char) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRangeFinder::prearm_healthy(char*, unsigned char) const\n0.00%\n(0.00%)\n7×"];
	"RangeFinder::status_orient(Rotation) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRangeFinder::status_orient(Rotation) const\n0.00%\n(0.00%)\n7206×"];
	"RangeFinder::status_orient(Rotation) const" -> "RangeFinder::find_instance(Rotation) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7206×", labeldistance="0.50", penwidth="0.50"];
	"RangeFinder::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nRangeFinder::update()\n0.00%\n(0.00%)\n3603×"];
	"RangeFinder::update()" -> "RangeFinder::Log_RFND()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3603×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::Aircraft(char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Aircraft::Aircraft(char const*)\n0.00%\n(0.00%)\n1×"];
	"SITL::Aircraft::Aircraft(char const*)" -> "AP::sitl()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::Aircraft(char const*)" -> "AP_Param::find(char const*, ap_var_type*, unsigned short*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::Aircraft(char const*)" -> "AP_Param::find_object(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::Aircraft(char const*)" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::Aircraft(char const*)" -> "LowPassFilter<float>::LowPassFilter()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::Aircraft(char const*)" -> "Matrix3<float>::from_rotation(Rotation)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::Aircraft(char const*)" -> "Matrix3<float>::transposed() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::Aircraft(char const*)" -> "__gettimeofday_syscall" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::add_shove_forces(Vector3<float>&, Vector3<float>&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Aircraft::add_shove_forces(Vector3<float>&, Vector3<float>&)\n0.07%\n(0.03%)\n219332×"];
	"SITL::Aircraft::add_shove_forces(Vector3<float>&, Vector3<float>&)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::add_twist_forces(Vector3<float>&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Aircraft::add_twist_forces(Vector3<float>&)\n0.08%\n(0.05%)\n219332×"];
	"SITL::Aircraft::add_twist_forces(Vector3<float>&)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::fill_fdm(SITL::sitl_fdm&)" [color="#0d247a", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Aircraft::fill_fdm(SITL::sitl_fdm&)\n5.45%\n(0.50%)\n219332×"];
	"SITL::Aircraft::fill_fdm(SITL::sitl_fdm&)" -> "Matrix3<float>::to_euler(float*, float*, float*) const" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.66%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::fill_fdm(SITL::sitl_fdm&)" -> "Quaternion::from_rotation_matrix(Matrix3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::fill_fdm(SITL::sitl_fdm&)" -> "SITL::Aircraft::smooth_sensors()" [arrowsize="0.35", color="#0d1e78", fontcolor="#0d1e78", fontsize="10.00", label="3.97%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::fill_fdm(SITL::sitl_fdm&)" -> "__gettimeofday_syscall" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::fill_fdm(SITL::sitl_fdm&)" -> atan2f [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.24%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::fill_fdm(SITL::sitl_fdm&)" -> "std::enable_if<std::is_floating_point<std::common_type<float, float>::type>::value, bool>::type is_equal<float, float>(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::get_local_updraft(Vector3<float>)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Aircraft::get_local_updraft(Vector3<float>)\n0.04%\n(0.04%)\n219332×"];
	"SITL::Aircraft::rand_normal(double, double)" [color="#0d1575", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Aircraft::rand_normal(double, double)\n2.07%\n(0.46%)\n1315992×"];
	"SITL::Aircraft::rand_normal(double, double)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::rand_normal(double, double)" -> log [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.87%\n657995×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::rand_normal(double, double)" -> rand [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.74%\n1677141×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::set_precland(SITL::SIM_Precland*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Aircraft::set_precland(SITL::SIM_Precland*)\n0.00%\n(0.00%)\n1×"];
	"SITL::Aircraft::set_precland(SITL::SIM_Precland*)" -> "SITL::SIM_Precland::set_default_location(float, float, short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::set_speedup(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Aircraft::set_speedup(float)\n0.00%\n(0.00%)\n1×"];
	"SITL::Aircraft::set_speedup(float)" -> "__gettimeofday_syscall" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::smooth_sensors()" [color="#0d1e78", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Aircraft::smooth_sensors()\n3.97%\n(0.47%)\n219332×"];
	"SITL::Aircraft::smooth_sensors()" -> "Location::offset(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n219331×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::smooth_sensors()" -> "Matrix3<float>::normalize()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.42%\n219331×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::smooth_sensors()" -> "Matrix3<float>::operator*(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n438662×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::smooth_sensors()" -> "Matrix3<float>::rotate(Vector3<float> const&)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.27%\n219331×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::smooth_sensors()" -> "Matrix3<float>::to_euler(float*, float*, float*) const" [arrowsize="0.35", color="#0d1274", fontcolor="#0d1274", fontsize="10.00", label="1.32%\n438662×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::smooth_sensors()" -> "Matrix3<float>::transposed() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n219331×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::smooth_sensors()" -> "Quaternion::from_rotation_matrix(Matrix3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.13%\n438662×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::smooth_sensors()" -> "Quaternion::normalize()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.23%\n657993×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::smooth_sensors()" -> "Quaternion::operator/(Quaternion const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.13%\n219331×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::smooth_sensors()" -> "Quaternion::to_axis_angle(Vector3<float>&)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.34%\n219331×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::smooth_sensors()" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n219331×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::smooth_sensors()" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n657993×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::smooth_sensors()" -> "Vector3<float>::operator+(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.10%\n1096655×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::smooth_sensors()" -> "Vector3<float>::operator+=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n438662×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::smooth_sensors()" -> "Vector3<float>::operator-(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n438663×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::smooth_sensors()" -> "Vector3<float>::operator/(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n657993×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::smooth_sensors()" -> "__printf_chk" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::smooth_sensors()" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n657993×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::time_advance()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Aircraft::time_advance()\n0.08%\n(0.07%)\n219332×"];
	"SITL::Aircraft::time_advance()" -> "__gettimeofday_syscall" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::time_advance()" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::time_advance()" -> usleep [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5465×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_dynamics(Vector3<float> const&)" [color="#0d247a", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Aircraft::update_dynamics(Vector3<float> const&)\n5.35%\n(0.58%)\n219332×"];
	"SITL::Aircraft::update_dynamics(Vector3<float> const&)" -> "AP_Terrain::height_amsl(Location const&, float&, bool)" [arrowsize="0.35", color="#0d1b77", fontcolor="#0d1b77", fontsize="10.00", label="3.41%\n1336420×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_dynamics(Vector3<float> const&)" -> "Matrix3<float>::from_euler(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n16526×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_dynamics(Vector3<float> const&)" -> "Matrix3<float>::normalize()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.42%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_dynamics(Vector3<float> const&)" -> "Matrix3<float>::operator*(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.17%\n657996×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_dynamics(Vector3<float> const&)" -> "Matrix3<float>::rotate(Vector3<float> const&)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.27%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_dynamics(Vector3<float> const&)" -> "Matrix3<float>::to_euler(float*, float*, float*) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n16526×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_dynamics(Vector3<float> const&)" -> "Matrix3<float>::transposed() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n438664×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_dynamics(Vector3<float> const&)" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_dynamics(Vector3<float> const&)" -> "Vector3<float>::operator*(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_dynamics(Vector3<float> const&)" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n877328×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_dynamics(Vector3<float> const&)" -> "Vector3<float>::operator+(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n438664×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_dynamics(Vector3<float> const&)" -> "Vector3<float>::operator+=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.09%\n877328×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_dynamics(Vector3<float> const&)" -> "Vector3<float>::operator-(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_dynamics(Vector3<float> const&)" -> "Vector3<float>::operator/(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_dynamics(Vector3<float> const&)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n877328×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_external_payload(sitl_input const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Aircraft::update_external_payload(sitl_input const&)\n0.10%\n(0.10%)\n219332×"];
	"SITL::Aircraft::update_mag_field_bf()" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Aircraft::update_mag_field_bf()\n1.03%\n(0.19%)\n219332×"];
	"SITL::Aircraft::update_mag_field_bf()" -> "AP_Declination::get_mag_field_ef(float, float, float&, float&, float&)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.20%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_mag_field_bf()" -> "Matrix3<float>::from_euler(float, float, float)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.39%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_mag_field_bf()" -> "Matrix3<float>::operator*(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n438664×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_mag_field_bf()" -> "Matrix3<float>::transposed() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_mag_field_bf()" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n438664×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_mag_field_bf()" -> "Vector3<float>::operator+=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n438664×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_mag_field_bf()" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_mag_field_bf()" -> fmaxf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n219331×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_model(sitl_input const&)" [color="#0d4a83", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Aircraft::update_model(sitl_input const&)\n12.89%\n(0.04%)\n219332×"];
	"SITL::Aircraft::update_model(sitl_input const&)" -> "Location::Location()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_model(sitl_input const&)" -> "Matrix3<float>::from_euler(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_model(sitl_input const&)" -> "SITL::MultiCopter::update(sitl_input const&)" [arrowsize="0.36", color="#0d4a83", fontcolor="#0d4a83", fontsize="10.00", label="12.84%\n219332×", labeldistance="0.51", penwidth="0.51"];
	"SITL::Aircraft::update_model(sitl_input const&)" -> "__printf_chk" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_position()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Aircraft::update_position()\n0.16%\n(0.04%)\n219332×"];
	"SITL::Aircraft::update_position()" -> "Location::offset(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_wind(sitl_input const&)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Aircraft::update_wind(sitl_input const&)\n0.33%\n(0.12%)\n219332×"];
	"SITL::Aircraft::update_wind(sitl_input const&)" -> "SITL::Aircraft::get_local_updraft(Vector3<float>)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_wind(sitl_input const&)" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Aircraft::update_wind(sitl_input const&)" -> sincosf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.16%\n438664×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Buzzer::Buzzer()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Buzzer::Buzzer()\n0.00%\n(0.00%)\n1×"];
	"SITL::EFI_MegaSquirt::update()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::EFI_MegaSquirt::update()\n0.03%\n(0.03%)\n219332×"];
	"SITL::EFI_MegaSquirt::update()" -> "AP::sitl()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::FGNetFDM::ByteSwap()" [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::FGNetFDM::ByteSwap()\n1.29%\n(1.29%)\n219332×"];
	"SITL::Frame::calculate_forces(SITL::Aircraft const&, sitl_input const&, Vector3<float>&, Vector3<float>&, float*)" [color="#0d2279", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Frame::calculate_forces(SITL::Aircraft const&, sitl_input const&, Vector3<float>&, Vector3<float>&, float*)\n4.87%\n(0.63%)\n219332×"];
	"SITL::Frame::calculate_forces(SITL::Aircraft const&, sitl_input const&, Vector3<float>&, Vector3<float>&, float*)" -> "AP::sitl()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n877328×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Frame::calculate_forces(SITL::Aircraft const&, sitl_input const&, Vector3<float>&, Vector3<float>&, float*)" -> "Matrix3<float>::operator*(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Frame::calculate_forces(SITL::Aircraft const&, sitl_input const&, Vector3<float>&, Vector3<float>&, float*)" -> "Matrix3<float>::transposed() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Frame::calculate_forces(SITL::Aircraft const&, sitl_input const&, Vector3<float>&, Vector3<float>&, float*)" -> "SITL::Aircraft::rand_normal(double, double)" [arrowsize="0.35", color="#0d1575", fontcolor="#0d1575", fontsize="10.00", label="2.07%\n1315992×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Frame::calculate_forces(SITL::Aircraft const&, sitl_input const&, Vector3<float>&, Vector3<float>&, float*)" -> "SITL::Motor::calculate_forces(sitl_input const&, float, unsigned char, Vector3<float>&, Vector3<float>&)" [arrowsize="0.35", color="#0d1475", fontcolor="#0d1475", fontsize="10.00", label="1.65%\n877328×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Frame::calculate_forces(SITL::Aircraft const&, sitl_input const&, Vector3<float>&, Vector3<float>&, float*)" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Frame::calculate_forces(SITL::Aircraft const&, sitl_input const&, Vector3<float>&, Vector3<float>&, float*)" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.09%\n1096660×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Frame::calculate_forces(SITL::Aircraft const&, sitl_input const&, Vector3<float>&, Vector3<float>&, float*)" -> "Vector3<float>::operator+=(Vector3<float> const&)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.25%\n2412652×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Frame::calculate_forces(SITL::Aircraft const&, sitl_input const&, Vector3<float>&, Vector3<float>&, float*)" -> "Vector3<float>::operator-() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Frame::calculate_forces(SITL::Aircraft const&, sitl_input const&, Vector3<float>&, Vector3<float>&, float*)" -> "Vector3<float>::operator/(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Frame::current_and_voltage(sitl_input const&, float&, float&)" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Frame::current_and_voltage(sitl_input const&, float&, float&)\n0.65%\n(0.23%)\n219332×"];
	"SITL::Frame::current_and_voltage(sitl_input const&, float&, float&)" -> "SITL::Motor::current_and_voltage(sitl_input const&, float&, float&, unsigned char)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.42%\n877328×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Frame::find_frame(char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Frame::find_frame(char const*)\n0.00%\n(0.00%)\n1×"];
	"SITL::Frame::find_frame(char const*)" -> "__strncasecmp_avx" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Frame::find_frame(char const*)" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Frame::init(float, float, float, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Frame::init(float, float, float, float)\n0.00%\n(0.00%)\n1×"];
	"SITL::Motor::calculate_forces(sitl_input const&, float, unsigned char, Vector3<float>&, Vector3<float>&)" [color="#0d1475", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Motor::calculate_forces(sitl_input const&, float, unsigned char, Vector3<float>&, Vector3<float>&)\n1.65%\n(0.74%)\n877328×"];
	"SITL::Motor::calculate_forces(sitl_input const&, float, unsigned char, Vector3<float>&, Vector3<float>&)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n877328×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Motor::calculate_forces(sitl_input const&, float, unsigned char, Vector3<float>&, Vector3<float>&)" -> "Vector3<float>::operator%(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.17%\n877328×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Motor::calculate_forces(sitl_input const&, float, unsigned char, Vector3<float>&, Vector3<float>&)" -> "Vector3<float>::operator*(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n877328×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Motor::calculate_forces(sitl_input const&, float, unsigned char, Vector3<float>&, Vector3<float>&)" -> "Vector3<float>::operator+(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n877328×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Motor::calculate_forces(sitl_input const&, float, unsigned char, Vector3<float>&, Vector3<float>&)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n877328×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Motor::calculate_forces(sitl_input const&, float, unsigned char, Vector3<float>&, Vector3<float>&)" -> sincosf [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.40%\n877328×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Motor::current_and_voltage(sitl_input const&, float&, float&, unsigned char)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::Motor::current_and_voltage(sitl_input const&, float&, float&, unsigned char)\n0.42%\n(0.32%)\n877328×"];
	"SITL::Motor::current_and_voltage(sitl_input const&, float&, float&, unsigned char)" -> "AP::sitl()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n1754656×", labeldistance="0.50", penwidth="0.50"];
	"SITL::Motor::current_and_voltage(sitl_input const&, float&, float&, unsigned char)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n877328×", labeldistance="0.50", penwidth="0.50"];
	"SITL::MultiCopter::MultiCopter(char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::MultiCopter::MultiCopter(char const*)\n0.00%\n(0.00%)\n1×"];
	"SITL::MultiCopter::MultiCopter(char const*)" -> "SITL::Aircraft::Aircraft(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SITL::MultiCopter::MultiCopter(char const*)" -> "SITL::Frame::find_frame(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SITL::MultiCopter::MultiCopter(char const*)" -> "SITL::Frame::init(float, float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SITL::MultiCopter::MultiCopter(char const*)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SITL::MultiCopter::create(char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::MultiCopter::create(char const*)\n0.00%\n(0.00%)\n1×"];
	"SITL::MultiCopter::create(char const*)" -> "SITL::MultiCopter::MultiCopter(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SITL::MultiCopter::create(char const*)" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SITL::MultiCopter::update(sitl_input const&)" [color="#0d4a83", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::MultiCopter::update(sitl_input const&)\n12.84%\n(0.11%)\n219332×"];
	"SITL::MultiCopter::update(sitl_input const&)" -> "SITL::Aircraft::add_shove_forces(Vector3<float>&, Vector3<float>&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::MultiCopter::update(sitl_input const&)" -> "SITL::Aircraft::add_twist_forces(Vector3<float>&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::MultiCopter::update(sitl_input const&)" -> "SITL::Aircraft::time_advance()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::MultiCopter::update(sitl_input const&)" -> "SITL::Aircraft::update_dynamics(Vector3<float> const&)" [arrowsize="0.35", color="#0d247a", fontcolor="#0d247a", fontsize="10.00", label="5.35%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::MultiCopter::update(sitl_input const&)" -> "SITL::Aircraft::update_external_payload(sitl_input const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.10%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::MultiCopter::update(sitl_input const&)" -> "SITL::Aircraft::update_mag_field_bf()" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.03%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::MultiCopter::update(sitl_input const&)" -> "SITL::Aircraft::update_position()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.16%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::MultiCopter::update(sitl_input const&)" -> "SITL::Aircraft::update_wind(sitl_input const&)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.33%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::MultiCopter::update(sitl_input const&)" -> "SITL::Frame::calculate_forces(SITL::Aircraft const&, sitl_input const&, Vector3<float>&, Vector3<float>&, float*)" [arrowsize="0.35", color="#0d2279", fontcolor="#0d2279", fontsize="10.00", label="4.87%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::MultiCopter::update(sitl_input const&)" -> "SITL::Frame::current_and_voltage(sitl_input const&, float&, float&)" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.65%\n219332×", labeldistance="0.50", penwidth="0.50"];
	"SITL::SIM_Precland::set_default_location(float, float, short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::SIM_Precland::set_default_location(float, float, short)\n0.00%\n(0.00%)\n1×"];
	"SITL::SITL::Log_Write_SIMSTATE()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::SITL::Log_Write_SIMSTATE()\n0.01%\n(0.00%)\n1740×"];
	"SITL::SITL::Log_Write_SIMSTATE()" -> "AP::logger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"SITL::SITL::Log_Write_SIMSTATE()" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"SITL::SITL::Log_Write_SIMSTATE()" -> "AP_Logger::WriteBlock(void const*, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"SITL::SITL::Log_Write_SIMSTATE()" -> "wrap_360_cd(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"SITL::SITL::simstate_send(mavlink_channel_t)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSITL::SITL::simstate_send(mavlink_channel_t)\n0.01%\n(0.00%)\n721×"];
	"SITL::SITL::simstate_send(mavlink_channel_t)" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"SRV_Channel::SRV_Channel()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSRV_Channel::SRV_Channel()\n0.00%\n(0.00%)\n16×"];
	"SRV_Channel::SRV_Channel()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n16×", labeldistance="0.50", penwidth="0.50"];
	"SRV_Channel::aux_servo_function_setup() [clone .part.2]" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSRV_Channel::aux_servo_function_setup() [clone .part.2]\n0.00%\n(0.00%)\n2932×"];
	"SRV_Channel::calc_pwm(short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSRV_Channel::calc_pwm(short)\n0.05%\n(0.05%)\n1153120×"];
	"SRV_Channel::set_output_pwm(unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSRV_Channel::set_output_pwm(unsigned short)\n0.02%\n(0.02%)\n288288×"];
	"SRV_Channels::SRV_Channels()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSRV_Channels::SRV_Channels()\n0.00%\n(0.00%)\n1×"];
	"SRV_Channels::SRV_Channels()" -> "AP_Param::setup_object_defaults(void const*, AP_Param::GroupInfo const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SRV_Channels::SRV_Channels()" -> "AP_RobotisServo::AP_RobotisServo()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SRV_Channels::SRV_Channels()" -> "AP_SBusOut::AP_SBusOut()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SRV_Channels::SRV_Channels()" -> "AP_Volz_Protocol::AP_Volz_Protocol()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SRV_Channels::SRV_Channels()" -> "SRV_Channel::SRV_Channel()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n16×", labeldistance="0.50", penwidth="0.50"];
	"SRV_Channels::calc_pwm()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSRV_Channels::calc_pwm()\n0.14%\n(0.09%)\n72070×"];
	"SRV_Channels::calc_pwm()" -> "SRV_Channel::calc_pwm(short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n1153120×", labeldistance="0.50", penwidth="0.50"];
	"SRV_Channels::cork()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSRV_Channels::cork()\n0.01%\n(0.00%)\n72070×"];
	"SRV_Channels::cork()" -> "HALSITL::RCOutput::cork()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"SRV_Channels::enable_aux_servos()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSRV_Channels::enable_aux_servos()\n0.00%\n(0.00%)\n181×"];
	"SRV_Channels::enable_aux_servos()" -> "HALSITL::RCOutput::enable_ch(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2896×", labeldistance="0.50", penwidth="0.50"];
	"SRV_Channels::enable_aux_servos()" -> "SRV_Channels::update_aux_servo_function()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n181×", labeldistance="0.50", penwidth="0.50"];
	"SRV_Channels::find_channel(SRV_Channel::Aux_servo_function_t, unsigned char&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSRV_Channels::find_channel(SRV_Channel::Aux_servo_function_t, unsigned char&)\n0.00%\n(0.00%)\n5×"];
	"SRV_Channels::find_channel(SRV_Channel::Aux_servo_function_t, unsigned char&)" -> "SRV_Channels::update_aux_servo_function()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SRV_Channels::function_assigned(SRV_Channel::Aux_servo_function_t)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSRV_Channels::function_assigned(SRV_Channel::Aux_servo_function_t)\n0.00%\n(0.00%)\n1806×"];
	"SRV_Channels::get_output_channel_mask(SRV_Channel::Aux_servo_function_t)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSRV_Channels::get_output_channel_mask(SRV_Channel::Aux_servo_function_t)\n0.00%\n(0.00%)\n13×"];
	"SRV_Channels::output_ch_all()" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSRV_Channels::output_ch_all()\n0.36%\n(0.23%)\n72070×"];
	"SRV_Channels::output_ch_all()" -> "HALSITL::RCOutput::write(unsigned char, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.13%\n1153120×", labeldistance="0.50", penwidth="0.50"];
	"SRV_Channels::push()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSRV_Channels::push()\n0.06%\n(0.01%)\n72070×"];
	"SRV_Channels::push()" -> "AP_RobotisServo::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"SRV_Channels::push()" -> "AP_SBusOut::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"SRV_Channels::push()" -> "AP_Volz_Protocol::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"SRV_Channels::push()" -> "HALSITL::RCOutput::push()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"SRV_Channels::set_aux_channel_default(SRV_Channel::Aux_servo_function_t, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSRV_Channels::set_aux_channel_default(SRV_Channel::Aux_servo_function_t, unsigned char)\n0.00%\n(0.00%)\n4×"];
	"SRV_Channels::set_aux_channel_default(SRV_Channel::Aux_servo_function_t, unsigned char)" -> "SRV_Channel::aux_servo_function_setup() [clone .part.2]" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"SRV_Channels::set_output_limit(SRV_Channel::Aux_servo_function_t, SRV_Channel::Limit)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSRV_Channels::set_output_limit(SRV_Channel::Aux_servo_function_t, SRV_Channel::Limit)\n0.00%\n(0.00%)\n1×"];
	"SRV_Channels::set_output_pwm(SRV_Channel::Aux_servo_function_t, unsigned short)" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSRV_Channels::set_output_pwm(SRV_Channel::Aux_servo_function_t, unsigned short)\n0.53%\n(0.49%)\n297296×"];
	"SRV_Channels::set_output_pwm(SRV_Channel::Aux_servo_function_t, unsigned short)" -> "HALSITL::RCOutput::write(unsigned char, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n288288×", labeldistance="0.50", penwidth="0.50"];
	"SRV_Channels::set_output_pwm(SRV_Channel::Aux_servo_function_t, unsigned short)" -> "SRV_Channel::set_output_pwm(unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n288288×", labeldistance="0.50", penwidth="0.50"];
	"SRV_Channels::set_output_scaled(SRV_Channel::Aux_servo_function_t, short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSRV_Channels::set_output_scaled(SRV_Channel::Aux_servo_function_t, short)\n0.03%\n(0.03%)\n360360×"];
	"SRV_Channels::update_aux_servo_function()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSRV_Channels::update_aux_servo_function()\n0.00%\n(0.00%)\n183×"];
	"SRV_Channels::update_aux_servo_function()" -> "SRV_Channel::aux_servo_function_setup() [clone .part.2]" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2928×", labeldistance="0.50", penwidth="0.50"];
	"SRV_Channels::update_aux_servo_function()" -> "__memset_avx2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n183×", labeldistance="0.50", penwidth="0.50"];
	"SRV_Channels::upgrade_parameters()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSRV_Channels::upgrade_parameters()\n0.01%\n(0.00%)\n1×"];
	"SRV_Channels::upgrade_parameters()" -> "AP_Param::convert_parameter_width(ap_var_type)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n16×", labeldistance="0.50", penwidth="0.50"];
	"SocketAPM::SocketAPM(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSocketAPM::SocketAPM(bool)\n0.00%\n(0.00%)\n3×"];
	"SocketAPM::SocketAPM(bool)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"SocketAPM::SocketAPM(bool)" -> fcntl [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"SocketAPM::SocketAPM(bool)" -> socket [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"SocketAPM::bind(char const*, unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSocketAPM::bind(char const*, unsigned short)\n0.00%\n(0.00%)\n1×"];
	"SocketAPM::bind(char const*, unsigned short)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"SocketAPM::connect(char const*, unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSocketAPM::connect(char const*, unsigned short)\n0.00%\n(0.00%)\n1×"];
	"SocketAPM::connect(char const*, unsigned short)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SocketAPM::connect(char const*, unsigned short)" -> "inet_addr" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SocketAPM::recv(void*, unsigned long, unsigned int)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSocketAPM::recv(void*, unsigned long, unsigned int)\n0.19%\n(0.16%)\n222781×"];
	"SocketAPM::recv(void*, unsigned long, unsigned int)" -> "__fdelt_chk" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n222780×", labeldistance="0.50", penwidth="0.50"];
	"SocketAPM::recv(void*, unsigned long, unsigned int)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"SocketAPM::recv(void*, unsigned long, unsigned int)" -> recvfrom [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3447×", labeldistance="0.50", penwidth="0.50"];
	"SocketAPM::recv(void*, unsigned long, unsigned int)" -> select [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n222780×", labeldistance="0.50", penwidth="0.50"];
	"SocketAPM::reuseaddress()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSocketAPM::reuseaddress()\n0.00%\n(0.00%)\n1×"];
	"SocketAPM::reuseaddress()" -> setsockopt [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SocketAPM::send(void const*, unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSocketAPM::send(void const*, unsigned long)\n0.04%\n(0.01%)\n219332×"];
	"SocketAPM::send(void const*, unsigned long)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SocketAPM::send(void const*, unsigned long)" -> send [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n219331×", labeldistance="0.50", penwidth="0.50"];
	"SocketAPM::set_blocking(bool)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSocketAPM::set_blocking(bool)\n0.00%\n(0.00%)\n1×"];
	"SocketAPM::set_blocking(bool)" -> fcntl [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"SocketAPM::set_cloexec()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSocketAPM::set_cloexec()\n0.00%\n(0.00%)\n1×"];
	"SocketAPM::set_cloexec()" -> fcntl [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"SoftSerial::SoftSerial(unsigned int, SoftSerial::serial_config)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nSoftSerial::SoftSerial(unsigned int, SoftSerial::serial_config)\n0.00%\n(0.00%)\n8×"];
	"StorageAccess::StorageAccess(StorageManager::StorageType)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nStorageAccess::StorageAccess(StorageManager::StorageType)\n0.00%\n(0.00%)\n5×"];
	"StorageAccess::read_block(void*, unsigned short, unsigned long) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nStorageAccess::read_block(void*, unsigned short, unsigned long) const\n0.02%\n(0.01%)\n21130×"];
	"StorageAccess::read_block(void*, unsigned short, unsigned long) const" -> "HALSITL::Storage::read_block(void*, unsigned short, unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n21130×", labeldistance="0.50", penwidth="0.50"];
	"StorageAccess::read_byte(unsigned short) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nStorageAccess::read_byte(unsigned short) const\n0.00%\n(0.00%)\n20×"];
	"StorageAccess::read_byte(unsigned short) const" -> "HALSITL::Storage::read_block(void*, unsigned short, unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n20×", labeldistance="0.50", penwidth="0.50"];
	"StorageAccess::read_uint16(unsigned short) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nStorageAccess::read_uint16(unsigned short) const\n0.00%\n(0.00%)\n11×"];
	"StorageAccess::read_uint16(unsigned short) const" -> "HALSITL::Storage::read_block(void*, unsigned short, unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n11×", labeldistance="0.50", penwidth="0.50"];
	"StorageAccess::read_uint32(unsigned short) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nStorageAccess::read_uint32(unsigned short) const\n0.00%\n(0.00%)\n1×"];
	"StorageAccess::read_uint32(unsigned short) const" -> "HALSITL::Storage::read_block(void*, unsigned short, unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"StorageAccess::write_block(unsigned short, void const*, unsigned long) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nStorageAccess::write_block(unsigned short, void const*, unsigned long) const\n0.00%\n(0.00%)\n26×"];
	"StorageAccess::write_block(unsigned short, void const*, unsigned long) const" -> "HALSITL::Storage::write_block(unsigned short, void const*, unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n26×", labeldistance="0.50", penwidth="0.50"];
	"ToshibaLED_I2C::ToshibaLED_I2C(unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nToshibaLED_I2C::ToshibaLED_I2C(unsigned char)\n0.00%\n(0.00%)\n2×"];
	"ToshibaLED_I2C::ToshibaLED_I2C(unsigned char)" -> "RGBLed::RGBLed(unsigned char, unsigned char, unsigned char, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"ToshibaLED_I2C::hw_init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nToshibaLED_I2C::hw_init()\n0.00%\n(0.00%)\n2×"];
	"ToshibaLED_I2C::hw_init()" -> "Empty::I2CDeviceManager::get_device(unsigned char, unsigned char, unsigned int, bool, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"ToshibaLED_I2C::~ToshibaLED_I2C()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nToshibaLED_I2C::~ToshibaLED_I2C()\n0.00%\n(0.00%)\n2×"];
	"ToshibaLED_I2C::~ToshibaLED_I2C()" -> "operator delete(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"Vector2<float>::is_inf() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector2<float>::is_inf() const\n0.02%\n(0.02%)\n217416×"];
	"Vector2<float>::is_nan() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector2<float>::is_nan() const\n0.01%\n(0.01%)\n215612×"];
	"Vector2<float>::length() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector2<float>::length() const\n0.03%\n(0.03%)\n331897×"];
	"Vector2<float>::normalize()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector2<float>::normalize()\n0.05%\n(0.01%)\n228188×"];
	"Vector2<float>::normalize()" -> "Vector2<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n228188×", labeldistance="0.50", penwidth="0.50"];
	"Vector2<float>::normalize()" -> "Vector2<float>::operator/=(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n228188×", labeldistance="0.50", penwidth="0.50"];
	"Vector2<float>::normalized() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector2<float>::normalized() const\n0.00%\n(0.00%)\n3591×"];
	"Vector2<float>::normalized() const" -> "Vector2<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3591×", labeldistance="0.50", penwidth="0.50"];
	"Vector2<float>::normalized() const" -> "Vector2<float>::operator/(float) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3591×", labeldistance="0.50", penwidth="0.50"];
	"Vector2<float>::operator%(Vector2<float> const&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector2<float>::operator%(Vector2<float> const&) const\n0.00%\n(0.00%)\n1804×"];
	"Vector2<float>::operator*(Vector2<float> const&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector2<float>::operator*(Vector2<float> const&) const\n0.00%\n(0.00%)\n10773×"];
	"Vector2<float>::operator*(float) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector2<float>::operator*(float) const\n0.03%\n(0.03%)\n299466×"];
	"Vector2<float>::operator*=(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector2<float>::operator*=(float)\n0.00%\n(0.00%)\n30977×"];
	"Vector2<float>::operator+(Vector2<float> const&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector2<float>::operator+(Vector2<float> const&) const\n0.01%\n(0.01%)\n49373×"];
	"Vector2<float>::operator+=(Vector2<float> const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector2<float>::operator+=(Vector2<float> const&)\n0.02%\n(0.02%)\n200720×"];
	"Vector2<float>::operator-(Vector2<float> const&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector2<float>::operator-(Vector2<float> const&) const\n0.02%\n(0.02%)\n158886×"];
	"Vector2<float>::operator-=(Vector2<float> const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector2<float>::operator-=(Vector2<float> const&)\n0.00%\n(0.00%)\n3236×"];
	"Vector2<float>::operator/(float) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector2<float>::operator/(float) const\n0.01%\n(0.01%)\n52962×"];
	"Vector2<float>::operator/=(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector2<float>::operator/=(float)\n0.02%\n(0.02%)\n228188×"];
	"Vector3<float>::distance_to_segment(Vector3<float> const&, Vector3<float> const&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector3<float>::distance_to_segment(Vector3<float> const&, Vector3<float> const&) const\n0.00%\n(0.00%)\n242×"];
	"Vector3<float>::distance_to_segment(Vector3<float> const&, Vector3<float> const&) const" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n726×", labeldistance="0.50", penwidth="0.50"];
	"Vector3<float>::distance_to_segment(Vector3<float> const&, Vector3<float> const&) const" -> "Vector3<float>::operator-(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n726×", labeldistance="0.50", penwidth="0.50"];
	"Vector3<float>::distance_to_segment(Vector3<float> const&, Vector3<float> const&) const" -> "float safe_sqrt<float>(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n242×", labeldistance="0.50", penwidth="0.50"];
	"Vector3<float>::is_inf() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector3<float>::is_inf() const\n0.09%\n(0.09%)\n702636×"];
	"Vector3<float>::is_nan() const" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector3<float>::is_nan() const\n0.23%\n(0.23%)\n2435706×"];
	"Vector3<float>::length() const" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector3<float>::length() const\n0.36%\n(0.36%)\n3233538×"];
	"Vector3<float>::operator!=(Vector3<float> const&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector3<float>::operator!=(Vector3<float> const&) const\n0.06%\n(0.03%)\n147124×"];
	"Vector3<float>::operator!=(Vector3<float> const&) const" -> "std::enable_if<std::is_floating_point<std::common_type<float, float>::type>::value, bool>::type is_equal<float, float>(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n441372×", labeldistance="0.50", penwidth="0.50"];
	"Vector3<float>::operator%(Vector3<float> const&) const" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector3<float>::operator%(Vector3<float> const&) const\n0.35%\n(0.35%)\n1780487×"];
	"Vector3<float>::operator*(Vector3<float> const&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector3<float>::operator*(Vector3<float> const&) const\n0.08%\n(0.08%)\n886808×"];
	"Vector3<float>::operator*(float) const" [color="#0d1274", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector3<float>::operator*(float) const\n1.18%\n(1.18%)\n14031694×"];
	"Vector3<float>::operator*=(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector3<float>::operator*=(float)\n0.07%\n(0.07%)\n752184×"];
	"Vector3<float>::operator+(Vector3<float> const&) const" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector3<float>::operator+(Vector3<float> const&) const\n0.67%\n(0.67%)\n7192872×"];
	"Vector3<float>::operator+=(Vector3<float> const&)" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector3<float>::operator+=(Vector3<float> const&)\n1.14%\n(1.14%)\n11062333×"];
	"Vector3<float>::operator-() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector3<float>::operator-() const\n0.03%\n(0.03%)\n290803×"];
	"Vector3<float>::operator-(Vector3<float> const&) const" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector3<float>::operator-(Vector3<float> const&) const\n0.45%\n(0.45%)\n4819694×"];
	"Vector3<float>::operator-=(Vector3<float> const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector3<float>::operator-=(Vector3<float> const&)\n0.11%\n(0.11%)\n1056073×"];
	"Vector3<float>::operator/(float) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector3<float>::operator/(float) const\n0.18%\n(0.18%)\n1713839×"];
	"Vector3<float>::operator/=(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector3<float>::operator/=(float)\n0.16%\n(0.16%)\n1549407×"];
	"Vector3<float>::operator==(Vector3<float> const&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector3<float>::operator==(Vector3<float> const&) const\n0.01%\n(0.01%)\n36531×"];
	"Vector3<float>::operator==(Vector3<float> const&) const" -> "std::enable_if<std::is_floating_point<std::common_type<float, float>::type>::value, bool>::type is_equal<float, float>(float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n109591×", labeldistance="0.50", penwidth="0.50"];
	"Vector3<float>::rotate(Rotation)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector3<float>::rotate(Rotation)\n0.07%\n(0.07%)\n1598067×"];
	"Vector3<float>::rotate_inverse(Rotation)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nVector3<float>::rotate_inverse(Rotation)\n0.02%\n(0.01%)\n18266×"];
	"Vector3<float>::rotate_inverse(Rotation)" -> "Matrix3<float>::mul_transpose(Vector3<float> const&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18266×", labeldistance="0.50", penwidth="0.50"];
	"Vector3<float>::rotate_inverse(Rotation)" -> "Vector3<float>::rotate(Rotation)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n54798×", labeldistance="0.50", penwidth="0.50"];
	"WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [color="#0d1475", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nWithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)\n1.83%\n(0.57%)\n1894414×"];
	"WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" -> "HALSITL::Scheduler::in_main_thread() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.17%\n1894414×", labeldistance="0.50", penwidth="0.50"];
	"WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" -> "HALSITL::Semaphore::take(unsigned int)" [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.08%\n1894414×", labeldistance="0.50", penwidth="0.50"];
	"WithSemaphore::~WithSemaphore()" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nWithSemaphore::~WithSemaphore()\n0.71%\n(0.05%)\n1894414×"];
	"WithSemaphore::~WithSemaphore()" -> "HALSITL::Semaphore::give()" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.65%\n1894414×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__Z19mavlink_sha256_initP18mavlink_sha256_ctx" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n_GLOBAL__sub_I__Z19mavlink_sha256_initP18mavlink_sha256_ctx\n0.00%\n(0.00%)\n1×"];
	"_GLOBAL__sub_I__Z19mavlink_sha256_initP18mavlink_sha256_ctx" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__Z19mavlink_sha256_initP18mavlink_sha256_ctx" -> "MAVLink_routing::MAVLink_routing()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__Z19mavlink_sha256_initP18mavlink_sha256_ctx" -> "__cxa_atexit" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__ZN10AP_Mission8var_infoE" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n_GLOBAL__sub_I__ZN10AP_Mission8var_infoE\n0.00%\n(0.00%)\n1×"];
	"_GLOBAL__sub_I__ZN10AP_Mission8var_infoE" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__ZN10AP_Mission8var_infoE" -> "StorageAccess::StorageAccess(StorageManager::StorageType)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__ZN10AP_Mission8var_infoE" -> "__cxa_atexit" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__ZN10AP_Vehicle8var_infoE" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n_GLOBAL__sub_I__ZN10AP_Vehicle8var_infoE\n0.00%\n(0.00%)\n1×"];
	"_GLOBAL__sub_I__ZN11GCS_MAVLINK14param_requestsE" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n_GLOBAL__sub_I__ZN11GCS_MAVLINK14param_requestsE\n0.00%\n(0.00%)\n1×"];
	"_GLOBAL__sub_I__ZN11GCS_MAVLINK14param_requestsE" -> "ByteBuffer::ByteBuffer(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__ZN11GCS_MAVLINK14param_requestsE" -> "__cxa_atexit" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__ZN11GCS_MAVLINK14param_requestsE" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__ZN11GCS_MAVLINK16_signing_storageE" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n_GLOBAL__sub_I__ZN11GCS_MAVLINK16_signing_storageE\n0.00%\n(0.00%)\n1×"];
	"_GLOBAL__sub_I__ZN11GCS_MAVLINK16_signing_storageE" -> "StorageAccess::StorageAccess(StorageManager::StorageType)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__ZN11GCS_MAVLINK3ftpE" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n_GLOBAL__sub_I__ZN11GCS_MAVLINK3ftpE\n0.00%\n(0.00%)\n1×"];
	"_GLOBAL__sub_I__ZN12SRV_Channels8channelsE" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n_GLOBAL__sub_I__ZN12SRV_Channels8channelsE\n0.00%\n(0.00%)\n1×"];
	"_GLOBAL__sub_I__ZN19AC_PolyFence_loader4initEv" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n_GLOBAL__sub_I__ZN19AC_PolyFence_loader4initEv\n0.00%\n(0.00%)\n1×"];
	"_GLOBAL__sub_I__ZN19AC_PolyFence_loader4initEv" -> "StorageAccess::StorageAccess(StorageManager::StorageType)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__ZN21AP_IRLock_SITL_GazeboC2Ev" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n_GLOBAL__sub_I__ZN21AP_IRLock_SITL_GazeboC2Ev\n0.00%\n(0.00%)\n1×"];
	"_GLOBAL__sub_I__ZN21AP_IRLock_SITL_GazeboC2Ev" -> "__cxa_atexit" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__ZN21AP_IRLock_SITL_GazeboC2Ev" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__ZN4Mode8auto_yawE" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n_GLOBAL__sub_I__ZN4Mode8auto_yawE\n0.00%\n(0.00%)\n1×"];
	"_GLOBAL__sub_I__ZN4SITL5Frame4initEffff" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n_GLOBAL__sub_I__ZN4SITL5Frame4initEffff\n0.00%\n(0.00%)\n1×"];
	"_GLOBAL__sub_I__ZN4SITL9SubmarineC2EPKc" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n_GLOBAL__sub_I__ZN4SITL9SubmarineC2EPKc\n0.00%\n(0.00%)\n1×"];
	"_GLOBAL__sub_I__ZN7HALSITL9Scheduler9_failsafeE" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n_GLOBAL__sub_I__ZN7HALSITL9Scheduler9_failsafeE\n0.00%\n(0.00%)\n1×"];
	"_GLOBAL__sub_I__ZN7HALSITL9Scheduler9_failsafeE" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__ZN7HALSITL9Scheduler9_failsafeE" -> "__cxa_atexit" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__ZN8AP_Param15sentinal_offsetE" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n_GLOBAL__sub_I__ZN8AP_Param15sentinal_offsetE\n0.00%\n(0.00%)\n1×"];
	"_GLOBAL__sub_I__ZN8AP_Param15sentinal_offsetE" -> "ByteBuffer::ByteBuffer(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__ZN8AP_Param15sentinal_offsetE" -> "HALSITL::Semaphore::Semaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__ZN8AP_Param15sentinal_offsetE" -> "StorageAccess::StorageAccess(StorageManager::StorageType)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__ZN8AP_Param15sentinal_offsetE" -> "__cxa_atexit" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__ZN8AP_Param15sentinal_offsetE" -> "operator new(unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__ZN8AP_Rally8_storageE" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n_GLOBAL__sub_I__ZN8AP_Rally8_storageE\n0.00%\n(0.00%)\n1×"];
	"_GLOBAL__sub_I__ZN8AP_Rally8_storageE" -> "StorageAccess::StorageAccess(StorageManager::StorageType)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__ZN8HAL_SITLC2Ev" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n_GLOBAL__sub_I__ZN8HAL_SITLC2Ev\n0.00%\n(0.00%)\n1×"];
	"_GLOBAL__sub_I__ZN8HAL_SITLC2Ev" -> "HALSITL::Scheduler::Scheduler(HALSITL::SITL_State*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__ZN8HAL_SITLC2Ev" -> "HALSITL::UARTDriver::UARTDriver(unsigned char, HALSITL::SITL_State*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__ZN8HAL_SITLC2Ev" -> "SocketAPM::SocketAPM(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__ZN8HAL_SITLC2Ev" -> "__cxa_atexit" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I__ZN8Location8_terrainE" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n_GLOBAL__sub_I__ZN8Location8_terrainE\n0.00%\n(0.00%)\n1×"];
	"_GLOBAL__sub_I_guided_limit" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n_GLOBAL__sub_I_guided_limit\n0.00%\n(0.00%)\n1×"];
	"_GLOBAL__sub_I_hal" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n_GLOBAL__sub_I_hal\n0.00%\n(0.00%)\n1×"];
	"_GLOBAL__sub_I_hal" -> "AP_HAL::get_HAL()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I_hal" -> "Copter::Copter()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_GLOBAL__sub_I_hal" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_IO_default_finish" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_default_finish\n0.00%\n(0.00%)\n4×"];
	"_IO_default_setbuf" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_default_setbuf\n0.00%\n(0.00%)\n2×"];
	"_IO_default_setbuf" -> "_IO_file_sync@@GLIBC_2.2.5" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"_IO_default_uflow" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_default_uflow\n0.00%\n(0.00%)\n8×"];
	"_IO_default_uflow" -> "_IO_file_underflow@@GLIBC_2.2.5" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"_IO_default_xsputn" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_default_xsputn\n0.00%\n(0.00%)\n176×"];
	"_IO_default_xsputn" -> "__GI_mempcpy" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"_IO_do_write@@GLIBC_2.2.5" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_do_write@@GLIBC_2.2.5\n0.00%\n(0.00%)\n17×"];
	"_IO_doallocbuf" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_doallocbuf\n0.00%\n(0.00%)\n4×"];
	"_IO_doallocbuf" -> "_IO_file_doallocate" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_IO_file_close" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_file_close\n0.00%\n(0.00%)\n4×"];
	"_IO_file_close_it@@GLIBC_2.2.5" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_file_close_it@@GLIBC_2.2.5\n0.00%\n(0.00%)\n4×"];
	"_IO_file_close_it@@GLIBC_2.2.5" -> "_IO_file_close" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_IO_file_close_it@@GLIBC_2.2.5" -> "_IO_setb" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_IO_file_close_it@@GLIBC_2.2.5" -> "_IO_un_link" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_IO_file_close_it@@GLIBC_2.2.5" -> "_IO_unsave_markers" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_IO_file_doallocate" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_file_doallocate\n0.00%\n(0.00%)\n4×"];
	"_IO_file_doallocate" -> "0x00000000057078a0" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_IO_file_doallocate" -> "_IO_file_stat" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_IO_file_doallocate" -> "_IO_setb" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_IO_file_finish@@GLIBC_2.2.5" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_file_finish@@GLIBC_2.2.5\n0.00%\n(0.00%)\n4×"];
	"_IO_file_finish@@GLIBC_2.2.5" -> "_IO_default_finish" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_IO_file_fopen@@GLIBC_2.2.5" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_file_fopen@@GLIBC_2.2.5\n0.00%\n(0.00%)\n4×"];
	"_IO_file_fopen@@GLIBC_2.2.5" -> "_IO_file_open" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_IO_file_fopen@@GLIBC_2.2.5" -> "__GI_strstr" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_IO_file_init@@GLIBC_2.2.5" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_file_init@@GLIBC_2.2.5\n0.00%\n(0.00%)\n4×"];
	"_IO_file_init@@GLIBC_2.2.5" -> "_IO_link_in" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_IO_file_open" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_file_open\n0.00%\n(0.00%)\n4×"];
	"_IO_file_open" -> "_IO_link_in" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_IO_file_open" -> open [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_IO_file_overflow@@GLIBC_2.2.5" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_file_overflow@@GLIBC_2.2.5\n0.00%\n(0.00%)\n17×"];
	"_IO_file_overflow@@GLIBC_2.2.5" -> "_IO_do_write@@GLIBC_2.2.5" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n17×", labeldistance="0.50", penwidth="0.50"];
	"_IO_file_read" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_file_read\n0.00%\n(0.00%)\n8×"];
	"_IO_file_read" -> read [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"_IO_file_setbuf@@GLIBC_2.2.5" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_file_setbuf@@GLIBC_2.2.5\n0.00%\n(0.00%)\n2×"];
	"_IO_file_setbuf@@GLIBC_2.2.5" -> "_IO_default_setbuf" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"_IO_file_stat" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_file_stat\n0.00%\n(0.00%)\n4×"];
	"_IO_file_stat" -> "_fxstat" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_IO_file_sync@@GLIBC_2.2.5" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_file_sync@@GLIBC_2.2.5\n0.00%\n(0.00%)\n6×"];
	"_IO_file_underflow@@GLIBC_2.2.5" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_file_underflow@@GLIBC_2.2.5\n0.00%\n(0.00%)\n8×"];
	"_IO_file_underflow@@GLIBC_2.2.5" -> "_IO_doallocbuf" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_IO_file_underflow@@GLIBC_2.2.5" -> "_IO_file_read" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"_IO_file_underflow@@GLIBC_2.2.5" -> "_IO_switch_to_get_mode" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"_IO_file_write@@GLIBC_2.2.5" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_file_write@@GLIBC_2.2.5\n0.00%\n(0.00%)\n17×"];
	"_IO_file_write@@GLIBC_2.2.5" -> write [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n17×", labeldistance="0.50", penwidth="0.50"];
	"_IO_file_xsputn@@GLIBC_2.2.5" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_file_xsputn@@GLIBC_2.2.5\n0.00%\n(0.00%)\n17×"];
	"_IO_file_xsputn@@GLIBC_2.2.5" -> "_IO_file_overflow@@GLIBC_2.2.5" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n17×", labeldistance="0.50", penwidth="0.50"];
	"_IO_file_xsputn@@GLIBC_2.2.5" -> "_IO_file_write@@GLIBC_2.2.5" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n17×", labeldistance="0.50", penwidth="0.50"];
	"_IO_getline" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_getline\n0.00%\n(0.00%)\n392×"];
	"_IO_getline" -> "_IO_getline_info" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n392×", labeldistance="0.50", penwidth="0.50"];
	"_IO_getline_info" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_getline_info\n0.00%\n(0.00%)\n392×"];
	"_IO_getline_info" -> "__GI_memcpy" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n388×", labeldistance="0.50", penwidth="0.50"];
	"_IO_getline_info" -> "__uflow" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"_IO_getline_info" -> memchr [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n388×", labeldistance="0.50", penwidth="0.50"];
	"_IO_link_in" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_link_in\n0.00%\n(0.00%)\n8×"];
	"_IO_link_in" -> "_pthread_cleanup_pop_restore" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_IO_link_in" -> "_pthread_cleanup_push_defer" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_IO_no_init" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_no_init\n0.00%\n(0.00%)\n27×"];
	"_IO_no_init" -> "_IO_old_init" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n27×", labeldistance="0.50", penwidth="0.50"];
	"_IO_old_init" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_old_init\n0.00%\n(0.00%)\n27×"];
	"_IO_padn" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_padn\n0.00%\n(0.00%)\n12×"];
	"_IO_padn" -> "_IO_default_xsputn" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n12×", labeldistance="0.50", penwidth="0.50"];
	"_IO_setb" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_setb\n0.00%\n(0.00%)\n31×"];
	"_IO_setb" -> "0x00000000057078a8" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_IO_str_init_static_internal" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_str_init_static_internal\n0.00%\n(0.00%)\n23×"];
	"_IO_str_init_static_internal" -> "_IO_setb" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n23×", labeldistance="0.50", penwidth="0.50"];
	"_IO_switch_to_get_mode" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_switch_to_get_mode\n0.00%\n(0.00%)\n8×"];
	"_IO_un_link" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_un_link\n0.00%\n(0.00%)\n8×"];
	"_IO_un_link" -> "_pthread_cleanup_pop_restore" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_IO_un_link" -> "_pthread_cleanup_push_defer" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_IO_unsave_markers" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_IO_unsave_markers\n0.00%\n(0.00%)\n4×"];
	"__GI_memcmp" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__GI_memcmp\n0.00%\n(0.00%)\n49×"];
	"__GI_memcpy" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__GI_memcpy\n0.00%\n(0.00%)\n548×"];
	"__GI_mempcpy" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__GI_mempcpy\n0.00%\n(0.00%)\n14×"];
	"__GI_memset" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__GI_memset\n0.00%\n(0.00%)\n87×"];
	"__GI_strchr" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__GI_strchr\n0.00%\n(0.00%)\n4×"];
	"__GI_strstr" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__GI_strstr\n0.00%\n(0.00%)\n4×"];
	"____strtof_l_internal" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n____strtof_l_internal\n0.00%\n(0.00%)\n318×"];
	"____strtof_l_internal" -> "__GI_memcpy" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n128×", labeldistance="0.50", penwidth="0.50"];
	"____strtof_l_internal" -> "__correctly_grouped_prefixmb" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n56×", labeldistance="0.50", penwidth="0.50"];
	"____strtof_l_internal" -> "__mpn_lshift" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n330×", labeldistance="0.50", penwidth="0.50"];
	"____strtof_l_internal" -> "__mpn_mul" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n48×", labeldistance="0.50", penwidth="0.50"];
	"____strtof_l_internal" -> "round_and_return" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n250×", labeldistance="0.50", penwidth="0.50"];
	"____strtof_l_internal" -> "str_to_mpn.isra.0" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n274×", labeldistance="0.50", penwidth="0.50"];
	"____strtof_l_internal" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n318×", labeldistance="0.50", penwidth="0.50"];
	"____strtol_l_internal" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n____strtol_l_internal\n0.00%\n(0.00%)\n12×"];
	"____strtoul_l_internal" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n____strtoul_l_internal\n0.00%\n(0.00%)\n8×"];
	"__accept_nocancel" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\n__accept_nocancel\n0.00%\n(0.00%)\n1×"];
	"__acos_finite" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\n__acos_finite\n0.00%\n(0.00%)\n1×"];
	"__acosf_finite" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\n__acosf_finite\n0.09%\n(0.09%)\n233457×"];
	"__asin_finite" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\n__asin_finite\n0.00%\n(0.00%)\n1×"];
	"__asinf_finite" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\n__asinf_finite\n0.39%\n(0.39%)\n966633×"];
	"__asprintf_chk" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__asprintf_chk\n0.00%\n(0.00%)\n7×"];
	"__asprintf_chk" -> "__vasprintf_chk" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"__atan2_finite" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\n__atan2_finite\n0.00%\n(0.00%)\n1×"];
	"__atan2f_finite" [color="#0d1675", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\n__atan2f_finite\n2.09%\n(1.02%)\n2541896×"];
	"__atan2f_finite" -> atanf [arrowsize="0.35", color="#0d1174", fontcolor="#0d1174", fontsize="10.00", label="1.07%\n2525235×", labeldistance="0.50", penwidth="0.50"];
	"__close_nocancel" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\n__close_nocancel\n0.00%\n(0.00%)\n10×"];
	"__connect_nocancel" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\n__connect_nocancel\n0.00%\n(0.00%)\n1×"];
	"__correctly_grouped_prefixmb" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__correctly_grouped_prefixmb\n0.00%\n(0.00%)\n56×"];
	"__cpu_indicator_init" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libgcc_s.so.1\n__cpu_indicator_init\n0.00%\n(0.00%)\n1×"];
	"__cpu_indicator_init" -> "0x0000000000002a70" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__cpu_indicator_init" -> "0x0000000000002c60" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"__ctype_init" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__ctype_init\n0.00%\n(0.00%)\n1×"];
	"__cxa_atexit" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__cxa_atexit\n0.00%\n(0.00%)\n22×"];
	"__cxa_atexit" -> "__new_exitfn" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n24×", labeldistance="0.50", penwidth="0.50"];
	"__cxa_guard_acquire" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\n__cxa_guard_acquire\n0.00%\n(0.00%)\n1×"];
	"__cxa_guard_release" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\n__cxa_guard_release\n0.00%\n(0.00%)\n1×"];
	"__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\n__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const\n0.00%\n(0.00%)\n40×"];
	"__cxxabiv1::__vmi_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\n__cxxabiv1::__vmi_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const\n0.00%\n(0.00%)\n8×"];
	"__cxxabiv1::__vmi_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const" -> "__strcmp_sse2_unaligned" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"__cxxabiv1::__vmi_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__default_morecore" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__default_morecore\n0.00%\n(0.00%)\n4×"];
	"__default_morecore" -> sbrk [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"__dynamic_cast" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\n__dynamic_cast\n0.00%\n(0.00%)\n47×"];
	"__dynamic_cast" -> "__cxxabiv1::__si_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n40×", labeldistance="0.50", penwidth="0.50"];
	"__dynamic_cast" -> "__cxxabiv1::__vmi_class_type_info::__do_dyncast(long, __cxxabiv1::__class_type_info::__sub_kind, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info const*, void const*, __cxxabiv1::__class_type_info::__dyncast_result&) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"__errno_location" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\n__errno_location\n0.01%\n(0.01%)\n304970×"];
	"__exp_finite" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\n__exp_finite\n0.00%\n(0.00%)\n1×"];
	"__expf_finite" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\n__expf_finite\n0.01%\n(0.01%)\n20086×"];
	"__fdelt_chk" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__fdelt_chk\n0.07%\n(0.07%)\n1574380×"];
	"__fmod_finite" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\n__fmod_finite\n0.85%\n(0.85%)\n4755639×"];
	"__fmodf_finite" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\n__fmodf_finite\n0.10%\n(0.10%)\n583417×"];
	"__fopen_internal" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__fopen_internal\n0.00%\n(0.00%)\n4×"];
	"__fopen_internal" -> "0x00000000057078a0" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"__fopen_internal" -> "_IO_file_fopen@@GLIBC_2.2.5" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"__fopen_internal" -> "_IO_file_init@@GLIBC_2.2.5" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"__fopen_internal" -> "_IO_no_init" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"__fopen_internal" -> "__fopen_maybe_mmap" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"__fopen_maybe_mmap" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__fopen_maybe_mmap\n0.00%\n(0.00%)\n4×"];
	"__fprintf_chk" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__fprintf_chk\n0.00%\n(0.00%)\n9×"];
	"__fprintf_chk" -> vfprintf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10×", labeldistance="0.50", penwidth="0.50"];
	"__gconv_btwoc_ascii" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__gconv_btwoc_ascii\n0.00%\n(0.00%)\n128×"];
	"__gettimeofday_syscall" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__gettimeofday_syscall\n0.01%\n(0.01%)\n219340×"];
	"__ieee754_log_avx" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\n__ieee754_log_avx\n0.84%\n(0.84%)\n657996×"];
	"__ieee754_rem_pio2f" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\n__ieee754_rem_pio2f\n0.01%\n(0.01%)\n49373×"];
	"__init_misc" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__init_misc\n0.00%\n(0.00%)\n1×"];
	"__init_misc" -> rindex [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__kernel_tanf" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\n__kernel_tanf\n0.04%\n(0.04%)\n113776×"];
	"__libc_csu_init" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n__libc_csu_init\n0.00%\n(0.00%)\n1×"];
	"__libc_csu_init" -> "0x0000000000403338" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__libc_csu_init" -> "0x0000000000406af0" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__libc_csu_init" -> "_GLOBAL__sub_I__Z19mavlink_sha256_initP18mavlink_sha256_ctx" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__libc_csu_init" -> "_GLOBAL__sub_I__ZN10AP_Mission8var_infoE" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__libc_csu_init" -> "_GLOBAL__sub_I__ZN10AP_Vehicle8var_infoE" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__libc_csu_init" -> "_GLOBAL__sub_I__ZN11GCS_MAVLINK14param_requestsE" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__libc_csu_init" -> "_GLOBAL__sub_I__ZN11GCS_MAVLINK16_signing_storageE" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__libc_csu_init" -> "_GLOBAL__sub_I__ZN11GCS_MAVLINK3ftpE" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__libc_csu_init" -> "_GLOBAL__sub_I__ZN12SRV_Channels8channelsE" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__libc_csu_init" -> "_GLOBAL__sub_I__ZN19AC_PolyFence_loader4initEv" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__libc_csu_init" -> "_GLOBAL__sub_I__ZN21AP_IRLock_SITL_GazeboC2Ev" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__libc_csu_init" -> "_GLOBAL__sub_I__ZN4Mode8auto_yawE" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__libc_csu_init" -> "_GLOBAL__sub_I__ZN4SITL5Frame4initEffff" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__libc_csu_init" -> "_GLOBAL__sub_I__ZN4SITL9SubmarineC2EPKc" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__libc_csu_init" -> "_GLOBAL__sub_I__ZN7HALSITL9Scheduler9_failsafeE" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__libc_csu_init" -> "_GLOBAL__sub_I__ZN8AP_Param15sentinal_offsetE" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__libc_csu_init" -> "_GLOBAL__sub_I__ZN8AP_Rally8_storageE" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__libc_csu_init" -> "_GLOBAL__sub_I__ZN8HAL_SITLC2Ev" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__libc_csu_init" -> "_GLOBAL__sub_I__ZN8Location8_terrainE" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__libc_csu_init" -> "_GLOBAL__sub_I_guided_limit" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__libc_csu_init" -> "_GLOBAL__sub_I_hal" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__libc_dl_error_tsd" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__libc_dl_error_tsd\n0.00%\n(0.00%)\n1×"];
	"__libc_memalign" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n__libc_memalign\n0.00%\n(0.00%)\n47×"];
	"__libc_memalign" -> mmap [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"__libc_pthread_init" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__libc_pthread_init\n0.00%\n(0.00%)\n0×"];
	"__libc_pthread_init" -> "__register_atfork" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__libc_sigaction" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\n__libc_sigaction\n0.00%\n(0.00%)\n6×"];
	"__log2f_finite" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\n__log2f_finite\n0.03%\n(0.03%)\n44264×"];
	"__log_finite" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\n__log_finite\n0.00%\n(0.00%)\n1×"];
	"__logf_finite" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\n__logf_finite\n0.00%\n(0.00%)\n1817×"];
	"__memcmp_sse4_1" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__memcmp_sse4_1\n0.00%\n(0.00%)\n25×"];
	"__memcpy_avx_unaligned" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__memcpy_avx_unaligned\n0.06%\n(0.06%)\n419845×"];
	"__memcpy_chk" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__memcpy_chk\n0.00%\n(0.00%)\n1×"];
	"__memcpy_chk_avx_unaligned" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__memcpy_chk_avx_unaligned\n0.00%\n(0.00%)\n87×"];
	"__memset_avx2" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__memset_avx2\n0.00%\n(0.00%)\n531×"];
	"__memset_chk" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__memset_chk\n0.00%\n(0.00%)\n1×"];
	"__memset_chk_avx2" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__memset_chk_avx2\n0.00%\n(0.00%)\n3×"];
	"__mpn_cmp" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__mpn_cmp\n0.00%\n(0.00%)\n7×"];
	"__mpn_construct_float" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__mpn_construct_float\n0.00%\n(0.00%)\n250×"];
	"__mpn_divrem" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__mpn_divrem\n0.00%\n(0.00%)\n39×"];
	"__mpn_extract_double" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__mpn_extract_double\n0.00%\n(0.00%)\n6×"];
	"__mpn_lshift" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__mpn_lshift\n0.00%\n(0.00%)\n336×"];
	"__mpn_mul" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__mpn_mul\n0.00%\n(0.00%)\n52×"];
	"__mpn_mul" -> "__mpn_mul_1" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n52×", labeldistance="0.50", penwidth="0.50"];
	"__mpn_mul_1" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__mpn_mul_1\n0.00%\n(0.00%)\n84×"];
	"__mpn_rshift" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__mpn_rshift\n0.00%\n(0.00%)\n9×"];
	"__nanosleep_nocancel" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__nanosleep_nocancel\n0.00%\n(0.00%)\n5466×"];
	"__new_exitfn" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__new_exitfn\n0.00%\n(0.00%)\n24×"];
	"__open_nocancel" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__open_nocancel\n0.00%\n(0.00%)\n17×"];
	"__popcountdi2" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libgcc_s.so.1\n__popcountdi2\n0.03%\n(0.03%)\n167699×"];
	"__pow_finite" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\n__pow_finite\n0.00%\n(0.00%)\n1×"];
	"__powf_finite" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\n__powf_finite\n0.35%\n(0.35%)\n151061×"];
	"__printf_chk" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__printf_chk\n0.00%\n(0.00%)\n4×"];
	"__printf_chk" -> vfprintf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"__printf_fp" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__printf_fp\n0.00%\n(0.00%)\n6×"];
	"__printf_fp" -> "__printf_fp_l" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"__printf_fp_l" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__printf_fp_l\n0.00%\n(0.00%)\n6×"];
	"__printf_fp_l" -> "__GI_memcpy" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"__printf_fp_l" -> "__GI_mempcpy" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"__printf_fp_l" -> "__mpn_cmp" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"__printf_fp_l" -> "__mpn_divrem" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n24×", labeldistance="0.50", penwidth="0.50"];
	"__printf_fp_l" -> "__mpn_extract_double" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"__printf_fp_l" -> "__mpn_lshift" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"__printf_fp_l" -> "__mpn_mul" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"__printf_fp_l" -> "__mpn_mul_1" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18×", labeldistance="0.50", penwidth="0.50"];
	"__printf_fp_l" -> "__mpn_rshift" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9×", labeldistance="0.50", penwidth="0.50"];
	"__printf_fp_l" -> "hack_digit" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18×", labeldistance="0.50", penwidth="0.50"];
	"__printf_fp_l" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"__pthread_initialize_minimal" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\n__pthread_initialize_minimal\n0.00%\n(0.00%)\n1×"];
	"__pthread_initialize_minimal" -> "0x00000000054d0a10" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__pthread_initialize_minimal" -> "__libc_sigaction" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"__pthread_initialize_minimal" -> "_dl_initial_error_catch_tsd" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__pthread_initialize_minimal" -> "_dl_runtime_resolve_xsave" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"__pthread_once_slow" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\n__pthread_once_slow\n0.00%\n(0.00%)\n1×"];
	"__pthread_once_slow" -> "0x00000000000a0d40" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__pthread_once_slow" -> "_pthread_cleanup_pop" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__pthread_once_slow" -> "_pthread_cleanup_push" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__pthread_once_slow'2" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\n__pthread_once_slow'2\n0.00%\n(0.00%)\n1×"];
	"__pthread_once_slow'2" -> "0x000000000009e900" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__pthread_once_slow'2" -> "_pthread_cleanup_pop" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__pthread_once_slow'2" -> "_pthread_cleanup_push" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__read_nocancel" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__read_nocancel\n0.00%\n(0.00%)\n1852×"];
	"__recvfrom_nocancel" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\n__recvfrom_nocancel\n0.00%\n(0.00%)\n3448×"];
	"__register_atfork" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__register_atfork\n0.00%\n(0.00%)\n1×"];
	"__select_nocancel" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__select_nocancel\n0.09%\n(0.09%)\n1574381×"];
	"__sigjmp_save" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__sigjmp_save\n0.00%\n(0.00%)\n1×"];
	"__sigsetjmp" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__sigsetjmp\n0.00%\n(0.00%)\n17×"];
	"__sigsetjmp" -> "__sigjmp_save" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"__snprintf_chk" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__snprintf_chk\n0.00%\n(0.00%)\n14×"];
	"__snprintf_chk" -> "__vsnprintf_chk" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"__strcasecmp_avx" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__strcasecmp_avx\n0.01%\n(0.01%)\n18759×"];
	"__strcmp_sse2_unaligned" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__strcmp_sse2_unaligned\n0.00%\n(0.00%)\n17896×"];
	"__strcspn_sse42" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__strcspn_sse42\n0.00%\n(0.00%)\n2×"];
	"__strncasecmp_avx" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__strncasecmp_avx\n0.00%\n(0.00%)\n1275×"];
	"__strncmp_sse42" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__strncmp_sse42\n0.00%\n(0.00%)\n7862×"];
	"__strncpy_sse2_unaligned" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__strncpy_sse2_unaligned\n0.01%\n(0.01%)\n16023×"];
	"__strstr_sse2_unaligned" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__strstr_sse2_unaligned\n0.00%\n(0.00%)\n0×"];
	"__syscall_clock_gettime" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__syscall_clock_gettime\n0.00%\n(0.00%)\n1×"];
	"__uflow" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__uflow\n0.00%\n(0.00%)\n8×"];
	"__uflow" -> "_IO_default_uflow" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"__vasprintf_chk" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__vasprintf_chk\n0.00%\n(0.00%)\n8×"];
	"__vasprintf_chk" -> "0x00000000057078a0" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n16×", labeldistance="0.50", penwidth="0.50"];
	"__vasprintf_chk" -> "0x00000000057078a8" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"__vasprintf_chk" -> "_IO_no_init" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"__vasprintf_chk" -> "_IO_str_init_static_internal" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"__vasprintf_chk" -> "__GI_memcpy" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"__vasprintf_chk" -> vfprintf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"__vsnprintf_chk" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__vsnprintf_chk\n0.00%\n(0.00%)\n15×"];
	"__vsnprintf_chk" -> "_IO_no_init" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"__vsnprintf_chk" -> "_IO_str_init_static_internal" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"__vsnprintf_chk" -> vfprintf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"__write_nocancel" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n__write_nocancel\n0.04%\n(0.04%)\n572917×"];
	"_dl_add_to_namespace_list" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_add_to_namespace_list\n0.00%\n(0.00%)\n7×"];
	"_dl_add_to_namespace_list" -> "rtld_lock_default_lock_recursive" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"_dl_add_to_namespace_list" -> "rtld_lock_default_unlock_recursive" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"_dl_add_to_slotinfo" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_add_to_slotinfo\n0.00%\n(0.00%)\n2×"];
	"_dl_addr" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_dl_addr\n0.00%\n(0.00%)\n1×"];
	"_dl_addr" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_addr" -> "pthread_mutex_lock" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_addr" -> "pthread_mutex_unlock" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_allocate_tls_init" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_allocate_tls_init\n0.00%\n(0.00%)\n1×"];
	"_dl_allocate_tls_init" -> mempcpy [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"_dl_allocate_tls_init" -> memset [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"_dl_allocate_tls_storage" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_allocate_tls_storage\n0.00%\n(0.00%)\n1×"];
	"_dl_allocate_tls_storage" -> "__libc_memalign" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_allocate_tls_storage" -> calloc [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_cache_libcmp" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_cache_libcmp\n0.00%\n(0.00%)\n59×"];
	"_dl_catch_error" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_catch_error\n0.00%\n(0.00%)\n16×"];
	"_dl_catch_error" -> "__sigsetjmp" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n16×", labeldistance="0.50", penwidth="0.50"];
	"_dl_catch_error" -> "_dl_initial_error_catch_tsd" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n16×", labeldistance="0.50", penwidth="0.50"];
	"_dl_catch_error" -> "map_doit" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_catch_error" -> openaux [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"_dl_check_all_versions" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_check_all_versions\n0.00%\n(0.00%)\n1×"];
	"_dl_check_all_versions" -> "_dl_check_map_versions" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"_dl_check_map_versions" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_check_map_versions\n0.00%\n(0.00%)\n8×"];
	"_dl_check_map_versions" -> "_dl_name_match_p" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n94×", labeldistance="0.50", penwidth="0.50"];
	"_dl_check_map_versions" -> calloc [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"_dl_check_map_versions" -> "match_symbol" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n42×", labeldistance="0.50", penwidth="0.50"];
	"_dl_count_modids" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_count_modids\n0.00%\n(0.00%)\n1×"];
	"_dl_debug_initialize" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_debug_initialize\n0.00%\n(0.00%)\n8×"];
	"_dl_debug_state" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_debug_state\n0.00%\n(0.00%)\n2×"];
	"_dl_determine_tlsoffset" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_determine_tlsoffset\n0.00%\n(0.00%)\n1×"];
	"_dl_discover_osversion" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_discover_osversion\n0.00%\n(0.00%)\n1×"];
	"_dl_discover_osversion" -> uname [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_find_dso_for_object" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_find_dso_for_object\n0.00%\n(0.00%)\n0×"];
	"_dl_fixup" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_fixup\n0.01%\n(0.00%)\n166×"];
	"_dl_fixup" -> "__memcpy_chk" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_fixup" -> "__memset_chk" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_fixup" -> "_dl_lookup_symbol_x" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n166×", labeldistance="0.50", penwidth="0.50"];
	"_dl_fixup" -> bcmp [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_fixup" -> gettimeofday [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_fixup" -> index [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_fixup" -> "memcpy@@GLIBC_2.14" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_fixup" -> memset [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_fixup" -> strcasecmp [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_fixup" -> strcmp [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"_dl_fixup" -> strcspn [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_fixup" -> strncasecmp [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_fixup" -> strncmp [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_fixup" -> strncpy [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_fixup" -> strstr [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_get_tls_static_info" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_get_tls_static_info\n0.00%\n(0.00%)\n0×"];
	"_dl_higher_prime_number" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_higher_prime_number\n0.00%\n(0.00%)\n2×"];
	"_dl_important_hwcaps" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_important_hwcaps\n0.00%\n(0.00%)\n1×"];
	"_dl_important_hwcaps" -> access [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_important_hwcaps" -> malloc [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_important_hwcaps" -> mempcpy [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_dl_init" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_init\n0.00%\n(0.00%)\n1×"];
	"_dl_init" -> "call_init.part.0" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"_dl_init_paths" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_init_paths\n0.00%\n(0.00%)\n1×"];
	"_dl_init_paths" -> "_dl_important_hwcaps" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_init_paths" -> "fillin_rpath" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_init_paths" -> index [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_init_paths" -> malloc [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"_dl_init_paths" -> memcpy [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_init_paths" -> memset [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_dl_init_paths" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_initial_error_catch_tsd" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_initial_error_catch_tsd\n0.00%\n(0.00%)\n18×"];
	"_dl_load_cache_lookup" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_load_cache_lookup\n0.00%\n(0.00%)\n5×"];
	"_dl_load_cache_lookup" -> "_dl_cache_libcmp" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n59×", labeldistance="0.50", penwidth="0.50"];
	"_dl_load_cache_lookup" -> "_dl_sysdep_read_whole_file" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_load_cache_lookup" -> access [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"_dl_load_cache_lookup" -> bcmp [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"_dl_load_cache_lookup" -> memcpy [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"_dl_load_cache_lookup" -> strdup [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"_dl_load_cache_lookup" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"_dl_lookup_symbol_x" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_lookup_symbol_x\n0.02%\n(0.01%)\n2195×"];
	"_dl_lookup_symbol_x" -> "do_lookup_x" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n2195×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_map_object\n0.00%\n(0.00%)\n16×"];
	"_dl_map_object" -> "_dl_load_cache_lookup" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object" -> "_dl_map_object_from_fd" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object" -> "_dl_name_match_p" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n78×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object" -> index [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object" -> "open_path" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object" -> "open_verify.constprop.7" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object" -> strcmp [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n41×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object" -> strdup [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object_deps" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_map_object_deps\n0.00%\n(0.00%)\n1×"];
	"_dl_map_object_deps" -> "_dl_catch_error" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object_deps" -> index [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object_deps" -> malloc [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object_deps" -> memcpy [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n13×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object_deps" -> memset [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object_from_fd" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_map_object_from_fd\n0.00%\n(0.00%)\n6×"];
	"_dl_map_object_from_fd" -> "_dl_add_to_namespace_list" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object_from_fd" -> "_dl_debug_initialize" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object_from_fd" -> "_dl_new_object" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object_from_fd" -> "_dl_next_tls_modid" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object_from_fd" -> "_dl_setup_hash" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object_from_fd" -> "_fxstat" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object_from_fd" -> close [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object_from_fd" -> memset [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object_from_fd" -> mmap [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"_dl_map_object_from_fd" -> mprotect [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"_dl_mcount_wrapper_check" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_dl_mcount_wrapper_check\n0.00%\n(0.00%)\n128×"];
	"_dl_name_match_p" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_name_match_p\n0.00%\n(0.00%)\n875×"];
	"_dl_name_match_p" -> strcmp [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1770×", labeldistance="0.50", penwidth="0.50"];
	"_dl_new_object" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_new_object\n0.00%\n(0.00%)\n7×"];
	"_dl_new_object" -> calloc [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"_dl_new_object" -> malloc [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"_dl_new_object" -> memcpy [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"_dl_new_object" -> mempcpy [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"_dl_new_object" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n13×", labeldistance="0.50", penwidth="0.50"];
	"_dl_next_ld_env_entry" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_next_ld_env_entry\n0.00%\n(0.00%)\n3×"];
	"_dl_next_tls_modid" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_next_tls_modid\n0.00%\n(0.00%)\n2×"];
	"_dl_receive_error" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_receive_error\n0.00%\n(0.00%)\n1×"];
	"_dl_receive_error" -> "_dl_initial_error_catch_tsd" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_receive_error" -> "version_check_doit" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_relocate_object\n0.02%\n(0.00%)\n8×"];
	"_dl_relocate_object" -> "__acos_finite" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> "__asin_finite" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> "__atan2_finite" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> "__exp_finite" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> "__log_finite" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> "__pow_finite" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> "_dl_lookup_symbol_x" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n2029×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> ceil [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> ceilf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> cos [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> floor [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> floorf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> gettimeofday [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> memcpy [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> "memcpy@GLIBC_2.2.5" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> mprotect [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> rint [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> rintf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> sin [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> strcasecmp [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> strcspn [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> strncasecmp [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> strpbrk [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> strspn [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_relocate_object" -> time [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_runtime_resolve_xsave" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_runtime_resolve_xsave\n0.00%\n(0.00%)\n8×"];
	"_dl_runtime_resolve_xsave" -> "_dl_fixup" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"_dl_runtime_resolve_xsave'2" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_runtime_resolve_xsave'2\n0.01%\n(0.00%)\n158×"];
	"_dl_runtime_resolve_xsave'2" -> "_dl_fixup" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n158×", labeldistance="0.50", penwidth="0.50"];
	"_dl_setup_hash" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_setup_hash\n0.00%\n(0.00%)\n8×"];
	"_dl_start" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_start\n0.02%\n(0.00%)\n1×"];
	"_dl_start" -> "_dl_setup_hash" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_start" -> "_dl_sysdep_start" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_sysdep_read_whole_file" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_sysdep_read_whole_file\n0.00%\n(0.00%)\n1×"];
	"_dl_sysdep_read_whole_file" -> "_fxstat" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_sysdep_read_whole_file" -> close [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_sysdep_read_whole_file" -> mmap [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_sysdep_read_whole_file" -> open [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_sysdep_start" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_sysdep_start\n0.02%\n(0.00%)\n1×"];
	"_dl_sysdep_start" -> brk [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_sysdep_start" -> "dl_main" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_sysdep_start" -> "init_cpu_features.constprop.0" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_sysdep_start" -> sbrk [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_sysdep_start" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_sysdep_start_cleanup" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_sysdep_start_cleanup\n0.00%\n(0.00%)\n1×"];
	"_dl_unload_cache" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\n_dl_unload_cache\n0.00%\n(0.00%)\n1×"];
	"_dl_unload_cache" -> munmap [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_dl_vdso_vsym" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_dl_vdso_vsym\n0.00%\n(0.00%)\n5×"];
	"_fxstat" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_fxstat\n0.00%\n(0.00%)\n11×"];
	"_init" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_init\n0.00%\n(0.00%)\n1×"];
	"_init" -> "__ctype_init" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_init" -> "__init_misc" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_init" -> "_dl_vdso_vsym" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"_int_free" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_int_free\n0.00%\n(0.00%)\n51×"];
	"_int_free" -> "malloc_consolidate" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"_int_free" -> "systrim.isra.2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"_int_malloc" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_int_malloc\n0.00%\n(0.00%)\n155×"];
	"_int_malloc" -> "malloc_consolidate" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9×", labeldistance="0.50", penwidth="0.50"];
	"_int_malloc" -> sysmalloc [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"_itoa_word" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_itoa_word\n0.00%\n(0.00%)\n40×"];
	"_mav_finalize_message_chan_send" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n_mav_finalize_message_chan_send\n0.25%\n(0.14%)\n20559×"];
	"_mav_finalize_message_chan_send" -> "HALSITL::Semaphore::give()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n20559×", labeldistance="0.50", penwidth="0.50"];
	"_mav_finalize_message_chan_send" -> "HALSITL::Semaphore::take(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n20559×", labeldistance="0.50", penwidth="0.50"];
	"_mav_finalize_message_chan_send" -> "HALSITL::UARTDriver::write(unsigned char const*, unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.09%\n61677×", labeldistance="0.50", penwidth="0.50"];
	"_pthread_cleanup_pop" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\n_pthread_cleanup_pop\n0.00%\n(0.00%)\n2×"];
	"_pthread_cleanup_pop_restore" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\n_pthread_cleanup_pop_restore\n0.00%\n(0.00%)\n23×"];
	"_pthread_cleanup_push" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\n_pthread_cleanup_push\n0.00%\n(0.00%)\n2×"];
	"_pthread_cleanup_push_defer" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\n_pthread_cleanup_push_defer\n0.00%\n(0.00%)\n23×"];
	"_setjmp" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_setjmp\n0.00%\n(0.00%)\n1×"];
	"_setjmp" -> "__sigsetjmp" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_start" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\n_start\n0.00%\n(0.00%)\n1×"];
	"_start" -> "_dl_runtime_resolve_xsave" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"_xstat" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\n_xstat\n0.00%\n(0.00%)\n11×"];
	accept [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\naccept\n0.00%\n(0.00%)\n0×"];
	accept -> "__accept_nocancel" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	access [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\naccess\n0.00%\n(0.00%)\n7×"];
	acosf [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\nacosf\n0.10%\n(0.01%)\n233456×"];
	acosf -> "__acosf_finite" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.09%\n233457×", labeldistance="0.50", penwidth="0.50"];
	asinf [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\nasinf\n0.44%\n(0.05%)\n966632×"];
	asinf -> "__asinf_finite" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.39%\n966633×", labeldistance="0.50", penwidth="0.50"];
	atan2f [color="#0d1876", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\natan2f\n2.60%\n(0.51%)\n2541895×"];
	atan2f -> "__atan2f_finite" [arrowsize="0.35", color="#0d1675", fontcolor="#0d1675", fontsize="10.00", label="2.09%\n2541896×", labeldistance="0.50", penwidth="0.50"];
	atanf [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\natanf\n1.13%\n(1.13%)\n2649911×"];
	bcmp [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nbcmp\n0.00%\n(0.00%)\n30×"];
	bind [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nbind\n0.00%\n(0.00%)\n3×"];
	"bool std::has_facet<std::ctype<char> >(std::locale const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nbool std::has_facet<std::ctype<char> >(std::locale const&)\n0.00%\n(0.00%)\n3×"];
	"bool std::has_facet<std::ctype<char> >(std::locale const&)" -> "__dynamic_cast" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"bool std::has_facet<std::ctype<char> >(std::locale const&)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"bool std::has_facet<std::ctype<char> >(std::locale const&)" -> "std::locale::id::_M_id() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"bool std::has_facet<std::ctype<wchar_t> >(std::locale const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nbool std::has_facet<std::ctype<wchar_t> >(std::locale const&)\n0.00%\n(0.00%)\n3×"];
	"bool std::has_facet<std::ctype<wchar_t> >(std::locale const&)" -> "__dynamic_cast" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"bool std::has_facet<std::ctype<wchar_t> >(std::locale const&)" -> "std::locale::id::_M_id() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"bool std::has_facet<std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nbool std::has_facet<std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)\n0.00%\n(0.00%)\n3×"];
	"bool std::has_facet<std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)" -> "__dynamic_cast" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"bool std::has_facet<std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)" -> "std::locale::id::_M_id() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"bool std::has_facet<std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nbool std::has_facet<std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)\n0.00%\n(0.00%)\n3×"];
	"bool std::has_facet<std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)" -> "__dynamic_cast" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"bool std::has_facet<std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)" -> "std::locale::id::_M_id() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"bool std::has_facet<std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nbool std::has_facet<std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)\n0.00%\n(0.00%)\n3×"];
	"bool std::has_facet<std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)" -> "__dynamic_cast" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"bool std::has_facet<std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)" -> "std::locale::id::_M_id() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"bool std::has_facet<std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nbool std::has_facet<std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)\n0.00%\n(0.00%)\n3×"];
	"bool std::has_facet<std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)" -> "__dynamic_cast" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"bool std::has_facet<std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)" -> "std::locale::id::_M_id() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	brk [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nbrk\n0.00%\n(0.00%)\n5×"];
	btowc [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nbtowc\n0.00%\n(0.00%)\n255×"];
	btowc -> "__gconv_btwoc_ascii" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n128×", labeldistance="0.50", penwidth="0.50"];
	btowc -> "_dl_mcount_wrapper_check" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n128×", labeldistance="0.50", penwidth="0.50"];
	"buffered_vfprintf" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nbuffered_vfprintf\n0.00%\n(0.00%)\n15×"];
	"buffered_vfprintf" -> "_IO_file_xsputn@@GLIBC_2.2.5" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"buffered_vfprintf" -> "_pthread_cleanup_pop_restore" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"buffered_vfprintf" -> "_pthread_cleanup_push_defer" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"buffered_vfprintf" -> "vfprintf'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\ncall_init.part.0\n0.00%\n(0.00%)\n8×"];
	"call_init.part.0" -> "0x00000000000006b0" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "0x0000000000003140" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "0x00000000000056d0" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "0x0000000000005b00" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "0x0000000000089e10" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "0x0000000000089e90" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "0x0000000000089eb0" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "0x0000000000089f40" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "0x000000000008a050" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "0x000000000008a280" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "0x000000000008a2c0" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "0x000000000008a340" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "0x000000000008a3c0" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "0x000000000008a480" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "0x000000000008a610" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "0x0000000004a28578" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "0x0000000004cb0a00" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "0x0000000004fb1428" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "0x00000000052b7790" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "0x00000000054d0580" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "__cpu_indicator_init" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "_init" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "dlinit_alt" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "elision_init" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"call_init.part.0" -> "init_cacheinfo" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	calloc [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\ncalloc\n0.00%\n(0.00%)\n132×"];
	calloc -> "__GI_memset" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n87×", labeldistance="0.50", penwidth="0.50"];
	calloc -> "_int_malloc" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n114×", labeldistance="0.50", penwidth="0.50"];
	calloc -> malloc [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n19×", labeldistance="0.50", penwidth="0.50"];
	ceil [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\nceil\n0.00%\n(0.00%)\n1×"];
	ceilf [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\nceilf\n0.00%\n(0.00%)\n1×"];
	"check_lat(int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\ncheck_lat(int)\n0.00%\n(0.00%)\n1×"];
	"check_lng(int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\ncheck_lng(int)\n0.00%\n(0.00%)\n1×"];
	"check_match" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\ncheck_match\n0.00%\n(0.00%)\n2173×"];
	"check_match" -> strcmp [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2324×", labeldistance="0.50", penwidth="0.50"];
	"clock_gettime" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nclock_gettime\n0.00%\n(0.00%)\n0×"];
	"clock_gettime" -> "__syscall_clock_gettime" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	close [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\nclose\n0.00%\n(0.00%)\n16×"];
	close -> "__close_nocancel" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10×", labeldistance="0.50", penwidth="0.50"];
	"comm_get_txspace(mavlink_channel_t)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\ncomm_get_txspace(mavlink_channel_t)\n0.15%\n(0.03%)\n151177×"];
	"comm_get_txspace(mavlink_channel_t)" -> "GCS_Copter::chan(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n151177×", labeldistance="0.50", penwidth="0.50"];
	"comm_get_txspace(mavlink_channel_t)" -> "HALSITL::UARTDriver::txspace()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.11%\n151177×", labeldistance="0.50", penwidth="0.50"];
	"comm_get_txspace(mavlink_channel_t)" -> "gcs()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n151177×", labeldistance="0.50", penwidth="0.50"];
	connect [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\nconnect\n0.00%\n(0.00%)\n0×"];
	connect -> "__connect_nocancel" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	cos [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\ncos\n0.00%\n(0.00%)\n1×"];
	cosf [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\ncosf\n0.77%\n(0.77%)\n3205978×"];
	"crc16_ccitt(unsigned char const*, unsigned int, unsigned short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\ncrc16_ccitt(unsigned char const*, unsigned int, unsigned short)\n0.00%\n(0.00%)\n14×"];
	"dl_main" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\ndl_main\n0.02%\n(0.00%)\n1×"];
	"dl_main" -> "_dl_add_to_namespace_list" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"dl_main" -> "_dl_add_to_slotinfo" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"dl_main" -> "_dl_allocate_tls_init" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"dl_main" -> "_dl_count_modids" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"dl_main" -> "_dl_debug_initialize" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"dl_main" -> "_dl_debug_state" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"dl_main" -> "_dl_discover_osversion" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"dl_main" -> "_dl_init_paths" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"dl_main" -> "_dl_map_object_deps" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"dl_main" -> "_dl_new_object" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"dl_main" -> "_dl_next_ld_env_entry" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"dl_main" -> "_dl_receive_error" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"dl_main" -> "_dl_relocate_object" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n8×", labeldistance="0.50", penwidth="0.50"];
	"dl_main" -> "_dl_setup_hash" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"dl_main" -> "_dl_sysdep_start_cleanup" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"dl_main" -> "_dl_unload_cache" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"dl_main" -> access [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"dl_main" -> bcmp [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"dl_main" -> "handle_ld_preload" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"dl_main" -> "init_tls" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"dl_main" -> strcmp [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"dlinit_alt" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\ndlinit_alt\n0.00%\n(0.00%)\n1×"];
	"do_lookup_x" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\ndo_lookup_x\n0.01%\n(0.01%)\n2195×"];
	"do_lookup_x" -> "_dl_higher_prime_number" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"do_lookup_x" -> "_dl_name_match_p" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n703×", labeldistance="0.50", penwidth="0.50"];
	"do_lookup_x" -> calloc [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"do_lookup_x" -> "check_match" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2173×", labeldistance="0.50", penwidth="0.50"];
	"do_lookup_x" -> free [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"do_lookup_x" -> "rtld_lock_default_lock_recursive" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n122×", labeldistance="0.50", penwidth="0.50"];
	"do_lookup_x" -> "rtld_lock_default_unlock_recursive" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n122×", labeldistance="0.50", penwidth="0.50"];
	"do_lookup_x" -> strcmp [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n40×", labeldistance="0.50", penwidth="0.50"];
	"elision_init" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\nelision_init\n0.00%\n(0.00%)\n1×"];
	expf [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\nexpf\n0.01%\n(0.00%)\n20085×"];
	expf -> "__expf_finite" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n20086×", labeldistance="0.50", penwidth="0.50"];
	"failsafe_check_static()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nfailsafe_check_static()\n0.07%\n(0.00%)\n219270×"];
	"failsafe_check_static()" -> "Copter::failsafe_check()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n219270×", labeldistance="0.50", penwidth="0.50"];
	"fclose@@GLIBC_2.2.5" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nfclose@@GLIBC_2.2.5\n0.00%\n(0.00%)\n3×"];
	"fclose@@GLIBC_2.2.5" -> "0x00000000057078a8" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"fclose@@GLIBC_2.2.5" -> "_IO_file_close_it@@GLIBC_2.2.5" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"fclose@@GLIBC_2.2.5" -> "_IO_file_finish@@GLIBC_2.2.5" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"fclose@@GLIBC_2.2.5" -> "_IO_un_link" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	fcntl [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\nfcntl\n0.00%\n(0.00%)\n48×"];
	feenableexcept [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\nfeenableexcept\n0.00%\n(0.00%)\n0×"];
	fflush [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nfflush\n0.00%\n(0.00%)\n3×"];
	fflush -> "_IO_file_sync@@GLIBC_2.2.5" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	fgets [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nfgets\n0.00%\n(0.00%)\n391×"];
	fgets -> "_IO_getline" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n392×", labeldistance="0.50", penwidth="0.50"];
	"fill_nanf(float*, unsigned short)" [color="#0c5887", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nfill_nanf(float*, unsigned short)\n15.38%\n(15.38%)\n1496462×"];
	"fill_nanf_stack()" [color="#0d3e80", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nfill_nanf_stack()\n10.60%\n(0.10%)\n852623×"];
	"fill_nanf_stack()" -> "fill_nanf(float*, unsigned short)" [arrowsize="0.35", color="#0d3d80", fontcolor="#0d3d80", fontsize="10.00", label="10.51%\n852623×", labeldistance="0.50", penwidth="0.50"];
	"fill_stack_nan()" [color="#0d1475", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nfill_stack_nan()\n1.76%\n(0.01%)\n72071×"];
	"fill_stack_nan()" -> "fill_nanf(float*, unsigned short)" [arrowsize="0.35", color="#0d1475", fontcolor="#0d1475", fontsize="10.00", label="1.75%\n72071×", labeldistance="0.50", penwidth="0.50"];
	"fillin_rpath" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\nfillin_rpath\n0.00%\n(0.00%)\n1×"];
	"fillin_rpath" -> "0x0000000004000ab0" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"fillin_rpath" -> index [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"fillin_rpath" -> malloc [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"fillin_rpath" -> mempcpy [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"fillin_rpath" -> strdup [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"fillin_rpath" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"fillin_rpath" -> strsep [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"float constrain_value<float>(float, float, float)" [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nfloat constrain_value<float>(float, float, float)\n1.08%\n(1.08%)\n14447236×"];
	"float safe_asin<float>(float)" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nfloat safe_asin<float>(float)\n0.55%\n(0.11%)\n966601×"];
	"float safe_asin<float>(float)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"float safe_asin<float>(float)" -> asinf [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.44%\n966600×", labeldistance="0.50", penwidth="0.50"];
	"float safe_sqrt<float>(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nfloat safe_sqrt<float>(float)\n0.04%\n(0.04%)\n600457×"];
	"float wrap_2PI<float>(float)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nfloat wrap_2PI<float>(float)\n0.21%\n(0.05%)\n572073×"];
	"float wrap_2PI<float>(float)" -> fmodf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.16%\n572073×", labeldistance="0.50", penwidth="0.50"];
	"float wrap_PI<float>(float)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nfloat wrap_PI<float>(float)\n0.24%\n(0.03%)\n572073×"];
	"float wrap_PI<float>(float)" -> "float wrap_2PI<float>(float)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.21%\n572073×", labeldistance="0.50", penwidth="0.50"];
	floor [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\nfloor\n0.00%\n(0.00%)\n1×"];
	floorf [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\nfloorf\n0.00%\n(0.00%)\n1×"];
	fmaxf [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\nfmaxf\n0.01%\n(0.01%)\n266841×"];
	fmod [color="#0d1275", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\nfmod\n1.38%\n(0.53%)\n4755638×"];
	fmod -> "__fmod_finite" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.85%\n4755639×", labeldistance="0.50", penwidth="0.50"];
	fmodf [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\nfmodf\n0.16%\n(0.07%)\n583416×"];
	fmodf -> "__fmodf_finite" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.10%\n583417×", labeldistance="0.50", penwidth="0.50"];
	"fopen@@GLIBC_2.2.5" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nfopen@@GLIBC_2.2.5\n0.00%\n(0.00%)\n3×"];
	"fopen@@GLIBC_2.2.5" -> "__fopen_internal" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	free [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nfree\n0.00%\n(0.00%)\n54×"];
	free -> "_int_free" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n51×", labeldistance="0.50", penwidth="0.50"];
	fwrite [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nfwrite\n0.00%\n(0.00%)\n1×"];
	fwrite -> "_IO_file_xsputn@@GLIBC_2.2.5" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"gcs()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\ngcs()\n0.00%\n(0.00%)\n151484×"];
	"get_bearing_cd(Vector3<float> const&, Vector3<float> const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nget_bearing_cd(Vector3<float> const&, Vector3<float> const&)\n0.00%\n(0.00%)\n494×"];
	"get_bearing_cd(Vector3<float> const&, Vector3<float> const&)" -> atan2f [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n494×", labeldistance="0.50", penwidth="0.50"];
	getenv [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\ngetenv\n0.00%\n(0.00%)\n25×"];
	getenv -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n26×", labeldistance="0.50", penwidth="0.50"];
	getppid [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\ngetppid\n0.00%\n(0.00%)\n0×"];
	getrlimit [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\ngetrlimit\n0.00%\n(0.00%)\n0×"];
	gettimeofday [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\ngettimeofday\n0.00%\n(0.00%)\n2×"];
	gettimeofday -> "_dl_vdso_vsym" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"hack_digit" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nhack_digit\n0.00%\n(0.00%)\n18×"];
	"hack_digit" -> "__mpn_divrem" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"hack_digit" -> "__mpn_mul_1" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"handle_intel" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nhandle_intel\n0.00%\n(0.00%)\n2×"];
	"handle_intel" -> "intel_check_word" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"handle_ld_preload" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\nhandle_ld_preload\n0.00%\n(0.00%)\n1×"];
	"handle_ld_preload" -> "_dl_catch_error" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"handle_ld_preload" -> memcpy [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	index [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nindex\n0.00%\n(0.00%)\n26×"];
	"inet_addr" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\ninet_addr\n0.00%\n(0.00%)\n1×"];
	"inet_addr" -> strtoul [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"init_cacheinfo" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\ninit_cacheinfo\n0.00%\n(0.00%)\n1×"];
	"init_cacheinfo" -> "handle_intel" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"init_cpu_features.constprop.0" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\ninit_cpu_features.constprop.0\n0.00%\n(0.00%)\n1×"];
	"init_tls" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\ninit_tls\n0.00%\n(0.00%)\n1×"];
	"init_tls" -> "_dl_allocate_tls_storage" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"init_tls" -> "_dl_determine_tlsoffset" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"init_tls" -> calloc [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"intel_check_word" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nintel_check_word\n0.00%\n(0.00%)\n4×"];
	"is_bounded_int32(int, int, int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nis_bounded_int32(int, int, int)\n0.00%\n(0.00%)\n3×"];
	kill [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nkill\n0.01%\n(0.01%)\n219331×"];
	listen [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nlisten\n0.00%\n(0.00%)\n2×"];
	log [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\nlog\n0.87%\n(0.03%)\n657995×"];
	log -> "__ieee754_log_avx" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.84%\n657996×", labeldistance="0.50", penwidth="0.50"];
	log2f [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\nlog2f\n0.03%\n(0.00%)\n44263×"];
	log2f -> "__log2f_finite" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n44264×", labeldistance="0.50", penwidth="0.50"];
	logf [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\nlogf\n0.00%\n(0.00%)\n1816×"];
	logf -> "__logf_finite" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1817×", labeldistance="0.50", penwidth="0.50"];
	lseek [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\nlseek\n0.00%\n(0.00%)\n35×"];
	main [color="#ff0000", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nmain\n99.98%\n(0.00%)\n1×"];
	main -> "HAL_SITL::run(int, char* const*, AP_HAL::HAL::Callbacks*) const" [arrowsize="1.00", color="#ff0000", fontcolor="#ff0000", fontsize="10.00", label="99.98%\n1×", labeldistance="4.00", penwidth="4.00"];
	malloc [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nmalloc\n0.00%\n(0.00%)\n86×"];
	malloc -> "__libc_memalign" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n46×", labeldistance="0.50", penwidth="0.50"];
	malloc -> "_int_malloc" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n40×", labeldistance="0.50", penwidth="0.50"];
	malloc -> "malloc_hook_ini" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"malloc_consolidate" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nmalloc_consolidate\n0.00%\n(0.00%)\n12×"];
	"malloc_hook_ini" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nmalloc_hook_ini\n0.00%\n(0.00%)\n1×"];
	"malloc_hook_ini" -> "_int_malloc" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"malloc_hook_ini" -> "ptmalloc_init.part.5" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"map_doit" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\nmap_doit\n0.00%\n(0.00%)\n1×"];
	"map_doit" -> "_dl_map_object" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"match_symbol" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\nmatch_symbol\n0.00%\n(0.00%)\n42×"];
	"match_symbol" -> strcmp [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n42×", labeldistance="0.50", penwidth="0.50"];
	"mavlink_get_channel_status" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nmavlink_get_channel_status\n0.02%\n(0.02%)\n546857×"];
	"mavlink_get_msg_entry" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nmavlink_get_msg_entry\n0.00%\n(0.00%)\n52×"];
	"mavlink_msg_scaled_imu2_send" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nmavlink_msg_scaled_imu2_send\n0.01%\n(0.00%)\n721×"];
	"mavlink_msg_scaled_imu2_send" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"mavlink_msg_scaled_imu3_send" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nmavlink_msg_scaled_imu3_send\n0.01%\n(0.00%)\n721×"];
	"mavlink_msg_scaled_imu3_send" -> "_mav_finalize_message_chan_send" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n721×", labeldistance="0.50", penwidth="0.50"];
	"mavlink_parse_char" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nmavlink_parse_char\n0.00%\n(0.00%)\n4580×"];
	"mavlink_parse_char" -> "__memset_avx2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	memchr [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nmemchr\n0.00%\n(0.00%)\n388×"];
	memcpy [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\nmemcpy\n0.00%\n(0.00%)\n40×"];
	"memcpy@@GLIBC_2.14" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nmemcpy@@GLIBC_2.14\n0.00%\n(0.00%)\n1×"];
	"memcpy@GLIBC_2.2.5" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nmemcpy@GLIBC_2.2.5\n0.00%\n(0.00%)\n1×"];
	mempcpy [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\nmempcpy\n0.00%\n(0.00%)\n56×"];
	memset [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nmemset\n0.00%\n(0.00%)\n20×"];
	mkdir [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nmkdir\n0.00%\n(0.00%)\n0×"];
	mmap [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\nmmap\n0.00%\n(0.00%)\n21×"];
	mprotect [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\nmprotect\n0.00%\n(0.00%)\n13×"];
	munmap [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\nmunmap\n0.00%\n(0.00%)\n1×"];
	nanosleep [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nnanosleep\n0.00%\n(0.00%)\n5466×"];
	nanosleep -> "__nanosleep_nocancel" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5466×", labeldistance="0.50", penwidth="0.50"];
	newlocale [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nnewlocale\n0.00%\n(0.00%)\n0×"];
	open [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\nopen\n0.00%\n(0.00%)\n39×"];
	open -> "__open_nocancel" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n17×", labeldistance="0.50", penwidth="0.50"];
	"open_path" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\nopen_path\n0.00%\n(0.00%)\n5×"];
	"open_path" -> "_xstat" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"open_path" -> mempcpy [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n42×", labeldistance="0.50", penwidth="0.50"];
	"open_path" -> "open_verify.constprop.7" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n16×", labeldistance="0.50", penwidth="0.50"];
	"open_verify.constprop.7" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\nopen_verify.constprop.7\n0.00%\n(0.00%)\n22×"];
	"open_verify.constprop.7" -> bcmp [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n24×", labeldistance="0.50", penwidth="0.50"];
	"open_verify.constprop.7" -> open [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n22×", labeldistance="0.50", penwidth="0.50"];
	"open_verify.constprop.7" -> read [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	openaux [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\nopenaux\n0.00%\n(0.00%)\n15×"];
	openaux -> "_dl_map_object" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"operator delete(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\noperator delete(void*)\n0.00%\n(0.00%)\n12×"];
	"operator delete(void*)" -> free [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n12×", labeldistance="0.50", penwidth="0.50"];
	"operator delete[](void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\noperator delete[](void*)\n0.00%\n(0.00%)\n1×"];
	"operator delete[](void*)" -> free [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"operator new(unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\noperator new(unsigned long)\n0.00%\n(0.00%)\n55×"];
	"operator new(unsigned long)" -> calloc [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n55×", labeldistance="0.50", penwidth="0.50"];
	"operator new[](unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\noperator new[](unsigned long)\n0.00%\n(0.00%)\n27×"];
	"operator new[](unsigned long)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"operator new[](unsigned long)" -> calloc [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n26×", labeldistance="0.50", penwidth="0.50"];
	pipe [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\npipe\n0.00%\n(0.00%)\n1×"];
	powf [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\npowf\n0.37%\n(0.03%)\n151060×"];
	powf -> "__powf_finite" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.35%\n151061×", labeldistance="0.50", penwidth="0.50"];
	"print_vprintf(AP_HAL::BetterStream*, char const*, __va_list_tag*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nprint_vprintf(AP_HAL::BetterStream*, char const*, __va_list_tag*)\n0.00%\n(0.00%)\n39×"];
	"print_vprintf(AP_HAL::BetterStream*, char const*, __va_list_tag*)" -> "BufferPrinter::write(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n849×", labeldistance="0.50", penwidth="0.50"];
	"print_vprintf(AP_HAL::BetterStream*, char const*, __va_list_tag*)" -> "HALSITL::UARTDriver::write(unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n141×", labeldistance="0.50", penwidth="0.50"];
	"print_vprintf(AP_HAL::BetterStream*, char const*, __va_list_tag*)" -> strnlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n11×", labeldistance="0.50", penwidth="0.50"];
	"print_vprintf(AP_HAL::BetterStream*, char const*, __va_list_tag*)" -> "ultoa_invert(unsigned int, char*, unsigned char)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n22×", labeldistance="0.50", penwidth="0.50"];
	"pthread_mutex_init" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\npthread_mutex_init\n0.00%\n(0.00%)\n34×"];
	"pthread_mutex_lock" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\npthread_mutex_lock\n0.67%\n(0.67%)\n1987044×"];
	"pthread_mutex_trylock" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\npthread_mutex_trylock\n0.11%\n(0.11%)\n298146×"];
	"pthread_mutex_unlock" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\npthread_mutex_unlock\n0.60%\n(0.60%)\n2285190×"];
	"pthread_mutexattr_init" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\npthread_mutexattr_init\n0.00%\n(0.00%)\n34×"];
	"pthread_mutexattr_settype" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\npthread_mutexattr_settype\n0.00%\n(0.00%)\n34×"];
	"pthread_once" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\npthread_once\n0.00%\n(0.00%)\n21×"];
	"pthread_once" -> "__pthread_once_slow" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"pthread_once'2" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\npthread_once'2\n0.00%\n(0.00%)\n14×"];
	"pthread_once'2" -> "__pthread_once_slow'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"pthread_self" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\npthread_self\n0.02%\n(0.02%)\n1111759×"];
	"ptmalloc_init.part.5" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nptmalloc_init.part.5\n0.00%\n(0.00%)\n1×"];
	"ptmalloc_init.part.5" -> "_dl_addr" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	rand [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nrand\n0.74%\n(0.06%)\n1677141×"];
	rand -> random [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.68%\n1677142×", labeldistance="0.50", penwidth="0.50"];
	"rand_float()" [color="#0d347e", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nrand_float()\n8.65%\n(2.45%)\n15398936×"];
	"rand_float()" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"rand_float()" -> random [arrowsize="0.35", color="#0d287b", fontcolor="#0d287b", fontsize="10.00", label="6.20%\n15398935×", labeldistance="0.50", penwidth="0.50"];
	"rand_vec3f()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nrand_vec3f()\n0.04%\n(0.01%)\n18266×"];
	"rand_vec3f()" -> "Vector3<float>::length() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n36532×", labeldistance="0.50", penwidth="0.50"];
	"rand_vec3f()" -> "Vector3<float>::operator/=(float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18266×", labeldistance="0.50", penwidth="0.50"];
	"rand_vec3f()" -> random [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n54798×", labeldistance="0.50", penwidth="0.50"];
	random [color="#0d2b7c", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nrandom\n6.90%\n(2.73%)\n17130875×"];
	random -> "random_r" [arrowsize="0.35", color="#0d1f78", fontcolor="#0d1f78", fontsize="10.00", label="4.17%\n17130876×", labeldistance="0.50", penwidth="0.50"];
	"random_r" [color="#0d1f78", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nrandom_r\n4.17%\n(4.17%)\n17130876×"];
	"rc()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nrc()\n0.00%\n(0.00%)\n185182×"];
	read [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\nread\n0.00%\n(0.00%)\n1857×"];
	read -> "__read_nocancel" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1852×", labeldistance="0.50", penwidth="0.50"];
	"read_int" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nread_int\n0.00%\n(0.00%)\n17×"];
	recv [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\nrecv\n0.00%\n(0.00%)\n218×"];
	recvfrom [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\nrecvfrom\n0.00%\n(0.00%)\n3447×"];
	recvfrom -> "__recvfrom_nocancel" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3448×", labeldistance="0.50", penwidth="0.50"];
	rindex [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nrindex\n0.00%\n(0.00%)\n1×"];
	rint [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\nrint\n0.00%\n(0.00%)\n1×"];
	rintf [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\nrintf\n0.00%\n(0.00%)\n1×"];
	"round_and_return" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nround_and_return\n0.00%\n(0.00%)\n250×"];
	"round_and_return" -> "__mpn_construct_float" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n250×", labeldistance="0.50", penwidth="0.50"];
	roundf [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\nroundf\n0.00%\n(0.00%)\n0×"];
	"rtld_lock_default_lock_recursive" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\nrtld_lock_default_lock_recursive\n0.00%\n(0.00%)\n129×"];
	"rtld_lock_default_unlock_recursive" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\nrtld_lock_default_unlock_recursive\n0.00%\n(0.00%)\n129×"];
	sbrk [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nsbrk\n0.00%\n(0.00%)\n5×"];
	sbrk -> brk [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	select [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nselect\n0.12%\n(0.03%)\n1574380×"];
	select -> "__select_nocancel" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.09%\n1574381×", labeldistance="0.50", penwidth="0.50"];
	send [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\nsend\n0.03%\n(0.03%)\n220330×"];
	setsockopt [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nsetsockopt\n0.00%\n(0.00%)\n6×"];
	setvbuf [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nsetvbuf\n0.00%\n(0.00%)\n1×"];
	setvbuf -> "_IO_file_setbuf@@GLIBC_2.2.5" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"short constrain_value<short>(short, short, short)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nshort constrain_value<short>(short, short, short)\n0.00%\n(0.00%)\n42525×"];
	sigaction [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\nsigaction\n0.00%\n(0.00%)\n3×"];
	sigaction -> "__libc_sigaction" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	sigemptyset [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nsigemptyset\n0.00%\n(0.00%)\n2×"];
	sin [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\nsin\n0.00%\n(0.00%)\n1×"];
	sincosf [color="#0d1174", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\nsincosf\n1.03%\n(1.03%)\n2825944×"];
	sinf [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\nsinf\n0.04%\n(0.04%)\n145952×"];
	socket [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nsocket\n0.00%\n(0.00%)\n5×"];
	statfs [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nstatfs\n0.00%\n(0.00%)\n156×"];
	"std::__cxx11::messages<char>::messages(unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::__cxx11::messages<char>::messages(unsigned long)\n0.00%\n(0.00%)\n0×"];
	"std::__cxx11::messages<char>::messages(unsigned long)" -> "std::locale::facet::_S_get_c_locale()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::__cxx11::messages<char>::messages(unsigned long)" -> "std::locale::facet::_S_get_c_name()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::__cxx11::messages<wchar_t>::messages(unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::__cxx11::messages<wchar_t>::messages(unsigned long)\n0.00%\n(0.00%)\n0×"];
	"std::__cxx11::messages<wchar_t>::messages(unsigned long)" -> "std::locale::facet::_S_get_c_locale()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::__cxx11::messages<wchar_t>::messages(unsigned long)" -> "std::locale::facet::_S_get_c_name()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::__cxx11::moneypunct<char, false>::_M_initialize_moneypunct(__locale_struct*, char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::__cxx11::moneypunct<char, false>::_M_initialize_moneypunct(__locale_struct*, char const*)\n0.00%\n(0.00%)\n0×"];
	"std::__cxx11::moneypunct<char, true>::_M_initialize_moneypunct(__locale_struct*, char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::__cxx11::moneypunct<char, true>::_M_initialize_moneypunct(__locale_struct*, char const*)\n0.00%\n(0.00%)\n0×"];
	"std::__cxx11::moneypunct<wchar_t, false>::_M_initialize_moneypunct(__locale_struct*, char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::__cxx11::moneypunct<wchar_t, false>::_M_initialize_moneypunct(__locale_struct*, char const*)\n0.00%\n(0.00%)\n0×"];
	"std::__cxx11::moneypunct<wchar_t, true>::_M_initialize_moneypunct(__locale_struct*, char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::__cxx11::moneypunct<wchar_t, true>::_M_initialize_moneypunct(__locale_struct*, char const*)\n0.00%\n(0.00%)\n0×"];
	"std::__cxx11::numpunct<char>::_M_initialize_numpunct(__locale_struct*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::__cxx11::numpunct<char>::_M_initialize_numpunct(__locale_struct*)\n0.00%\n(0.00%)\n0×"];
	"std::__cxx11::numpunct<wchar_t>::_M_initialize_numpunct(__locale_struct*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::__cxx11::numpunct<wchar_t>::_M_initialize_numpunct(__locale_struct*)\n0.00%\n(0.00%)\n0×"];
	"std::__timepunct<char>::_M_initialize_timepunct(__locale_struct*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::__timepunct<char>::_M_initialize_timepunct(__locale_struct*)\n0.00%\n(0.00%)\n0×"];
	"std::__timepunct<char>::_M_initialize_timepunct(__locale_struct*)" -> "std::locale::facet::_S_get_c_locale()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::__timepunct<char>::__timepunct(std::__timepunct_cache<char>*, unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::__timepunct<char>::__timepunct(std::__timepunct_cache<char>*, unsigned long)\n0.00%\n(0.00%)\n0×"];
	"std::__timepunct<char>::__timepunct(std::__timepunct_cache<char>*, unsigned long)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::__timepunct<char>::__timepunct(std::__timepunct_cache<char>*, unsigned long)" -> "std::locale::facet::_S_get_c_name()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::__timepunct<wchar_t>::_M_initialize_timepunct(__locale_struct*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::__timepunct<wchar_t>::_M_initialize_timepunct(__locale_struct*)\n0.00%\n(0.00%)\n0×"];
	"std::__timepunct<wchar_t>::_M_initialize_timepunct(__locale_struct*)" -> "std::locale::facet::_S_get_c_locale()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::__timepunct<wchar_t>::__timepunct(std::__timepunct_cache<wchar_t>*, unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::__timepunct<wchar_t>::__timepunct(std::__timepunct_cache<wchar_t>*, unsigned long)\n0.00%\n(0.00%)\n0×"];
	"std::__timepunct<wchar_t>::__timepunct(std::__timepunct_cache<wchar_t>*, unsigned long)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::__timepunct<wchar_t>::__timepunct(std::__timepunct_cache<wchar_t>*, unsigned long)" -> "std::locale::facet::_S_get_c_name()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::basic_ios<char, std::char_traits<char> >::_M_cache_locale(std::locale const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::basic_ios<char, std::char_traits<char> >::_M_cache_locale(std::locale const&)\n0.00%\n(0.00%)\n3×"];
	"std::basic_ios<char, std::char_traits<char> >::_M_cache_locale(std::locale const&)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"std::basic_ios<char, std::char_traits<char> >::_M_cache_locale(std::locale const&)" -> "bool std::has_facet<std::ctype<char> >(std::locale const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"std::basic_ios<char, std::char_traits<char> >::_M_cache_locale(std::locale const&)" -> "bool std::has_facet<std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"std::basic_ios<char, std::char_traits<char> >::_M_cache_locale(std::locale const&)" -> "bool std::has_facet<std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"std::basic_ios<char, std::char_traits<char> >::_M_cache_locale(std::locale const&)" -> "std::ctype<char> const& std::use_facet<std::ctype<char> >(std::locale const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"std::basic_ios<char, std::char_traits<char> >::_M_cache_locale(std::locale const&)" -> "std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"std::basic_ios<char, std::char_traits<char> >::_M_cache_locale(std::locale const&)" -> "std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)\n0.00%\n(0.00%)\n3×"];
	"std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)" -> "std::basic_ios<char, std::char_traits<char> >::_M_cache_locale(std::locale const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)" -> "std::ios_base::_M_init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"std::basic_ios<wchar_t, std::char_traits<wchar_t> >::_M_cache_locale(std::locale const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::basic_ios<wchar_t, std::char_traits<wchar_t> >::_M_cache_locale(std::locale const&)\n0.00%\n(0.00%)\n3×"];
	"std::basic_ios<wchar_t, std::char_traits<wchar_t> >::_M_cache_locale(std::locale const&)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"std::basic_ios<wchar_t, std::char_traits<wchar_t> >::_M_cache_locale(std::locale const&)" -> "bool std::has_facet<std::ctype<wchar_t> >(std::locale const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"std::basic_ios<wchar_t, std::char_traits<wchar_t> >::_M_cache_locale(std::locale const&)" -> "bool std::has_facet<std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"std::basic_ios<wchar_t, std::char_traits<wchar_t> >::_M_cache_locale(std::locale const&)" -> "bool std::has_facet<std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"std::basic_ios<wchar_t, std::char_traits<wchar_t> >::_M_cache_locale(std::locale const&)" -> "std::ctype<wchar_t> const& std::use_facet<std::ctype<wchar_t> >(std::locale const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"std::basic_ios<wchar_t, std::char_traits<wchar_t> >::_M_cache_locale(std::locale const&)" -> "std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"std::basic_ios<wchar_t, std::char_traits<wchar_t> >::_M_cache_locale(std::locale const&)" -> "std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"std::basic_ios<wchar_t, std::char_traits<wchar_t> >::init(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::basic_ios<wchar_t, std::char_traits<wchar_t> >::init(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)\n0.00%\n(0.00%)\n3×"];
	"std::basic_ios<wchar_t, std::char_traits<wchar_t> >::init(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::basic_ios<wchar_t, std::char_traits<wchar_t> >::init(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)" -> "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::_M_cache_locale(std::locale const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"std::basic_ios<wchar_t, std::char_traits<wchar_t> >::init(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)" -> "std::ios_base::_M_init()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"std::codecvt<char, char, __mbstate_t>::codecvt(unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::codecvt<char, char, __mbstate_t>::codecvt(unsigned long)\n0.00%\n(0.00%)\n0×"];
	"std::codecvt<char, char, __mbstate_t>::codecvt(unsigned long)" -> "std::locale::facet::_S_get_c_locale()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::codecvt<wchar_t, char, __mbstate_t>::codecvt(unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::codecvt<wchar_t, char, __mbstate_t>::codecvt(unsigned long)\n0.00%\n(0.00%)\n0×"];
	"std::codecvt<wchar_t, char, __mbstate_t>::codecvt(unsigned long)" -> "std::locale::facet::_S_get_c_locale()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::ctype<char> const& std::use_facet<std::ctype<char> >(std::locale const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::ctype<char> const& std::use_facet<std::ctype<char> >(std::locale const&)\n0.00%\n(0.00%)\n3×"];
	"std::ctype<char> const& std::use_facet<std::ctype<char> >(std::locale const&)" -> "__dynamic_cast" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"std::ctype<char> const& std::use_facet<std::ctype<char> >(std::locale const&)" -> "std::locale::id::_M_id() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"std::ctype<char>::ctype(unsigned short const*, bool, unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::ctype<char>::ctype(unsigned short const*, bool, unsigned long)\n0.00%\n(0.00%)\n0×"];
	"std::ctype<char>::ctype(unsigned short const*, bool, unsigned long)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::ctype<wchar_t> const& std::use_facet<std::ctype<wchar_t> >(std::locale const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::ctype<wchar_t> const& std::use_facet<std::ctype<wchar_t> >(std::locale const&)\n0.00%\n(0.00%)\n3×"];
	"std::ctype<wchar_t> const& std::use_facet<std::ctype<wchar_t> >(std::locale const&)" -> "__dynamic_cast" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"std::ctype<wchar_t> const& std::use_facet<std::ctype<wchar_t> >(std::locale const&)" -> "std::locale::id::_M_id() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"std::ctype<wchar_t>::_M_convert_to_wmask(unsigned short) const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::ctype<wchar_t>::_M_convert_to_wmask(unsigned short) const\n0.00%\n(0.00%)\n11×"];
	"std::ctype<wchar_t>::_M_convert_to_wmask(unsigned short) const" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::ctype<wchar_t>::_M_convert_to_wmask(unsigned short) const" -> "wctype_l" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9×", labeldistance="0.50", penwidth="0.50"];
	"std::ctype<wchar_t>::_M_initialize_ctype()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::ctype<wchar_t>::_M_initialize_ctype()\n0.00%\n(0.00%)\n0×"];
	"std::ctype<wchar_t>::_M_initialize_ctype()" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"std::ctype<wchar_t>::_M_initialize_ctype()" -> btowc [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n255×", labeldistance="0.50", penwidth="0.50"];
	"std::ctype<wchar_t>::_M_initialize_ctype()" -> "std::ctype<wchar_t>::_M_convert_to_wmask(unsigned short) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n11×", labeldistance="0.50", penwidth="0.50"];
	"std::ctype<wchar_t>::_M_initialize_ctype()" -> uselocale [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::ctype<wchar_t>::_M_initialize_ctype()" -> wctob [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n127×", labeldistance="0.50", penwidth="0.50"];
	"std::ctype<wchar_t>::ctype(unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::ctype<wchar_t>::ctype(unsigned long)\n0.00%\n(0.00%)\n0×"];
	"std::ctype<wchar_t>::ctype(unsigned long)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::ctype<wchar_t>::ctype(unsigned long)" -> "std::locale::facet::_S_get_c_locale()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::enable_if<std::is_floating_point<std::common_type<double, double>::type>::value, bool>::type is_equal<double, double>(double, double)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nstd::enable_if<std::is_floating_point<std::common_type<double, double>::type>::value, bool>::type is_equal<double, double>(double, double)\n0.00%\n(0.00%)\n91×"];
	"std::enable_if<std::is_floating_point<std::common_type<float, float>::type>::value, bool>::type is_equal<float, float>(float, float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nstd::enable_if<std::is_floating_point<std::common_type<float, float>::type>::value, bool>::type is_equal<float, float>(float, float)\n0.16%\n(0.16%)\n2431961×"];
	"std::error_category::error_category()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::error_category::error_category()\n0.00%\n(0.00%)\n1×"];
	"std::future_category()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::future_category()\n0.00%\n(0.00%)\n0×"];
	"std::future_category()" -> "__cxa_atexit" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::future_category()" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"std::ios_base::Init::Init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::ios_base::Init::Init()\n0.00%\n(0.00%)\n0×"];
	"std::ios_base::Init::Init()" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"std::ios_base::Init::Init()" -> "std::basic_ios<char, std::char_traits<char> >::init(std::basic_streambuf<char, std::char_traits<char> >*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"std::ios_base::Init::Init()" -> "std::basic_ios<wchar_t, std::char_traits<wchar_t> >::init(std::basic_streambuf<wchar_t, std::char_traits<wchar_t> >*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n3×", labeldistance="0.50", penwidth="0.50"];
	"std::ios_base::Init::Init()" -> "std::ios_base::ios_base()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"std::ios_base::Init::Init()" -> "std::locale::locale()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5×", labeldistance="0.50", penwidth="0.50"];
	"std::ios_base::_M_init()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::ios_base::_M_init()\n0.00%\n(0.00%)\n7×"];
	"std::ios_base::_M_init()" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"std::ios_base::_M_init()" -> "std::locale::locale()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"std::ios_base::_M_init()" -> "std::locale::operator=(std::locale const&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"std::ios_base::_M_init()" -> "std::locale::~locale()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n7×", labeldistance="0.50", penwidth="0.50"];
	"std::ios_base::ios_base()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::ios_base::ios_base()\n0.00%\n(0.00%)\n7×"];
	"std::ios_base::ios_base()" -> "std::locale::locale()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"std::locale::_Impl::_Impl(unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::locale::_Impl::_Impl(unsigned long)\n0.00%\n(0.00%)\n0×"];
	"std::locale::_Impl::_Impl(unsigned long)" -> "0x00000000000b8fb0" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::locale::_Impl::_Impl(unsigned long)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n16×", labeldistance="0.50", penwidth="0.50"];
	"std::locale::_Impl::_Impl(unsigned long)" -> "std::locale::_Impl::_M_install_facet(std::locale::id const*, std::locale::facet const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n29×", labeldistance="0.50", penwidth="0.50"];
	"std::locale::_Impl::_Impl(unsigned long)" -> "std::locale::facet::_S_get_c_locale()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n2×", labeldistance="0.50", penwidth="0.50"];
	"std::locale::_Impl::_Impl(unsigned long)" -> "std::locale::id::_M_id() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	"std::locale::_Impl::_M_install_facet(std::locale::id const*, std::locale::facet const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::locale::_Impl::_M_install_facet(std::locale::id const*, std::locale::facet const*)\n0.00%\n(0.00%)\n29×"];
	"std::locale::_Impl::_M_install_facet(std::locale::id const*, std::locale::facet const*)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::locale::_Impl::_M_install_facet(std::locale::id const*, std::locale::facet const*)" -> "std::locale::id::_M_id() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n29×", labeldistance="0.50", penwidth="0.50"];
	"std::locale::facet::_S_create_c_locale(__locale_struct*&, char const*, __locale_struct*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::locale::facet::_S_create_c_locale(__locale_struct*&, char const*, __locale_struct*)\n0.00%\n(0.00%)\n0×"];
	"std::locale::facet::_S_create_c_locale(__locale_struct*&, char const*, __locale_struct*)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::locale::facet::_S_get_c_locale()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::locale::facet::_S_get_c_locale()\n0.00%\n(0.00%)\n13×"];
	"std::locale::facet::_S_get_c_locale()" -> "pthread_once'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"std::locale::facet::_S_get_c_name()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::locale::facet::_S_get_c_name()\n0.00%\n(0.00%)\n6×"];
	"std::locale::id::_M_id() const" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::locale::id::_M_id() const\n0.00%\n(0.00%)\n107×"];
	"std::locale::locale()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::locale::locale()\n0.00%\n(0.00%)\n21×"];
	"std::locale::locale()" -> "0x00000000000a0d80" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n22×", labeldistance="0.50", penwidth="0.50"];
	"std::locale::operator=(std::locale const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::locale::operator=(std::locale const&)\n0.00%\n(0.00%)\n7×"];
	"std::locale::~locale()" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::locale::~locale()\n0.00%\n(0.00%)\n7×"];
	"std::messages<char>::messages(unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::messages<char>::messages(unsigned long)\n0.00%\n(0.00%)\n0×"];
	"std::messages<char>::messages(unsigned long)" -> "std::locale::facet::_S_get_c_locale()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::messages<char>::messages(unsigned long)" -> "std::locale::facet::_S_get_c_name()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::messages<wchar_t>::messages(unsigned long)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::messages<wchar_t>::messages(unsigned long)\n0.00%\n(0.00%)\n0×"];
	"std::messages<wchar_t>::messages(unsigned long)" -> "std::locale::facet::_S_get_c_locale()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::messages<wchar_t>::messages(unsigned long)" -> "std::locale::facet::_S_get_c_name()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"std::moneypunct<char, false>::_M_initialize_moneypunct(__locale_struct*, char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::moneypunct<char, false>::_M_initialize_moneypunct(__locale_struct*, char const*)\n0.00%\n(0.00%)\n0×"];
	"std::moneypunct<char, true>::_M_initialize_moneypunct(__locale_struct*, char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::moneypunct<char, true>::_M_initialize_moneypunct(__locale_struct*, char const*)\n0.00%\n(0.00%)\n0×"];
	"std::moneypunct<wchar_t, false>::_M_initialize_moneypunct(__locale_struct*, char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::moneypunct<wchar_t, false>::_M_initialize_moneypunct(__locale_struct*, char const*)\n0.00%\n(0.00%)\n0×"];
	"std::moneypunct<wchar_t, true>::_M_initialize_moneypunct(__locale_struct*, char const*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::moneypunct<wchar_t, true>::_M_initialize_moneypunct(__locale_struct*, char const*)\n0.00%\n(0.00%)\n0×"];
	"std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)\n0.00%\n(0.00%)\n3×"];
	"std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)" -> "__dynamic_cast" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::num_get<char, std::istreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)" -> "std::locale::id::_M_id() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)\n0.00%\n(0.00%)\n3×"];
	"std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)" -> "__dynamic_cast" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::num_get<wchar_t, std::istreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)" -> "std::locale::id::_M_id() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)\n0.00%\n(0.00%)\n3×"];
	"std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)" -> "__dynamic_cast" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > const& std::use_facet<std::num_put<char, std::ostreambuf_iterator<char, std::char_traits<char> > > >(std::locale const&)" -> "std::locale::id::_M_id() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)\n0.00%\n(0.00%)\n3×"];
	"std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)" -> "__dynamic_cast" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > const& std::use_facet<std::num_put<wchar_t, std::ostreambuf_iterator<wchar_t, std::char_traits<wchar_t> > > >(std::locale const&)" -> "std::locale::id::_M_id() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"std::numpunct<char>::_M_initialize_numpunct(__locale_struct*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::numpunct<char>::_M_initialize_numpunct(__locale_struct*)\n0.00%\n(0.00%)\n0×"];
	"std::numpunct<wchar_t>::_M_initialize_numpunct(__locale_struct*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libstdc++.so.6.0.21\nstd::numpunct<wchar_t>::_M_initialize_numpunct(__locale_struct*)\n0.00%\n(0.00%)\n0×"];
	"str_to_mpn.isra.0" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nstr_to_mpn.isra.0\n0.00%\n(0.00%)\n274×"];
	strcasecmp [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nstrcasecmp\n0.00%\n(0.00%)\n2×"];
	strchrnul [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nstrchrnul\n0.00%\n(0.00%)\n111×"];
	strcmp [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nstrcmp\n0.00%\n(0.00%)\n4220×"];
	strcspn [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nstrcspn\n0.00%\n(0.00%)\n2×"];
	strdup [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nstrdup\n0.00%\n(0.00%)\n23×"];
	strdup -> "0x00000000057078a0" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n16×", labeldistance="0.50", penwidth="0.50"];
	strdup -> "__GI_memcpy" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n16×", labeldistance="0.50", penwidth="0.50"];
	strdup -> malloc [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	strdup -> memcpy [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	strdup -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n24×", labeldistance="0.50", penwidth="0.50"];
	strlen [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nstrlen\n0.01%\n(0.01%)\n34959×"];
	strncasecmp [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nstrncasecmp\n0.00%\n(0.00%)\n2×"];
	strncmp [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nstrncmp\n0.00%\n(0.00%)\n1×"];
	strncpy [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nstrncpy\n0.00%\n(0.00%)\n1×"];
	strnlen [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nstrnlen\n0.01%\n(0.01%)\n12994×"];
	strpbrk [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nstrpbrk\n0.00%\n(0.00%)\n1×"];
	strsep [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\nstrsep\n0.00%\n(0.00%)\n3×"];
	strspn [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nstrspn\n0.00%\n(0.00%)\n1×"];
	strstr [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nstrstr\n0.00%\n(0.00%)\n1×"];
	strtof [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nstrtof\n0.00%\n(0.00%)\n317×"];
	strtof -> "____strtof_l_internal" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n318×", labeldistance="0.50", penwidth="0.50"];
	"strtok_r" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nstrtok_r\n0.00%\n(0.00%)\n985×"];
	strtol [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nstrtol\n0.00%\n(0.00%)\n11×"];
	strtol -> "____strtol_l_internal" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n12×", labeldistance="0.50", penwidth="0.50"];
	strtoul [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nstrtoul\n0.00%\n(0.00%)\n8×"];
	strtoul -> "____strtoul_l_internal" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n8×", labeldistance="0.50", penwidth="0.50"];
	sysmalloc [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nsysmalloc\n0.00%\n(0.00%)\n3×"];
	sysmalloc -> "__default_morecore" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n4×", labeldistance="0.50", penwidth="0.50"];
	"systrim.isra.2" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nsystrim.isra.2\n0.00%\n(0.00%)\n4×"];
	tanf [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libm-2.23.so\ntanf\n0.07%\n(0.01%)\n113775×"];
	tanf -> "__ieee754_rem_pio2f" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n49373×", labeldistance="0.50", penwidth="0.50"];
	tanf -> "__kernel_tanf" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n113776×", labeldistance="0.50", penwidth="0.50"];
	time [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\ntime\n0.00%\n(0.00%)\n1×"];
	time -> "_dl_vdso_vsym" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"ultoa_invert(unsigned int, char*, unsigned char)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nultoa_invert(unsigned int, char*, unsigned char)\n0.00%\n(0.00%)\n22×"];
	uname [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\nuname\n0.00%\n(0.00%)\n1×"];
	uselocale [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nuselocale\n0.00%\n(0.00%)\n1×"];
	usleep [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nusleep\n0.00%\n(0.00%)\n5465×"];
	usleep -> nanosleep [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n5466×", labeldistance="0.50", penwidth="0.50"];
	"version_check_doit" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="ld-2.23.so\nversion_check_doit\n0.00%\n(0.00%)\n1×"];
	"version_check_doit" -> "_dl_check_all_versions" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	vfprintf [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nvfprintf\n0.00%\n(0.00%)\n38×"];
	vfprintf -> "_IO_default_xsputn" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n103×", labeldistance="0.50", penwidth="0.50"];
	vfprintf -> "_IO_padn" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n12×", labeldistance="0.50", penwidth="0.50"];
	vfprintf -> "_itoa_word" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n25×", labeldistance="0.50", penwidth="0.50"];
	vfprintf -> "buffered_vfprintf" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	vfprintf -> "read_int" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n16×", labeldistance="0.50", penwidth="0.50"];
	vfprintf -> strchrnul [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n70×", labeldistance="0.50", penwidth="0.50"];
	"vfprintf'2" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nvfprintf'2\n0.00%\n(0.00%)\n15×"];
	"vfprintf'2" -> "_IO_default_xsputn" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n61×", labeldistance="0.50", penwidth="0.50"];
	"vfprintf'2" -> "__printf_fp" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"vfprintf'2" -> "_itoa_word" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n15×", labeldistance="0.50", penwidth="0.50"];
	"vfprintf'2" -> "read_int" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"vfprintf'2" -> strchrnul [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n41×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AC_Fence, &AC_Fence::update>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AC_Fence, &AC_Fence::update>(void*)\n0.00%\n(0.00%)\n1802×"];
	"void Functor<void>::method_wrapper<AC_Fence, &AC_Fence::update>(void*)" -> "AC_PolyFence_loader::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AC_Sprayer, &AC_Sprayer::update>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AC_Sprayer, &AC_Sprayer::update>(void*)\n0.00%\n(0.00%)\n542×"];
	"void Functor<void>::method_wrapper<AC_Sprayer, &AC_Sprayer::update>(void*)" -> "AC_Sprayer::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n542×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Baro, &AP_Baro::accumulate>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_Baro, &AP_Baro::accumulate>(void*)\n0.00%\n(0.00%)\n9008×"];
	"void Functor<void>::method_wrapper<AP_Baro, &AP_Baro::accumulate>(void*)" -> "AP_Baro::accumulate()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Baro_SITL, &AP_Baro_SITL::_timer>(void*)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_Baro_SITL, &AP_Baro_SITL::_timer>(void*)\n0.28%\n(0.17%)\n219310×"];
	"void Functor<void>::method_wrapper<AP_Baro_SITL, &AP_Baro_SITL::_timer>(void*)" -> "AP_Baro::SimpleAtmosphere(float, float&, float&, float&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n18269×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Baro_SITL, &AP_Baro_SITL::_timer>(void*)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n237579×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Baro_SITL, &AP_Baro_SITL::_timer>(void*)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Baro_SITL, &AP_Baro_SITL::_timer>(void*)" -> expf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n18268×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Baro_SITL, &AP_Baro_SITL::_timer>(void*)" -> "rand_float()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n18269×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Beacon, &AP_Beacon::update>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_Beacon, &AP_Beacon::update>(void*)\n0.00%\n(0.00%)\n72070×"];
	"void Functor<void>::method_wrapper<AP_Beacon, &AP_Beacon::update>(void*)" -> "AP_Beacon::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Button, &AP_Button::update>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_Button, &AP_Button::update>(void*)\n0.00%\n(0.00%)\n901×"];
	"void Functor<void>::method_wrapper<AP_Button, &AP_Button::update>(void*)" -> "AP_Button::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n901×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Camera, &AP_Camera::update_trigger>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_Camera, &AP_Camera::update_trigger>(void*)\n0.00%\n(0.00%)\n9008×"];
	"void Functor<void>::method_wrapper<AP_Camera, &AP_Camera::update_trigger>(void*)" -> "AP_Camera::update_trigger()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Compass_SITL, &AP_Compass_SITL::_timer>(void*)" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_Compass_SITL, &AP_Compass_SITL::_timer>(void*)\n0.60%\n(0.00%)\n219270×"];
	"void Functor<void>::method_wrapper<AP_Compass_SITL, &AP_Compass_SITL::_timer>(void*)" -> "AP_Compass_SITL::_timer()" [arrowsize="0.35", color="#0d0f74", fontcolor="#0d0f74", fontsize="10.00", label="0.60%\n219270×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Gripper, &AP_Gripper::update>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_Gripper, &AP_Gripper::update>(void*)\n0.00%\n(0.00%)\n1802×"];
	"void Functor<void>::method_wrapper<AP_Gripper, &AP_Gripper::update>(void*)" -> "AP_Gripper::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_GyroFFT, &AP_GyroFFT::sample_gyros>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_GyroFFT, &AP_GyroFFT::sample_gyros>(void*)\n0.01%\n(0.00%)\n72070×"];
	"void Functor<void>::method_wrapper<AP_GyroFFT, &AP_GyroFFT::sample_gyros>(void*)" -> "AP_GyroFFT::sample_gyros()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_GyroFFT, &AP_GyroFFT::update_parameters>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_GyroFFT, &AP_GyroFFT::update_parameters>(void*)\n0.00%\n(0.00%)\n180×"];
	"void Functor<void>::method_wrapper<AP_GyroFFT, &AP_GyroFFT::update_parameters>(void*)" -> "AP_GyroFFT::update_parameters()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n180×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_InertialSensor, &AP_InertialSensor::periodic>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_InertialSensor, &AP_InertialSensor::periodic>(void*)\n0.00%\n(0.00%)\n72070×"];
	"void Functor<void>::method_wrapper<AP_InertialSensor, &AP_InertialSensor::periodic>(void*)" -> "AP_InertialSensor::periodic()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_InertialSensor_SITL, &AP_InertialSensor_SITL::timer_update>(void*)" [color="#0c7c8f", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_InertialSensor_SITL, &AP_InertialSensor_SITL::timer_update>(void*)\n21.45%\n(0.19%)\n434456×"];
	"void Functor<void>::method_wrapper<AP_InertialSensor_SITL, &AP_InertialSensor_SITL::timer_update>(void*)" -> "AP_HAL::micros64()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n434456×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_InertialSensor_SITL, &AP_InertialSensor_SITL::timer_update>(void*)" -> "AP_InertialSensor_SITL::generate_accel()" [arrowsize="0.35", color="#0d2e7c", fontcolor="#0d2e7c", fontsize="10.00", label="7.43%\n325712×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_InertialSensor_SITL, &AP_InertialSensor_SITL::timer_update>(void*)" -> "AP_InertialSensor_SITL::generate_gyro()" [arrowsize="0.37", color="#0d4f85", fontcolor="#0d4f85", fontsize="10.00", label="13.78%\n318556×", labeldistance="0.55", penwidth="0.55"];
	"void Functor<void>::method_wrapper<AP_Logger, &AP_Logger::periodic_tasks>(void*)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_Logger, &AP_Logger::periodic_tasks>(void*)\n0.26%\n(0.00%)\n72070×"];
	"void Functor<void>::method_wrapper<AP_Logger, &AP_Logger::periodic_tasks>(void*)" -> "AP_Logger::periodic_tasks()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.26%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Logger_File, &AP_Logger_File::_io_timer>(void*)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_Logger_File, &AP_Logger_File::_io_timer>(void*)\n0.20%\n(0.13%)\n308232×"];
	"void Functor<void>::method_wrapper<AP_Logger_File, &AP_Logger_File::_io_timer>(void*)" -> "AP::FS()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n843×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Logger_File, &AP_Logger_File::_io_timer>(void*)" -> "AP_Filesystem::disk_free(char const*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n154×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Logger_File, &AP_Logger_File::_io_timer>(void*)" -> "AP_Filesystem::write(int, void const*, unsigned long)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n689×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Logger_File, &AP_Logger_File::_io_timer>(void*)" -> "AP_HAL::Util::perf_begin(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n689×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Logger_File, &AP_Logger_File::_io_timer>(void*)" -> "AP_HAL::Util::perf_end(void*)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n689×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Logger_File, &AP_Logger_File::_io_timer>(void*)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.05%\n308232×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Logger_File, &AP_Logger_File::_io_timer>(void*)" -> "ByteBuffer::advance(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n689×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Logger_File, &AP_Logger_File::_io_timer>(void*)" -> "ByteBuffer::available() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n294501×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Logger_File, &AP_Logger_File::_io_timer>(void*)" -> "ByteBuffer::readptr(unsigned int&)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n689×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Logger_File, &AP_Logger_File::_io_timer>(void*)" -> "HALSITL::Semaphore::give()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n689×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Logger_File, &AP_Logger_File::_io_timer>(void*)" -> "HALSITL::Semaphore::take(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n689×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Mount, &AP_Mount::update>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_Mount, &AP_Mount::update>(void*)\n0.00%\n(0.00%)\n9008×"];
	"void Functor<void>::method_wrapper<AP_Mount, &AP_Mount::update>(void*)" -> "AP_Mount::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Notify, &AP_Notify::update>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_Notify, &AP_Notify::update>(void*)\n0.00%\n(0.00%)\n9008×"];
	"void Functor<void>::method_wrapper<AP_Notify, &AP_Notify::update>(void*)" -> "AP_Notify::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Param, &AP_Param::save_io_handler>(void*)" [color="#0d0f74", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_Param, &AP_Param::save_io_handler>(void*)\n0.61%\n(0.06%)\n308272×"];
	"void Functor<void>::method_wrapper<AP_Param, &AP_Param::save_io_handler>(void*)" -> "AP_Param::save_sync(bool)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.13%\n26×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Param, &AP_Param::save_io_handler>(void*)" -> "ByteBuffer::available() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n308298×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Param, &AP_Param::save_io_handler>(void*)" -> "ByteBuffer::read(unsigned char*, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n26×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Param, &AP_Param::save_io_handler>(void*)" -> "WithSemaphore::WithSemaphore(AP_HAL::Semaphore&, unsigned int)" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.28%\n308298×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Param, &AP_Param::save_io_handler>(void*)" -> "WithSemaphore::~WithSemaphore()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.12%\n308298×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Proximity, &AP_Proximity::update>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_Proximity, &AP_Proximity::update>(void*)\n0.00%\n(0.00%)\n36035×"];
	"void Functor<void>::method_wrapper<AP_Proximity, &AP_Proximity::update>(void*)" -> "AP_Proximity::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n36035×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_RunCam, &AP_RunCam::update>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_RunCam, &AP_RunCam::update>(void*)\n0.00%\n(0.00%)\n9008×"];
	"void Functor<void>::method_wrapper<AP_RunCam, &AP_RunCam::update>(void*)" -> "AP_RunCam::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Scheduler, &AP_Scheduler::update_logging>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_Scheduler, &AP_Scheduler::update_logging>(void*)\n0.00%\n(0.00%)\n18×"];
	"void Functor<void>::method_wrapper<AP_Scheduler, &AP_Scheduler::update_logging>(void*)" -> "AP_Scheduler::update_logging()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_ServoRelayEvents, &AP_ServoRelayEvents::update_events>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_ServoRelayEvents, &AP_ServoRelayEvents::update_events>(void*)\n0.00%\n(0.00%)\n9008×"];
	"void Functor<void>::method_wrapper<AP_ServoRelayEvents, &AP_ServoRelayEvents::update_events>(void*)" -> "AP_ServoRelayEvents::update_events()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_SmartRTL, &AP_SmartRTL::run_background_cleanup>(void*)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_SmartRTL, &AP_SmartRTL::run_background_cleanup>(void*)\n0.38%\n(0.09%)\n306007×"];
	"void Functor<void>::method_wrapper<AP_SmartRTL, &AP_SmartRTL::run_background_cleanup>(void*)" -> "AP_HAL::millis()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n231270×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_SmartRTL, &AP_SmartRTL::run_background_cleanup>(void*)" -> "AP_SmartRTL::routine_cleanup(unsigned short, unsigned short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n231270×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_SmartRTL, &AP_SmartRTL::run_background_cleanup>(void*)" -> "HALSITL::Semaphore::give()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.08%\n231270×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_SmartRTL, &AP_SmartRTL::run_background_cleanup>(void*)" -> "HALSITL::Semaphore::take_nonblocking()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.11%\n231270×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Stats, &AP_Stats::update>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_Stats, &AP_Stats::update>(void*)\n0.00%\n(0.00%)\n180×"];
	"void Functor<void>::method_wrapper<AP_Stats, &AP_Stats::update>(void*)" -> "AP_Stats::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n180×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_TempCalibration, &AP_TempCalibration::update>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_TempCalibration, &AP_TempCalibration::update>(void*)\n0.00%\n(0.00%)\n1802×"];
	"void Functor<void>::method_wrapper<AP_TempCalibration, &AP_TempCalibration::update>(void*)" -> "AP_TempCalibration::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Terrain, &AP_Terrain::io_timer>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_Terrain, &AP_Terrain::io_timer>(void*)\n0.05%\n(0.05%)\n304902×"];
	"void Functor<void>::method_wrapper<AP_Terrain, &AP_Terrain::io_timer>(void*)" -> "AP_Terrain::open_file()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Terrain, &AP_Terrain::io_timer>(void*)" -> "AP_Terrain::read_block()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n14×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<AP_Vehicle, &AP_Vehicle::fast_loop>(void*)" [color="#0c9789", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_Vehicle, &AP_Vehicle::fast_loop>(void*)\n27.39%\n(0.00%)\n72070×"];
	"void Functor<void>::method_wrapper<AP_Vehicle, &AP_Vehicle::fast_loop>(void*)" -> "Copter::fast_loop()" [arrowsize="0.52", color="#0c9789", fontcolor="#0c9789", fontsize="10.00", label="27.39%\n72070×", labeldistance="1.10", penwidth="1.10"];
	"void Functor<void>::method_wrapper<AP_Vehicle, &AP_Vehicle::send_watchdog_reset_statustext>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<AP_Vehicle, &AP_Vehicle::send_watchdog_reset_statustext>(void*)\n0.00%\n(0.00%)\n18×"];
	"void Functor<void>::method_wrapper<AP_Vehicle, &AP_Vehicle::send_watchdog_reset_statustext>(void*)" -> "HALSITL::Util::was_watchdog_reset() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::Log_Write_Vehicle_Startup_Messages>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::Log_Write_Vehicle_Startup_Messages>(void*)\n0.00%\n(0.00%)\n1×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::Log_Write_Vehicle_Startup_Messages>(void*)" -> "Copter::Log_Write_Vehicle_Startup_Messages()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::accel_cal_update>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::accel_cal_update>(void*)\n0.00%\n(0.00%)\n1802×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::accel_cal_update>(void*)" -> "Copter::accel_cal_update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::arm_motors_check>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::arm_motors_check>(void*)\n0.00%\n(0.00%)\n1802×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::arm_motors_check>(void*)" -> "Copter::arm_motors_check()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::auto_disarm_check>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::auto_disarm_check>(void*)\n0.00%\n(0.00%)\n1802×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::auto_disarm_check>(void*)" -> "Copter::auto_disarm_check()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::auto_trim>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::auto_trim>(void*)\n0.00%\n(0.00%)\n1802×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::auto_trim>(void*)" -> "Copter::auto_trim()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::avoidance_adsb_update>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::avoidance_adsb_update>(void*)\n0.01%\n(0.00%)\n1802×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::avoidance_adsb_update>(void*)" -> "Copter::avoidance_adsb_update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::check_vibration>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::check_vibration>(void*)\n0.00%\n(0.00%)\n1802×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::check_vibration>(void*)" -> "Copter::check_vibration()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::compass_cal_update>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::compass_cal_update>(void*)\n0.01%\n(0.00%)\n18017×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::compass_cal_update>(void*)" -> "Copter::compass_cal_update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n18017×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::ekf_check>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::ekf_check>(void*)\n0.01%\n(0.00%)\n1802×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::ekf_check>(void*)" -> "Copter::ekf_check()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::fourhundred_hz_logging>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::fourhundred_hz_logging>(void*)\n0.04%\n(0.01%)\n72070×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::fourhundred_hz_logging>(void*)" -> "Copter::should_log(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::gpsglitch_check>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::gpsglitch_check>(void*)\n0.00%\n(0.00%)\n1802×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::gpsglitch_check>(void*)" -> "Copter::gpsglitch_check()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::landinggear_update>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::landinggear_update>(void*)\n0.00%\n(0.00%)\n1802×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::landinggear_update>(void*)" -> "Copter::landinggear_update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::lost_vehicle_check>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::lost_vehicle_check>(void*)\n0.01%\n(0.00%)\n1802×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::lost_vehicle_check>(void*)" -> "Copter::lost_vehicle_check()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::one_hz_loop>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::one_hz_loop>(void*)\n0.01%\n(0.00%)\n180×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::one_hz_loop>(void*)" -> "AP_AHRS::update_orientation()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::one_hz_loop>(void*)" -> "AP_Arming_Copter::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n180×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::one_hz_loop>(void*)" -> "AP_MotorsMatrix::set_frame_class_and_type(AP_Motors::motor_frame_class, AP_Motors::motor_frame_type)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::one_hz_loop>(void*)" -> "AP_MotorsMulticopter::set_throttle_range(short, short)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::one_hz_loop>(void*)" -> "Copter::Log_Write_Data(LogDataID, unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n174×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::one_hz_loop>(void*)" -> "Copter::should_log(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n180×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::one_hz_loop>(void*)" -> "Copter::terrain_logging()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n180×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::one_hz_loop>(void*)" -> "Copter::update_using_interlock()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n6×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::one_hz_loop>(void*)" -> "SRV_Channels::enable_aux_servos()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n180×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::rc_loop>(void*)" [color="#0d0e73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::rc_loop>(void*)\n0.23%\n(0.00%)\n18017×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::rc_loop>(void*)" -> "Copter::read_radio()" [arrowsize="0.35", color="#0d0e73", fontcolor="#0d0e73", fontsize="10.00", label="0.21%\n18017×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::rc_loop>(void*)" -> "RC_Channels::read_mode_switch()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n18017×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::rc_loop>(void*)" -> "rc()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18017×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::read_rangefinder>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::read_rangefinder>(void*)\n0.02%\n(0.00%)\n3603×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::read_rangefinder>(void*)" -> "Copter::read_rangefinder()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n3603×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::rpm_update>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::rpm_update>(void*)\n0.01%\n(0.00%)\n7207×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::rpm_update>(void*)" -> "Copter::rpm_update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n7207×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::run_nav_updates>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::run_nav_updates>(void*)\n0.00%\n(0.00%)\n9008×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::run_nav_updates>(void*)" -> "Copter::run_nav_updates()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::standby_update>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::standby_update>(void*)\n0.00%\n(0.00%)\n18017×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::standby_update>(void*)" -> "Copter::standby_update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n18017×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::ten_hz_logging_loop>(void*)" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::ten_hz_logging_loop>(void*)\n0.43%\n(0.00%)\n1802×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::ten_hz_logging_loop>(void*)" -> "Copter::ten_hz_logging_loop()" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.43%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::terrain_update>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::terrain_update>(void*)\n0.04%\n(0.00%)\n1802×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::terrain_update>(void*)" -> "Copter::terrain_update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::three_hz_loop>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::three_hz_loop>(void*)\n0.00%\n(0.00%)\n542×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::three_hz_loop>(void*)" -> "Copter::failsafe_gcs_check()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n542×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::three_hz_loop>(void*)" -> "Copter::failsafe_terrain_check()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n542×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::three_hz_loop>(void*)" -> "Copter::fence_check()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n542×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::three_hz_loop>(void*)" -> "Copter::tuning()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n542×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::throttle_loop>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::throttle_loop>(void*)\n0.08%\n(0.00%)\n9008×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::throttle_loop>(void*)" -> "Copter::update_auto_armed()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::throttle_loop>(void*)" -> "Copter::update_dynamic_notch()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::throttle_loop>(void*)" -> "Copter::update_ground_effect_detector()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.07%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::throttle_loop>(void*)" -> "Copter::update_throttle_mix()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::twentyfive_hz_logging>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::twentyfive_hz_logging>(void*)\n0.12%\n(0.00%)\n4504×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::twentyfive_hz_logging>(void*)" -> "AP_Logger::Write_IMU()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n4349×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::twentyfive_hz_logging>(void*)" -> "Copter::Log_Write_Precland()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n4504×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::twentyfive_hz_logging>(void*)" -> "Copter::should_log(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::update_GPS>(void*)" [color="#0d0f73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::update_GPS>(void*)\n0.47%\n(0.00%)\n9008×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::update_GPS>(void*)" -> "AP_Camera::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n902×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::update_GPS>(void*)" -> "AP_GPS::num_sensors() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n17110×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::update_GPS>(void*)" -> "AP_GPS::update()" [arrowsize="0.35", color="#0d0f73", fontcolor="#0d0f73", fontsize="10.00", label="0.47%\n9008×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::update_altitude>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::update_altitude>(void*)\n0.07%\n(0.00%)\n1802×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::update_altitude>(void*)" -> "AP_GyroFFT::write_log_messages()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::update_altitude>(void*)" -> "Copter::Log_Write_Control_Tuning()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n1740×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::update_altitude>(void*)" -> "Copter::read_barometer()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.03%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::update_altitude>(void*)" -> "Copter::should_log(unsigned int)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::update_batt_compass>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::update_batt_compass>(void*)\n0.09%\n(0.00%)\n1802×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::update_batt_compass>(void*)" -> "AP::compass()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::update_batt_compass>(void*)" -> "AP_BattMonitor::read()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.02%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::update_batt_compass>(void*)" -> "AP_BattMonitor::voltage(unsigned char) const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::update_batt_compass>(void*)" -> "Compass::read()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.06%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::update_batt_compass>(void*)" -> "LowPassFilter<float>::get() const" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::update_batt_compass>(void*)" -> "float constrain_value<float>(float, float, float)" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1802×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::update_precland>(void*)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::update_precland>(void*)\n0.69%\n(0.00%)\n72070×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::update_precland>(void*)" -> "Copter::update_precland()" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.69%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<Copter, &Copter::update_throttle_hover>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<Copter, &Copter::update_throttle_hover>(void*)\n0.01%\n(0.00%)\n18017×"];
	"void Functor<void>::method_wrapper<Copter, &Copter::update_throttle_hover>(void*)" -> "Copter::update_throttle_hover()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n18017×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<GCS, &GCS::update_receive>(void*)" [color="#0d1074", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<GCS, &GCS::update_receive>(void*)\n0.75%\n(0.00%)\n72070×"];
	"void Functor<void>::method_wrapper<GCS, &GCS::update_receive>(void*)" -> "GCS::update_receive()" [arrowsize="0.35", color="#0d1074", fontcolor="#0d1074", fontsize="10.00", label="0.75%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<GCS, &GCS::update_send>(void*)" [color="#0d1575", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<GCS, &GCS::update_send>(void*)\n1.96%\n(0.00%)\n72070×"];
	"void Functor<void>::method_wrapper<GCS, &GCS::update_send>(void*)" -> "GCS::update_send()" [arrowsize="0.35", color="#0d1575", fontcolor="#0d1575", fontsize="10.00", label="1.96%\n72070×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<ModeSmartRTL, &ModeSmartRTL::save_position>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<ModeSmartRTL, &ModeSmartRTL::save_position>(void*)\n0.00%\n(0.00%)\n542×"];
	"void Functor<void>::method_wrapper<ModeSmartRTL, &ModeSmartRTL::save_position>(void*)" -> "ModeSmartRTL::save_position()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n542×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<OpticalFlow, &OpticalFlow::update>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<OpticalFlow, &OpticalFlow::update>(void*)\n0.00%\n(0.00%)\n36035×"];
	"void Functor<void>::method_wrapper<OpticalFlow, &OpticalFlow::update>(void*)" -> "OpticalFlow::update()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n36035×", labeldistance="0.50", penwidth="0.50"];
	"void Functor<void>::method_wrapper<RC_Channels, &RC_Channels::read_aux_all>(void*)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nvoid Functor<void>::method_wrapper<RC_Channels, &RC_Channels::read_aux_all>(void*)\n0.01%\n(0.00%)\n1802×"];
	"void Functor<void>::method_wrapper<RC_Channels, &RC_Channels::read_aux_all>(void*)" -> "RC_Channels::read_aux_all()" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.01%\n1802×", labeldistance="0.50", penwidth="0.50"];
	wctob [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nwctob\n0.00%\n(0.00%)\n127×"];
	"wctype_l" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libc-2.23.so\nwctype_l\n0.00%\n(0.00%)\n9×"];
	"wctype_l" -> "__GI_memcmp" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n49×", labeldistance="0.50", penwidth="0.50"];
	"wctype_l" -> strlen [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n68×", labeldistance="0.50", penwidth="0.50"];
	"wrap_360(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nwrap_360(float)\n0.00%\n(0.00%)\n904×"];
	"wrap_360(float)" -> "_dl_runtime_resolve_xsave'2" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n1×", labeldistance="0.50", penwidth="0.50"];
	"wrap_360(float)" -> fmodf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n903×", labeldistance="0.50", penwidth="0.50"];
	"wrap_360_cd(float)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nwrap_360_cd(float)\n0.00%\n(0.00%)\n10440×"];
	"wrap_360_cd(float)" -> fmodf [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.00%\n10440×", labeldistance="0.50", penwidth="0.50"];
	"wrap_360_cd(int)" [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="arducopter\nwrap_360_cd(int)\n0.00%\n(0.00%)\n1741×"];
	write [color="#0d0d73", fontcolor="#ffffff", fontsize="10.00", label="libpthread-2.23.so\nwrite\n0.05%\n(0.01%)\n572916×"];
	write -> "__write_nocancel" [arrowsize="0.35", color="#0d0d73", fontcolor="#0d0d73", fontsize="10.00", label="0.04%\n572917×", labeldistance="0.50", penwidth="0.50"];
}
